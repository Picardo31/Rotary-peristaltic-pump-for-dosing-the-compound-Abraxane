

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Jul 14 23:31:39 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	intentry,global,class=CODE,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    52                           	dabs	1,0x7E,2
    53  0000                     
    54                           ; Version 1.41
    55                           ; Generated 25/01/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC16F877A Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     	;# 
    89  0001                     	;# 
    90  0002                     	;# 
    91  0003                     	;# 
    92  0004                     	;# 
    93  0005                     	;# 
    94  0006                     	;# 
    95  0007                     	;# 
    96  0008                     	;# 
    97  0009                     	;# 
    98  000A                     	;# 
    99  000B                     	;# 
   100  000C                     	;# 
   101  000D                     	;# 
   102  000E                     	;# 
   103  000E                     	;# 
   104  000F                     	;# 
   105  0010                     	;# 
   106  0011                     	;# 
   107  0012                     	;# 
   108  0013                     	;# 
   109  0014                     	;# 
   110  0015                     	;# 
   111  0015                     	;# 
   112  0016                     	;# 
   113  0017                     	;# 
   114  0018                     	;# 
   115  0019                     	;# 
   116  001A                     	;# 
   117  001B                     	;# 
   118  001B                     	;# 
   119  001C                     	;# 
   120  001D                     	;# 
   121  001E                     	;# 
   122  001F                     	;# 
   123  0081                     	;# 
   124  0085                     	;# 
   125  0086                     	;# 
   126  0087                     	;# 
   127  0088                     	;# 
   128  0089                     	;# 
   129  008C                     	;# 
   130  008D                     	;# 
   131  008E                     	;# 
   132  0091                     	;# 
   133  0092                     	;# 
   134  0093                     	;# 
   135  0094                     	;# 
   136  0098                     	;# 
   137  0099                     	;# 
   138  009C                     	;# 
   139  009D                     	;# 
   140  009E                     	;# 
   141  009F                     	;# 
   142  010C                     	;# 
   143  010D                     	;# 
   144  010E                     	;# 
   145  010F                     	;# 
   146  018C                     	;# 
   147  018D                     	;# 
   148                           
   149                           	psect	strings
   150  0800                     __pstrings:	
   151  0800                     stringtab:	
   152  0800                     __stringtab:	
   153                           
   154                           ;	String table - string pointers are 1 byte each
   155  0800  1BFF               	btfsc	btemp+1,7
   156  0801  280A               	ljmp	stringcode
   157  0802  1383               	bcf	3,7
   158  0803  187F               	btfsc	btemp+1,0
   159  0804  1783               	bsf	3,7
   160  0805  0800               	movf	0,w
   161  0806  0A84               	incf	4,f
   162  0807  1903               	skipnz
   163  0808  0AFF               	incf	btemp+1,f
   164  0809  0008               	return
   165  080A                     stringcode:	
   166  080A                     stringdir:	
   167  080A  3008               	movlw	high stringdir
   168  080B  008A               	movwf	10
   169  080C  0804               	movf	4,w
   170  080D  0A84               	incf	4,f
   171  080E  0782               	addwf	2,f
   172  080F                     __stringbase:	
   173  080F  3400               	retlw	0
   174  0810                     __end_of__stringtab:	
   175  0810                     _dpowers:	
   176  0810  3401               	retlw	1
   177  0811  3400               	retlw	0
   178  0812  340A               	retlw	10
   179  0813  3400               	retlw	0
   180  0814  3464               	retlw	100
   181  0815  3400               	retlw	0
   182  0816  34E8               	retlw	232
   183  0817  3403               	retlw	3
   184  0818  3410               	retlw	16
   185  0819  3427               	retlw	39
   186  081A                     __end_of_dpowers:	
   187  0008                     _PORTDbits	set	8
   188  0006                     _PORTB	set	6
   189  000C                     _PIR1bits	set	12
   190  0001                     _TMR0	set	1
   191  0010                     _T1CONbits	set	16
   192  0006                     _PORTBbits	set	6
   193  000B                     _INTCONbits	set	11
   194  003E                     _RC6	set	62
   195  0049                     _RE1	set	73
   196  0048                     _RE0	set	72
   197  004A                     _RE2	set	74
   198  002D                     _RA5	set	45
   199  003F                     _RC7	set	63
   200  0044                     _RD4	set	68
   201  003D                     _RC5	set	61
   202  003C                     _RC4	set	60
   203  0042                     _RD2	set	66
   204  0043                     _RD3	set	67
   205  0041                     _RD1	set	65
   206  0040                     _RD0	set	64
   207  008C                     _PIE1bits	set	140
   208  0081                     _OPTION_REGbits	set	129
   209  0089                     _TRISEbits	set	137
   210  0085                     _TRISAbits	set	133
   211  0088                     _TRISD	set	136
   212  0087                     _TRISC	set	135
   213  0086                     _TRISB	set	134
   214  009F                     _ADCON1bits	set	159
   215  081A                     STR_20:	
   216  081A  3420               	retlw	32	;' '
   217  081B  3441               	retlw	65	;'A'
   218  081C  3462               	retlw	98	;'b'
   219  081D  3472               	retlw	114	;'r'
   220  081E  3461               	retlw	97	;'a'
   221  081F  3478               	retlw	120	;'x'
   222  0820  3461               	retlw	97	;'a'
   223  0821  346E               	retlw	110	;'n'
   224  0822  3465               	retlw	101	;'e'
   225  0823  343A               	retlw	58	;':'
   226  0824  3420               	retlw	32	;' '
   227  0825  3432               	retlw	50	;'2'
   228  0826  3430               	retlw	48	;'0'
   229  0827  346D               	retlw	109	;'m'
   230  0828  344C               	retlw	76	;'L'
   231  0829  3420               	retlw	32	;' '
   232  082A  3400               	retlw	0
   233  082B                     STR_17:	
   234  082B  3420               	retlw	32	;' '
   235  082C  3441               	retlw	65	;'A'
   236  082D  3462               	retlw	98	;'b'
   237  082E  3472               	retlw	114	;'r'
   238  082F  3461               	retlw	97	;'a'
   239  0830  3478               	retlw	120	;'x'
   240  0831  3461               	retlw	97	;'a'
   241  0832  346E               	retlw	110	;'n'
   242  0833  3465               	retlw	101	;'e'
   243  0834  343A               	retlw	58	;':'
   244  0835  3420               	retlw	32	;' '
   245  0836  3435               	retlw	53	;'5'
   246  0837  3432               	retlw	50	;'2'
   247  0838  346D               	retlw	109	;'m'
   248  0839  344C               	retlw	76	;'L'
   249  083A  3420               	retlw	32	;' '
   250  083B  3400               	retlw	0
   251  083C                     STR_23:	
   252  083C  3420               	retlw	32	;' '
   253  083D  3441               	retlw	65	;'A'
   254  083E  3462               	retlw	98	;'b'
   255  083F  3472               	retlw	114	;'r'
   256  0840  3461               	retlw	97	;'a'
   257  0841  3478               	retlw	120	;'x'
   258  0842  3461               	retlw	97	;'a'
   259  0843  346E               	retlw	110	;'n'
   260  0844  3465               	retlw	101	;'e'
   261  0845  343A               	retlw	58	;':'
   262  0846  3420               	retlw	32	;' '
   263  0847  3432               	retlw	50	;'2'
   264  0848  3435               	retlw	53	;'5'
   265  0849  346D               	retlw	109	;'m'
   266  084A  344C               	retlw	76	;'L'
   267  084B  3420               	retlw	32	;' '
   268  084C  3400               	retlw	0
   269  084D                     STR_16:	
   270  084D  3420               	retlw	32	;' '
   271  084E  3443               	retlw	67	;'C'
   272  084F  3461               	retlw	97	;'a'
   273  0850  346E               	retlw	110	;'n'
   274  0851  3463               	retlw	99	;'c'
   275  0852  3465               	retlw	101	;'e'
   276  0853  3472               	retlw	114	;'r'
   277  0854  3420               	retlw	32	;' '
   278  0855  3464               	retlw	100	;'d'
   279  0856  3465               	retlw	101	;'e'
   280  0857  3420               	retlw	32	;' '
   281  0858  346D               	retlw	109	;'m'
   282  0859  3461               	retlw	97	;'a'
   283  085A  346D               	retlw	109	;'m'
   284  085B  3461               	retlw	97	;'a'
   285  085C  3420               	retlw	32	;' '
   286  085D  3400               	retlw	0
   287  085E                     STR_22:	
   288  085E  3443               	retlw	67	;'C'
   289  085F  3461               	retlw	97	;'a'
   290  0860  346E               	retlw	110	;'n'
   291  0861  3463               	retlw	99	;'c'
   292  0862  3465               	retlw	101	;'e'
   293  0863  3472               	retlw	114	;'r'
   294  0864  3420               	retlw	32	;' '
   295  0865  3464               	retlw	100	;'d'
   296  0866  3465               	retlw	101	;'e'
   297  0867  3420               	retlw	32	;' '
   298  0868  3470               	retlw	112	;'p'
   299  0869  3475               	retlw	117	;'u'
   300  086A  346C               	retlw	108	;'l'
   301  086B  346D               	retlw	109	;'m'
   302  086C  346F               	retlw	111	;'o'
   303  086D  346E               	retlw	110	;'n'
   304  086E  3400               	retlw	0
   305  086F                     STR_19:	
   306  086F  3420               	retlw	32	;' '
   307  0870  3443               	retlw	67	;'C'
   308  0871  3461               	retlw	97	;'a'
   309  0872  346E               	retlw	110	;'n'
   310  0873  3463               	retlw	99	;'c'
   311  0874  3465               	retlw	101	;'e'
   312  0875  3472               	retlw	114	;'r'
   313  0876  3420               	retlw	32	;' '
   314  0877  3470               	retlw	112	;'p'
   315  0878  3461               	retlw	97	;'a'
   316  0879  346E               	retlw	110	;'n'
   317  087A  3463               	retlw	99	;'c'
   318  087B  3472               	retlw	114	;'r'
   319  087C  3465               	retlw	101	;'e'
   320  087D  3461               	retlw	97	;'a'
   321  087E  3473               	retlw	115	;'s'
   322  087F  3400               	retlw	0
   323  0880                     STR_24:	
   324  0880  3420               	retlw	32	;' '
   325  0881  3420               	retlw	32	;' '
   326  0882  3420               	retlw	32	;' '
   327  0883  3420               	retlw	32	;' '
   328  0884  3420               	retlw	32	;' '
   329  0885  3420               	retlw	32	;' '
   330  0886  3400               	retlw	0
   331  0887                     STR_28:	
   332  0887  346D               	retlw	109	;'m'
   333  0888  344C               	retlw	76	;'L'
   334  0889  3420               	retlw	32	;' '
   335  088A  3420               	retlw	32	;' '
   336  088B  3420               	retlw	32	;' '
   337  088C  3420               	retlw	32	;' '
   338  088D  3400               	retlw	0
   339  088E                     STR_27:	
   340  088E  346D               	retlw	109	;'m'
   341  088F  3469               	retlw	105	;'i'
   342  0890  346E               	retlw	110	;'n'
   343  0891  3420               	retlw	32	;' '
   344  0892  3420               	retlw	32	;' '
   345  0893  3420               	retlw	32	;' '
   346  0894  3400               	retlw	0
   347  0895                     STR_25:	
   348  0895  3445               	retlw	69	;'E'
   349  0896  3452               	retlw	82	;'R'
   350  0897  3452               	retlw	82	;'R'
   351  0898  344F               	retlw	79	;'O'
   352  0899  3452               	retlw	82	;'R'
   353  089A  3420               	retlw	32	;' '
   354  089B  3400               	retlw	0
   355  089C                     STR_26:	
   356  089C  3444               	retlw	68	;'D'
   357  089D  346F               	retlw	111	;'o'
   358  089E  3473               	retlw	115	;'s'
   359  089F  3469               	retlw	105	;'i'
   360  08A0  3473               	retlw	115	;'s'
   361  08A1  343A               	retlw	58	;':'
   362  08A2  3400               	retlw	0
   363  08A3                     STR_12:	
   364  08A3  3425               	retlw	37	;'%'
   365  08A4  3464               	retlw	100	;'d'
   366  08A5  342E               	retlw	46	;'.'
   367  08A6  3425               	retlw	37	;'%'
   368  08A7  3464               	retlw	100	;'d'
   369  08A8  3400               	retlw	0
   370  08A9                     STR_11:	
   371  08A9  342E               	retlw	46	;'.'
   372  08AA  3400               	retlw	0
   373  08AB                     STR_10:	
   374  08AB  3430               	retlw	48	;'0'
   375  08AC  3400               	retlw	0
   376  08AD                     STR_1:	
   377  08AD  3431               	retlw	49	;'1'
   378  08AE  3400               	retlw	0
   379  08AF                     STR_2:	
   380  08AF  3432               	retlw	50	;'2'
   381  08B0  3400               	retlw	0
   382  08B1                     STR_3:	
   383  08B1  3433               	retlw	51	;'3'
   384  08B2  3400               	retlw	0
   385  08B3                     STR_4:	
   386  08B3  3434               	retlw	52	;'4'
   387  08B4  3400               	retlw	0
   388  08B5                     STR_5:	
   389  08B5  3435               	retlw	53	;'5'
   390  08B6  3400               	retlw	0
   391  08B7                     STR_6:	
   392  08B7  3436               	retlw	54	;'6'
   393  08B8  3400               	retlw	0
   394  08B9                     STR_7:	
   395  08B9  3437               	retlw	55	;'7'
   396  08BA  3400               	retlw	0
   397  08BB                     STR_8:	
   398  08BB  3438               	retlw	56	;'8'
   399  08BC  3400               	retlw	0
   400  08BD                     STR_9:	
   401  08BD  3439               	retlw	57	;'9'
   402  08BE  3400               	retlw	0
   403  0886                     
   404                           ; #config settings
   405  0000                     
   406                           	psect	cinit
   407  0015                     start_initialization:	
   408  0015                     __initialization:	
   409                           
   410                           ; Clear objects allocated to COMMON
   411  0015  01FD               	clrf	__pbssCOMMON& (0+127)
   412                           
   413                           ; Clear objects allocated to BANK0
   414  0016  1283               	bcf	3,5	;RP0=0, select bank0
   415  0017  1303               	bcf	3,6	;RP1=0, select bank0
   416  0018  01EC               	clrf	__pbssBANK0& (0+127)
   417  0019  01ED               	clrf	(__pbssBANK0+1)& (0+127)
   418                           
   419                           ; Clear objects allocated to BANK1
   420  001A  30DB               	movlw	low __pbssBANK1
   421  001B  0084               	movwf	4
   422  001C  30EE               	movlw	low (__pbssBANK1+19)
   423  001D  160A  118A  2312  120A  118A  	fcall	clear_ram0
   424                           
   425                           ; Clear objects allocated to BANK3
   426  0022  1783               	bsf	3,7	;select IRP bank2
   427  0023  3090               	movlw	low __pbssBANK3
   428  0024  0084               	movwf	4
   429  0025  30A0               	movlw	low (__pbssBANK3+16)
   430  0026  160A  118A  2312   	fcall	clear_ram0
   431  0029                     end_of_initialization:	
   432                           ;End of C runtime variable initialization code
   433                           
   434  0029                     __end_of__initialization:	
   435  0029  0183               	clrf	3
   436  002A  120A  118A  2C4A   	ljmp	_main	;jump to C main() function
   437                           
   438                           	psect	bssCOMMON
   439  007D                     __pbssCOMMON:	
   440  007D                     _timer:	
   441  007D                     	ds	1
   442                           
   443                           	psect	bssBANK0
   444  006C                     __pbssBANK0:	
   445  006C                     _seleccion:	
   446  006C                     	ds	1
   447  006D                     _modo:	
   448  006D                     	ds	1
   449                           
   450                           	psect	bssBANK1
   451  00DB                     __pbssBANK1:	
   452  00DB                     _mL:	
   453  00DB                     	ds	3
   454  00DE                     _minuto:	
   455  00DE                     	ds	3
   456  00E1                     _ms:	
   457  00E1                     	ds	3
   458  00E4                     _errno:	
   459  00E4                     	ds	2
   460  00E6                     _tiempo:	
   461  00E6                     	ds	2
   462  00E8                     _timerPrueba:	
   463  00E8                     	ds	2
   464  00EA                     _num:	
   465  00EA                     	ds	4
   466                           
   467                           	psect	bssBANK3
   468  0190                     __pbssBANK3:	
   469  0190                     _s:	
   470  0190                     	ds	16
   471                           
   472                           	psect	clrtext
   473  1312                     clear_ram0:	
   474                           ;	Called with FSR containing the base address, and
   475                           ;	W with the last address+1
   476                           
   477  1312  0064               	clrwdt	;clear the watchdog before getting into this loop
   478  1313                     clrloop0:	
   479  1313  0180               	clrf	0	;clear RAM location pointed to by FSR
   480  1314  0A84               	incf	4,f	;increment pointer
   481  1315  0604               	xorwf	4,w	;XOR with final address
   482  1316  1903               	btfsc	3,2	;have we reached the end yet?
   483  1317  3400               	retlw	0	;all done for this memory range, return
   484  1318  0604               	xorwf	4,w	;XOR again to restore value
   485  1319  2B13               	goto	clrloop0	;do the next byte
   486                           
   487                           	psect	cstackBANK1
   488  00A0                     __pcstackBANK1:	
   489  00A0                     ___fttol@sign1:	
   490  00A0                     _strtod$640:	
   491                           ; 1 bytes @ 0x0
   492                           
   493                           
   494                           ; 3 bytes @ 0x0
   495  00A0                     	ds	1
   496  00A1                     ___fttol@lval:	
   497                           
   498                           ; 4 bytes @ 0x1
   499  00A1                     	ds	2
   500  00A3                     _strtod$641:	
   501                           
   502                           ; 3 bytes @ 0x3
   503  00A3                     	ds	2
   504  00A5                     ___fttol@exp1:	
   505                           
   506                           ; 1 bytes @ 0x5
   507  00A5                     	ds	1
   508  00A6                     ?_trunc:	
   509  00A6                     _strtod$642:	
   510                           ; 3 bytes @ 0x6
   511                           
   512  00A6                     trunc@x:	
   513                           ; 3 bytes @ 0x6
   514                           
   515                           
   516                           ; 3 bytes @ 0x6
   517  00A6                     	ds	3
   518  00A9                     _strtod$643:	
   519  00A9                     trunc@i:	
   520                           ; 3 bytes @ 0x9
   521                           
   522                           
   523                           ; 3 bytes @ 0x9
   524  00A9                     	ds	3
   525  00AC                     _strtod$639:	
   526  00AC                     trunc@expon:	
   527                           ; 2 bytes @ 0xC
   528                           
   529                           
   530                           ; 2 bytes @ 0xC
   531  00AC                     	ds	2
   532  00AE                     ?_round:	
   533  00AE                     strtod@eexp:	
   534                           ; 3 bytes @ 0xE
   535                           
   536  00AE                     round@x:	
   537                           ; 1 bytes @ 0xE
   538                           
   539                           
   540                           ; 3 bytes @ 0xE
   541  00AE                     	ds	1
   542  00AF                     strtod@flags:	
   543                           
   544                           ; 1 bytes @ 0xF
   545  00AF                     	ds	1
   546  00B0                     strtod@expon:	
   547                           
   548                           ; 1 bytes @ 0x10
   549  00B0                     	ds	1
   550  00B1                     round@f:	
   551  00B1                     strtod@_u:	
   552                           ; 3 bytes @ 0x11
   553                           
   554                           
   555                           ; 4 bytes @ 0x11
   556  00B1                     	ds	3
   557  00B4                     ?_floatToString:	
   558  00B4                     floatToString@floatNum:	
   559                           ; 1 bytes @ 0x14
   560                           
   561                           
   562                           ; 3 bytes @ 0x14
   563  00B4                     	ds	1
   564  00B5                     strtod@s:	
   565                           
   566                           ; 1 bytes @ 0x15
   567  00B5                     	ds	1
   568  00B6                     ?_atof:	
   569                           
   570                           ; 3 bytes @ 0x16
   571  00B6                     	ds	1
   572  00B7                     floatToString@string:	
   573                           
   574                           ; 16 bytes @ 0x17
   575  00B7                     	ds	16
   576  00C7                     _floatToString$1002:	
   577                           
   578                           ; 3 bytes @ 0x27
   579  00C7                     	ds	3
   580  00CA                     _floatToString$1003:	
   581                           
   582                           ; 3 bytes @ 0x2A
   583  00CA                     	ds	3
   584  00CD                     floatToString@decimal:	
   585                           
   586                           ; 2 bytes @ 0x2D
   587  00CD                     	ds	2
   588  00CF                     floatToString@integer:	
   589                           
   590                           ; 2 bytes @ 0x2F
   591  00CF                     	ds	2
   592  00D1                     ??_main:	
   593                           
   594                           ; 1 bytes @ 0x31
   595  00D1                     	ds	1
   596  00D2                     _main$1004:	
   597                           
   598                           ; 3 bytes @ 0x32
   599  00D2                     	ds	3
   600  00D5                     _main$1005:	
   601                           
   602                           ; 3 bytes @ 0x35
   603  00D5                     	ds	3
   604  00D8                     _main$1006:	
   605                           
   606                           ; 3 bytes @ 0x38
   607  00D8                     	ds	3
   608                           
   609                           	psect	cstackCOMMON
   610  0070                     __pcstackCOMMON:	
   611  0070                     ?_isspace:	
   612  0070                     ?_isdigit:	
   613                           ; 1 bit 
   614                           
   615  0070                     ?_strcat:	
   616                           ; 1 bit 
   617                           
   618  0070                     ?_Lcd_Port:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0070                     ?_Lcd_Cmd:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0070                     ?_Lcd_Init:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0070                     ?_Lcd_Write_Char:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  0070                     ?_ISR:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0070                     ?_Navkey:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0070                     ?_Setup:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0070                     ?_main:	
   640                           ; 1 bytes @ 0x0
   641                           
   642  0070                     ?_Lcd_Clear:	
   643                           ; 1 bytes @ 0x0
   644                           
   645  0070                     ?i1_strlen:	
   646                           ; 2 bytes @ 0x0
   647                           
   648  0070                     strcat@from:	
   649                           ; 2 bytes @ 0x0
   650                           
   651                           
   652                           ; 1 bytes @ 0x0
   653  0070                     	ds	1
   654  0071                     ??_strcat:	
   655                           
   656                           ; 1 bytes @ 0x1
   657  0071                     	ds	1
   658  0072                     ??i1_strlen:	
   659  0072                     strcat@cp:	
   660                           ; 1 bytes @ 0x2
   661                           
   662                           
   663                           ; 1 bytes @ 0x2
   664  0072                     	ds	1
   665  0073                     strcat@to:	
   666                           
   667                           ; 1 bytes @ 0x3
   668  0073                     	ds	3
   669  0076                     i1strlen@s:	
   670                           
   671                           ; 1 bytes @ 0x6
   672  0076                     	ds	1
   673  0077                     i1strlen@cp:	
   674                           
   675                           ; 1 bytes @ 0x7
   676  0077                     	ds	1
   677  0078                     ??_ISR:	
   678                           
   679                           ; 1 bytes @ 0x8
   680  0078                     	ds	5
   681                           
   682                           	psect	cstackBANK0
   683  0020                     __pcstackBANK0:	
   684  0020                     ISR@i:	
   685                           
   686                           ; 2 bytes @ 0x0
   687  0020                     	ds	2
   688  0022                     ??_isspace:	
   689  0022                     ??_isdigit:	
   690                           ; 1 bytes @ 0x2
   691                           
   692  0022                     ??_Lcd_Port:	
   693                           ; 1 bytes @ 0x2
   694                           
   695  0022                     ?___bmul:	
   696                           ; 1 bytes @ 0x2
   697                           
   698  0022                     ?_strlen:	
   699                           ; 1 bytes @ 0x2
   700                           
   701  0022                     ?_strcpy:	
   702                           ; 2 bytes @ 0x2
   703                           
   704  0022                     ?___lwdiv:	
   705                           ; 2 bytes @ 0x2
   706                           
   707  0022                     ?___ftpack:	
   708                           ; 2 bytes @ 0x2
   709                           
   710  0022                     ?_frexp:	
   711                           ; 3 bytes @ 0x2
   712                           
   713  0022                     ?___lmul:	
   714                           ; 3 bytes @ 0x2
   715                           
   716  0022                     Lcd_Port@a:	
   717                           ; 4 bytes @ 0x2
   718                           
   719  0022                     ___bmul@multiplicand:	
   720                           ; 1 bytes @ 0x2
   721                           
   722  0022                     _isdigit$710:	
   723                           ; 1 bytes @ 0x2
   724                           
   725  0022                     _isspace$713:	
   726                           ; 1 bytes @ 0x2
   727                           
   728  0022                     ___lwdiv@divisor:	
   729                           ; 1 bytes @ 0x2
   730                           
   731  0022                     strcpy@to:	
   732                           ; 2 bytes @ 0x2
   733                           
   734  0022                     ___ftpack@arg:	
   735                           ; 2 bytes @ 0x2
   736                           
   737  0022                     frexp@value:	
   738                           ; 3 bytes @ 0x2
   739                           
   740  0022                     ___lmul@multiplier:	
   741                           ; 3 bytes @ 0x2
   742                           
   743                           
   744                           ; 4 bytes @ 0x2
   745  0022                     	ds	1
   746  0023                     ??_Lcd_Cmd:	
   747  0023                     ??_Lcd_Write_Char:	
   748                           ; 1 bytes @ 0x3
   749                           
   750  0023                     ??___bmul:	
   751                           ; 1 bytes @ 0x3
   752                           
   753  0023                     isdigit@c:	
   754                           ; 1 bytes @ 0x3
   755                           
   756  0023                     isspace@c:	
   757                           ; 1 bytes @ 0x3
   758                           
   759                           
   760                           ; 1 bytes @ 0x3
   761  0023                     	ds	1
   762  0024                     ??_strlen:	
   763  0024                     Lcd_Write_Char@temp:	
   764                           ; 1 bytes @ 0x4
   765                           
   766  0024                     ___bmul@product:	
   767                           ; 1 bytes @ 0x4
   768                           
   769  0024                     ___lwdiv@dividend:	
   770                           ; 1 bytes @ 0x4
   771                           
   772  0024                     strcpy@from:	
   773                           ; 2 bytes @ 0x4
   774                           
   775                           
   776                           ; 2 bytes @ 0x4
   777  0024                     	ds	1
   778  0025                     Lcd_Cmd@a:	
   779  0025                     Lcd_Write_Char@y:	
   780                           ; 1 bytes @ 0x5
   781                           
   782  0025                     ___bmul@multiplier:	
   783                           ; 1 bytes @ 0x5
   784                           
   785  0025                     ___ftpack@exp:	
   786                           ; 1 bytes @ 0x5
   787                           
   788  0025                     frexp@eptr:	
   789                           ; 1 bytes @ 0x5
   790                           
   791                           
   792                           ; 1 bytes @ 0x5
   793  0025                     	ds	1
   794  0026                     ??_strcpy:	
   795  0026                     ??_frexp:	
   796                           ; 1 bytes @ 0x6
   797                           
   798  0026                     ??_Lcd_Clear:	
   799                           ; 1 bytes @ 0x6
   800                           
   801  0026                     ?_Lcd_Set_Cursor:	
   802                           ; 1 bytes @ 0x6
   803                           
   804  0026                     ??_Lcd_Init:	
   805                           ; 1 bytes @ 0x6
   806                           
   807  0026                     ??___lwdiv:	
   808                           ; 1 bytes @ 0x6
   809                           
   810  0026                     Lcd_Set_Cursor@b:	
   811                           ; 1 bytes @ 0x6
   812                           
   813  0026                     Lcd_Write_Char@a:	
   814                           ; 1 bytes @ 0x6
   815                           
   816  0026                     ___ftpack@sign:	
   817                           ; 1 bytes @ 0x6
   818                           
   819  0026                     ___lmul@multiplicand:	
   820                           ; 1 bytes @ 0x6
   821                           
   822                           
   823                           ; 4 bytes @ 0x6
   824  0026                     	ds	1
   825  0027                     ??___ftpack:	
   826  0027                     ??_Lcd_Set_Cursor:	
   827                           ; 1 bytes @ 0x7
   828                           
   829  0027                     ?_Lcd_Write_String:	
   830                           ; 1 bytes @ 0x7
   831                           
   832  0027                     Lcd_Write_String@a:	
   833                           ; 1 bytes @ 0x7
   834                           
   835  0027                     ___lwdiv@quotient:	
   836                           ; 2 bytes @ 0x7
   837                           
   838  0027                     strcpy@cp:	
   839                           ; 2 bytes @ 0x7
   840                           
   841                           
   842                           ; 2 bytes @ 0x7
   843  0027                     	ds	1
   844  0028                     strlen@cp:	
   845                           
   846                           ; 1 bytes @ 0x8
   847  0028                     	ds	1
   848  0029                     ??_Lcd_Write_String:	
   849  0029                     ??_Navkey:	
   850                           ; 1 bytes @ 0x9
   851                           
   852  0029                     Lcd_Set_Cursor@a:	
   853                           ; 1 bytes @ 0x9
   854                           
   855  0029                     ___lwdiv@counter:	
   856                           ; 1 bytes @ 0x9
   857                           
   858  0029                     strlen@s:	
   859                           ; 1 bytes @ 0x9
   860                           
   861                           
   862                           ; 1 bytes @ 0x9
   863  0029                     	ds	1
   864  002A                     ??___lmul:	
   865  002A                     ?___lwmod:	
   866                           ; 1 bytes @ 0xA
   867                           
   868  002A                     ?___altoft:	
   869                           ; 2 bytes @ 0xA
   870                           
   871  002A                     ?___awtoft:	
   872                           ; 3 bytes @ 0xA
   873                           
   874  002A                     Lcd_Set_Cursor@z:	
   875                           ; 3 bytes @ 0xA
   876                           
   877  002A                     ___awtoft@c:	
   878                           ; 1 bytes @ 0xA
   879                           
   880  002A                     ___lwmod@divisor:	
   881                           ; 2 bytes @ 0xA
   882                           
   883  002A                     ___altoft@c:	
   884                           ; 2 bytes @ 0xA
   885                           
   886                           
   887                           ; 4 bytes @ 0xA
   888  002A                     	ds	1
   889  002B                     Lcd_Set_Cursor@y:	
   890  002B                     ___lmul@product:	
   891                           ; 1 bytes @ 0xB
   892                           
   893                           
   894                           ; 4 bytes @ 0xB
   895  002B                     	ds	1
   896  002C                     Lcd_Set_Cursor@temp:	
   897  002C                     Lcd_Write_String@i:	
   898                           ; 1 bytes @ 0xC
   899                           
   900  002C                     ___lwmod@dividend:	
   901                           ; 2 bytes @ 0xC
   902                           
   903                           
   904                           ; 2 bytes @ 0xC
   905  002C                     	ds	1
   906  002D                     ??_Setup:	
   907  002D                     ??___awtoft:	
   908                           ; 1 bytes @ 0xD
   909                           
   910                           
   911                           ; 1 bytes @ 0xD
   912  002D                     	ds	1
   913  002E                     ??___altoft:	
   914  002E                     ??___lwmod:	
   915                           ; 1 bytes @ 0xE
   916                           
   917                           
   918                           ; 1 bytes @ 0xE
   919  002E                     	ds	1
   920  002F                     ___awtoft@sign:	
   921  002F                     ___lwmod@counter:	
   922                           ; 1 bytes @ 0xF
   923                           
   924                           
   925                           ; 1 bytes @ 0xF
   926  002F                     	ds	1
   927  0030                     ?_sprintf:	
   928  0030                     sprintf@f:	
   929                           ; 2 bytes @ 0x10
   930                           
   931  0030                     ___altoft@exp:	
   932                           ; 1 bytes @ 0x10
   933                           
   934                           
   935                           ; 1 bytes @ 0x10
   936  0030                     	ds	1
   937  0031                     ___altoft@sign:	
   938                           
   939                           ; 1 bytes @ 0x11
   940  0031                     	ds	1
   941  0032                     ?___ftneg:	
   942  0032                     ___ftneg@f1:	
   943                           ; 3 bytes @ 0x12
   944                           
   945                           
   946                           ; 3 bytes @ 0x12
   947  0032                     	ds	3
   948  0035                     ??_sprintf:	
   949  0035                     ??___ftneg:	
   950                           ; 1 bytes @ 0x15
   951                           
   952  0035                     ?___ftadd:	
   953                           ; 1 bytes @ 0x15
   954                           
   955  0035                     ___ftadd@f1:	
   956                           ; 3 bytes @ 0x15
   957                           
   958                           
   959                           ; 3 bytes @ 0x15
   960  0035                     	ds	3
   961  0038                     sprintf@ap:	
   962  0038                     ___ftadd@f2:	
   963                           ; 1 bytes @ 0x18
   964                           
   965                           
   966                           ; 3 bytes @ 0x18
   967  0038                     	ds	1
   968  0039                     sprintf@flag:	
   969                           
   970                           ; 1 bytes @ 0x19
   971  0039                     	ds	1
   972  003A                     sprintf@prec:	
   973                           
   974                           ; 1 bytes @ 0x1A
   975  003A                     	ds	1
   976  003B                     ??___ftadd:	
   977  003B                     sprintf@val:	
   978                           ; 1 bytes @ 0x1B
   979                           
   980                           
   981                           ; 2 bytes @ 0x1B
   982  003B                     	ds	2
   983  003D                     sprintf@sp:	
   984                           
   985                           ; 1 bytes @ 0x1D
   986  003D                     	ds	1
   987  003E                     sprintf@c:	
   988                           
   989                           ; 1 bytes @ 0x1E
   990  003E                     	ds	1
   991  003F                     ___ftadd@sign:	
   992                           
   993                           ; 1 bytes @ 0x1F
   994  003F                     	ds	1
   995  0040                     ___ftadd@exp2:	
   996                           
   997                           ; 1 bytes @ 0x20
   998  0040                     	ds	1
   999  0041                     ___ftadd@exp1:	
  1000                           
  1001                           ; 1 bytes @ 0x21
  1002  0041                     	ds	1
  1003  0042                     ?___ftmul:	
  1004  0042                     ___ftmul@f1:	
  1005                           ; 3 bytes @ 0x22
  1006                           
  1007                           
  1008                           ; 3 bytes @ 0x22
  1009  0042                     	ds	3
  1010  0045                     ___ftmul@f2:	
  1011                           
  1012                           ; 3 bytes @ 0x25
  1013  0045                     	ds	3
  1014  0048                     ??___ftmul:	
  1015                           
  1016                           ; 1 bytes @ 0x28
  1017  0048                     	ds	4
  1018  004C                     ___ftmul@exp:	
  1019                           
  1020                           ; 1 bytes @ 0x2C
  1021  004C                     	ds	1
  1022  004D                     ___ftmul@f3_as_product:	
  1023                           
  1024                           ; 3 bytes @ 0x2D
  1025  004D                     	ds	3
  1026  0050                     ___ftmul@cntr:	
  1027                           
  1028                           ; 1 bytes @ 0x30
  1029  0050                     	ds	1
  1030  0051                     ___ftmul@sign:	
  1031                           
  1032                           ; 1 bytes @ 0x31
  1033  0051                     	ds	1
  1034  0052                     ?___ftge:	
  1035  0052                     ?___ftdiv:	
  1036                           ; 1 bit 
  1037                           
  1038  0052                     ___ftdiv@f2:	
  1039                           ; 3 bytes @ 0x32
  1040                           
  1041  0052                     ___ftge@ff1:	
  1042                           ; 3 bytes @ 0x32
  1043                           
  1044                           
  1045                           ; 3 bytes @ 0x32
  1046  0052                     	ds	3
  1047  0055                     ___ftdiv@f1:	
  1048  0055                     ___ftge@ff2:	
  1049                           ; 3 bytes @ 0x35
  1050                           
  1051                           
  1052                           ; 3 bytes @ 0x35
  1053  0055                     	ds	3
  1054  0058                     ??___ftdiv:	
  1055  0058                     ??___ftge:	
  1056                           ; 1 bytes @ 0x38
  1057                           
  1058                           
  1059                           ; 1 bytes @ 0x38
  1060  0058                     	ds	4
  1061  005C                     ___ftdiv@cntr:	
  1062                           
  1063                           ; 1 bytes @ 0x3C
  1064  005C                     	ds	1
  1065  005D                     ___ftdiv@f3:	
  1066                           
  1067                           ; 3 bytes @ 0x3D
  1068  005D                     	ds	3
  1069  0060                     ___ftdiv@exp:	
  1070                           
  1071                           ; 1 bytes @ 0x40
  1072  0060                     	ds	1
  1073  0061                     ___ftdiv@sign:	
  1074                           
  1075                           ; 1 bytes @ 0x41
  1076  0061                     	ds	1
  1077  0062                     ?_strtod:	
  1078  0062                     ?___fttol:	
  1079                           ; 3 bytes @ 0x42
  1080                           
  1081  0062                     strtod@res:	
  1082                           ; 4 bytes @ 0x42
  1083                           
  1084  0062                     ___fttol@f1:	
  1085                           ; 1 bytes @ 0x42
  1086                           
  1087                           
  1088                           ; 3 bytes @ 0x42
  1089  0062                     	ds	3
  1090  0065                     ??_strtod:	
  1091                           
  1092                           ; 1 bytes @ 0x45
  1093  0065                     	ds	1
  1094  0066                     ??___fttol:	
  1095                           
  1096                           ; 1 bytes @ 0x46
  1097  0066                     	ds	3
  1098  0069                     ??_atof:	
  1099  0069                     atof@s:	
  1100                           ; 1 bytes @ 0x49
  1101                           
  1102                           
  1103                           ; 1 bytes @ 0x49
  1104  0069                     	ds	1
  1105  006A                     ??_trunc:	
  1106                           
  1107                           ; 1 bytes @ 0x4A
  1108  006A                     	ds	1
  1109  006B                     ??_round:	
  1110  006B                     ??_floatToString:	
  1111                           ; 1 bytes @ 0x4B
  1112                           
  1113                           
  1114                           ; 1 bytes @ 0x4B
  1115  006B                     	ds	1
  1116                           
  1117                           	psect	maintext
  1118  044A                     __pmaintext:	
  1119 ;;
  1120 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1121 ;;
  1122 ;; *************** function _main *****************
  1123 ;; Defined at:
  1124 ;;		line 269 in file "main.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;		None
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;		None
  1129 ;; Return value:  Size  Location     Type
  1130 ;;                  1    wreg      void 
  1131 ;; Registers used:
  1132 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1133 ;; Tracked objects:
  1134 ;;		On entry : B00/0
  1135 ;;		On exit  : 0/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1138 ;;      Params:         0       0       0       0       0
  1139 ;;      Locals:         0       0       9       0       0
  1140 ;;      Temps:          0       0       1       0       0
  1141 ;;      Totals:         0       0      10       0       0
  1142 ;;Total ram usage:       10 bytes
  1143 ;; Hardware stack levels required when called:    8
  1144 ;; This function calls:
  1145 ;;		_Lcd_Set_Cursor
  1146 ;;		_Lcd_Write_Char
  1147 ;;		_Lcd_Write_String
  1148 ;;		_Navkey
  1149 ;;		_Setup
  1150 ;;		___awtoft
  1151 ;;		___ftadd
  1152 ;;		___ftdiv
  1153 ;;		___ftge
  1154 ;;		___ftmul
  1155 ;;		___fttol
  1156 ;;		_atof
  1157 ;;		_floatToString
  1158 ;;		_round
  1159 ;;		_strcpy
  1160 ;;		_strlen
  1161 ;; This function is called by:
  1162 ;;		Startup code after reset
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           
  1167                           ;psect for function _main
  1168  044A                     _main:	
  1169                           
  1170                           ;main.c: 270: Setup();
  1171                           
  1172                           ;incstack = 0
  1173                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1174  044A  120A  118A  27B0  120A  118A  	fcall	_Setup
  1175                           
  1176                           ;main.c: 271: TMR0=0x00;
  1177  044F  1283               	bcf	3,5	;RP0=0, select bank0
  1178  0450  1303               	bcf	3,6	;RP1=0, select bank0
  1179  0451  0181               	clrf	1	;volatile
  1180  0452                     l3408:	
  1181                           ;main.c: 279: while(1)
  1182                           
  1183                           
  1184                           ;main.c: 280: {
  1185                           ;main.c: 281: if(modo==0)
  1186  0452  1283               	bcf	3,5	;RP0=0, select bank0
  1187  0453  1303               	bcf	3,6	;RP1=0, select bank0
  1188  0454  086D               	movf	_modo,w
  1189  0455  1D03               	btfss	3,2
  1190  0456  2C91               	goto	l3422
  1191                           
  1192                           ;main.c: 282: {
  1193                           ;main.c: 283: strcpy(num,"");
  1194  0457  30EA               	movlw	(low (_num| 0))& (0+255)
  1195  0458  00A2               	movwf	strcpy@to
  1196  0459  3000               	movlw	0
  1197  045A  00A3               	movwf	strcpy@to+1
  1198  045B  3077               	movlw	(low (((STR_24+6)-__stringbase)| (0+32768)))& (0+255)
  1199  045C  00A4               	movwf	strcpy@from
  1200  045D  3080               	movlw	128
  1201  045E  00A5               	movwf	strcpy@from+1
  1202  045F  160A  118A  23B5  120A  118A  	fcall	_strcpy
  1203                           
  1204                           ;main.c: 284: timer=229;
  1205  0464  30E5               	movlw	229
  1206  0465  1683               	bsf	3,5	;RP0=1, select bank1
  1207  0466  1303               	bcf	3,6	;RP1=0, select bank1
  1208  0467  00D1               	movwf	??_main^(0+128)
  1209  0468  0851               	movf	??_main^(0+128),w
  1210  0469  00FD               	movwf	_timer
  1211                           
  1212                           ;main.c: 285: minuto=30;
  1213  046A  3000               	movlw	0
  1214  046B  00DE               	movwf	_minuto^(0+128)
  1215  046C  30F0               	movlw	240
  1216  046D  00DF               	movwf	(_minuto+1)^(0+128)
  1217  046E  3041               	movlw	65
  1218  046F  00E0               	movwf	(_minuto+2)^(0+128)
  1219                           
  1220                           ;main.c: 286: Lcd_Set_Cursor(1,1);
  1221  0470  1283               	bcf	3,5	;RP0=0, select bank0
  1222  0471  1303               	bcf	3,6	;RP1=0, select bank0
  1223  0472  01A6               	clrf	Lcd_Set_Cursor@b
  1224  0473  0AA6               	incf	Lcd_Set_Cursor@b,f
  1225  0474  3001               	movlw	1
  1226  0475  160A  118A  2622  120A  118A  	fcall	_Lcd_Set_Cursor
  1227                           
  1228                           ;main.c: 287: Lcd_Write_String(" Cancer de mama ");
  1229  047A  303E               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  1230  047B  1283               	bcf	3,5	;RP0=0, select bank0
  1231  047C  1303               	bcf	3,6	;RP1=0, select bank0
  1232  047D  00A7               	movwf	Lcd_Write_String@a
  1233  047E  3080               	movlw	128
  1234  047F  00A8               	movwf	Lcd_Write_String@a+1
  1235  0480  160A  118A  255E  120A  118A  	fcall	_Lcd_Write_String
  1236                           
  1237                           ;main.c: 288: Lcd_Set_Cursor(2,1);
  1238  0485  1283               	bcf	3,5	;RP0=0, select bank0
  1239  0486  1303               	bcf	3,6	;RP1=0, select bank0
  1240  0487  01A6               	clrf	Lcd_Set_Cursor@b
  1241  0488  0AA6               	incf	Lcd_Set_Cursor@b,f
  1242  0489  3002               	movlw	2
  1243  048A  160A  118A  2622  120A  118A  	fcall	_Lcd_Set_Cursor
  1244                           
  1245                           ;main.c: 289: Lcd_Write_String(" Abraxane: 52mL ");
  1246  048F  301C               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  1247  0490  2F52               	goto	L1
  1248  0491                     l3422:	
  1249                           ;main.c: 290: }
  1250                           
  1251                           
  1252                           ;main.c: 291: else if(modo==1)
  1253  0491  1283               	bcf	3,5	;RP0=0, select bank0
  1254  0492  1303               	bcf	3,6	;RP1=0, select bank0
  1255  0493  036D               	decf	_modo,w
  1256  0494  1D03               	btfss	3,2
  1257  0495  2CD0               	goto	l3436
  1258                           
  1259                           ;main.c: 292: {
  1260                           ;main.c: 293: strcpy(num,"");
  1261  0496  30EA               	movlw	(low (_num| 0))& (0+255)
  1262  0497  00A2               	movwf	strcpy@to
  1263  0498  3000               	movlw	0
  1264  0499  00A3               	movwf	strcpy@to+1
  1265  049A  3077               	movlw	(low (((STR_24+6)-__stringbase)| (0+32768)))& (0+255)
  1266  049B  00A4               	movwf	strcpy@from
  1267  049C  3080               	movlw	128
  1268  049D  00A5               	movwf	strcpy@from+1
  1269  049E  160A  118A  23B5  120A  118A  	fcall	_strcpy
  1270                           
  1271                           ;main.c: 294: timer=184;
  1272  04A3  30B8               	movlw	184
  1273  04A4  1683               	bsf	3,5	;RP0=1, select bank1
  1274  04A5  1303               	bcf	3,6	;RP1=0, select bank1
  1275  04A6  00D1               	movwf	??_main^(0+128)
  1276  04A7  0851               	movf	??_main^(0+128),w
  1277  04A8  00FD               	movwf	_timer
  1278                           
  1279                           ;main.c: 295: minuto=30;
  1280  04A9  3000               	movlw	0
  1281  04AA  00DE               	movwf	_minuto^(0+128)
  1282  04AB  30F0               	movlw	240
  1283  04AC  00DF               	movwf	(_minuto+1)^(0+128)
  1284  04AD  3041               	movlw	65
  1285  04AE  00E0               	movwf	(_minuto+2)^(0+128)
  1286                           
  1287                           ;main.c: 296: Lcd_Set_Cursor(1,1);
  1288  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  1289  04B0  1303               	bcf	3,6	;RP1=0, select bank0
  1290  04B1  01A6               	clrf	Lcd_Set_Cursor@b
  1291  04B2  0AA6               	incf	Lcd_Set_Cursor@b,f
  1292  04B3  3001               	movlw	1
  1293  04B4  160A  118A  2622  120A  118A  	fcall	_Lcd_Set_Cursor
  1294                           
  1295                           ;main.c: 297: Lcd_Write_String(" Cancer pancreas");
  1296  04B9  3060               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  1297  04BA  1283               	bcf	3,5	;RP0=0, select bank0
  1298  04BB  1303               	bcf	3,6	;RP1=0, select bank0
  1299  04BC  00A7               	movwf	Lcd_Write_String@a
  1300  04BD  3080               	movlw	128
  1301  04BE  00A8               	movwf	Lcd_Write_String@a+1
  1302  04BF  160A  118A  255E  120A  118A  	fcall	_Lcd_Write_String
  1303                           
  1304                           ;main.c: 298: Lcd_Set_Cursor(2,1);
  1305  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  1306  04C5  1303               	bcf	3,6	;RP1=0, select bank0
  1307  04C6  01A6               	clrf	Lcd_Set_Cursor@b
  1308  04C7  0AA6               	incf	Lcd_Set_Cursor@b,f
  1309  04C8  3002               	movlw	2
  1310  04C9  160A  118A  2622  120A  118A  	fcall	_Lcd_Set_Cursor
  1311                           
  1312                           ;main.c: 299: Lcd_Write_String(" Abraxane: 20mL ");
  1313  04CE  300B               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  1314  04CF  2F52               	goto	L1
  1315  04D0                     l3436:	
  1316                           ;main.c: 300: }
  1317                           
  1318                           
  1319                           ;main.c: 301: else if(modo==2)
  1320  04D0  3002               	movlw	2
  1321  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  1322  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  1323  04D3  066D               	xorwf	_modo,w
  1324  04D4  1D03               	btfss	3,2
  1325  04D5  2D10               	goto	l3450
  1326                           
  1327                           ;main.c: 302: {
  1328                           ;main.c: 303: strcpy(num,"");
  1329  04D6  30EA               	movlw	(low (_num| 0))& (0+255)
  1330  04D7  00A2               	movwf	strcpy@to
  1331  04D8  3000               	movlw	0
  1332  04D9  00A3               	movwf	strcpy@to+1
  1333  04DA  3077               	movlw	(low (((STR_24+6)-__stringbase)| (0+32768)))& (0+255)
  1334  04DB  00A4               	movwf	strcpy@from
  1335  04DC  3080               	movlw	128
  1336  04DD  00A5               	movwf	strcpy@from+1
  1337  04DE  160A  118A  23B5  120A  118A  	fcall	_strcpy
  1338                           
  1339                           ;main.c: 304: timer=199;
  1340  04E3  30C7               	movlw	199
  1341  04E4  1683               	bsf	3,5	;RP0=1, select bank1
  1342  04E5  1303               	bcf	3,6	;RP1=0, select bank1
  1343  04E6  00D1               	movwf	??_main^(0+128)
  1344  04E7  0851               	movf	??_main^(0+128),w
  1345  04E8  00FD               	movwf	_timer
  1346                           
  1347                           ;main.c: 305: minuto=30;
  1348  04E9  3000               	movlw	0
  1349  04EA  00DE               	movwf	_minuto^(0+128)
  1350  04EB  30F0               	movlw	240
  1351  04EC  00DF               	movwf	(_minuto+1)^(0+128)
  1352  04ED  3041               	movlw	65
  1353  04EE  00E0               	movwf	(_minuto+2)^(0+128)
  1354                           
  1355                           ;main.c: 306: Lcd_Set_Cursor(1,1);
  1356  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  1357  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  1358  04F1  01A6               	clrf	Lcd_Set_Cursor@b
  1359  04F2  0AA6               	incf	Lcd_Set_Cursor@b,f
  1360  04F3  3001               	movlw	1
  1361  04F4  160A  118A  2622  120A  118A  	fcall	_Lcd_Set_Cursor
  1362                           
  1363                           ;main.c: 307: Lcd_Write_String("Cancer de pulmon");
  1364  04F9  304F               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  1365  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  1366  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  1367  04FC  00A7               	movwf	Lcd_Write_String@a
  1368  04FD  3080               	movlw	128
  1369  04FE  00A8               	movwf	Lcd_Write_String@a+1
  1370  04FF  160A  118A  255E  120A  118A  	fcall	_Lcd_Write_String
  1371                           
  1372                           ;main.c: 308: Lcd_Set_Cursor(2,1);
  1373  0504  1283               	bcf	3,5	;RP0=0, select bank0
  1374  0505  1303               	bcf	3,6	;RP1=0, select bank0
  1375  0506  01A6               	clrf	Lcd_Set_Cursor@b
  1376  0507  0AA6               	incf	Lcd_Set_Cursor@b,f
  1377  0508  3002               	movlw	2
  1378  0509  160A  118A  2622  120A  118A  	fcall	_Lcd_Set_Cursor
  1379                           
  1380                           ;main.c: 309: Lcd_Write_String(" Abraxane: 25mL ");
  1381  050E  302D               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  1382  050F  2F52               	goto	L1
  1383  0510                     l3450:	
  1384                           ;main.c: 310: }
  1385                           
  1386                           
  1387                           ;main.c: 311: else if(modo==3)
  1388  0510  3003               	movlw	3
  1389  0511  1283               	bcf	3,5	;RP0=0, select bank0
  1390  0512  1303               	bcf	3,6	;RP1=0, select bank0
  1391  0513  066D               	xorwf	_modo,w
  1392  0514  1D03               	btfss	3,2
  1393  0515  2F5C               	goto	l3522
  1394                           
  1395                           ;main.c: 312: {
  1396                           ;main.c: 313: if(atof(num)>9999)
  1397  0516  30EA               	movlw	(low (_num| 0))& (0+255)
  1398  0517  160A  118A  237E  120A  118A  	fcall	_atof
  1399  051C  1683               	bsf	3,5	;RP0=1, select bank1
  1400  051D  1303               	bcf	3,6	;RP1=0, select bank1
  1401  051E  0836               	movf	?_atof^(0+128),w
  1402  051F  00D2               	movwf	_main$1004^(0+128)
  1403  0520  0837               	movf	(?_atof+1)^(0+128),w
  1404  0521  00D3               	movwf	(_main$1004+1)^(0+128)
  1405  0522  0838               	movf	(?_atof+2)^(0+128),w
  1406  0523  00D4               	movwf	(_main$1004+2)^(0+128)
  1407                           
  1408                           ;main.c: 312: {
  1409                           ;main.c: 313: if(atof(num)>9999)
  1410  0524  303C               	movlw	60
  1411  0525  1283               	bcf	3,5	;RP0=0, select bank0
  1412  0526  1303               	bcf	3,6	;RP1=0, select bank0
  1413  0527  00D2               	movwf	___ftge@ff1
  1414  0528  301C               	movlw	28
  1415  0529  00D3               	movwf	___ftge@ff1+1
  1416  052A  3046               	movlw	70
  1417  052B  00D4               	movwf	___ftge@ff1+2
  1418  052C  1683               	bsf	3,5	;RP0=1, select bank1
  1419  052D  1303               	bcf	3,6	;RP1=0, select bank1
  1420  052E  0852               	movf	_main$1004^(0+128),w
  1421  052F  1283               	bcf	3,5	;RP0=0, select bank0
  1422  0530  1303               	bcf	3,6	;RP1=0, select bank0
  1423  0531  00D5               	movwf	___ftge@ff2
  1424  0532  1683               	bsf	3,5	;RP0=1, select bank1
  1425  0533  1303               	bcf	3,6	;RP1=0, select bank1
  1426  0534  0853               	movf	(_main$1004+1)^(0+128),w
  1427  0535  1283               	bcf	3,5	;RP0=0, select bank0
  1428  0536  1303               	bcf	3,6	;RP1=0, select bank0
  1429  0537  00D6               	movwf	___ftge@ff2+1
  1430  0538  1683               	bsf	3,5	;RP0=1, select bank1
  1431  0539  1303               	bcf	3,6	;RP1=0, select bank1
  1432  053A  0854               	movf	(_main$1004+2)^(0+128),w
  1433  053B  1283               	bcf	3,5	;RP0=0, select bank0
  1434  053C  1303               	bcf	3,6	;RP1=0, select bank0
  1435  053D  00D7               	movwf	___ftge@ff2+2
  1436  053E  160A  118A  26CB  120A  118A  	fcall	___ftge
  1437  0543  1803               	btfsc	3,0
  1438  0544  2D53               	goto	l3458
  1439                           
  1440                           ;main.c: 314: {
  1441                           ;main.c: 315: num[strlen(num)-1]=0;
  1442  0545  30EA               	movlw	(low (_num| 0))& (0+255)
  1443  0546  160A  118A  244B  120A  118A  	fcall	_strlen
  1444  054B  1283               	bcf	3,5	;RP0=0, select bank0
  1445  054C  1303               	bcf	3,6	;RP1=0, select bank0
  1446  054D  0822               	movf	?_strlen,w
  1447  054E  3EFF               	addlw	255
  1448  054F  3EEA               	addlw	(low (_num| 0))& (0+255)
  1449  0550  0084               	movwf	4
  1450  0551  1383               	bcf	3,7	;select IRP bank1
  1451  0552  0180               	clrf	0
  1452  0553                     l3458:	
  1453                           
  1454                           ;main.c: 316: }
  1455                           ;main.c: 317: if(seleccion==0)
  1456  0553  1283               	bcf	3,5	;RP0=0, select bank0
  1457  0554  1303               	bcf	3,6	;RP1=0, select bank0
  1458  0555  086C               	movf	_seleccion,w
  1459  0556  1D03               	btfss	3,2
  1460  0557  2D88               	goto	l3470
  1461                           
  1462                           ;main.c: 318: {
  1463                           ;main.c: 319: minuto=atof(num);
  1464  0558  30EA               	movlw	(low (_num| 0))& (0+255)
  1465  0559  160A  118A  237E  120A  118A  	fcall	_atof
  1466  055E  1683               	bsf	3,5	;RP0=1, select bank1
  1467  055F  1303               	bcf	3,6	;RP1=0, select bank1
  1468  0560  0836               	movf	?_atof^(0+128),w
  1469  0561  00DE               	movwf	_minuto^(0+128)
  1470  0562  0837               	movf	(?_atof+1)^(0+128),w
  1471  0563  00DF               	movwf	(_minuto+1)^(0+128)
  1472  0564  0838               	movf	(?_atof+2)^(0+128),w
  1473  0565  00E0               	movwf	(_minuto+2)^(0+128)
  1474                           
  1475                           ;main.c: 320: Lcd_Set_Cursor(1,7);
  1476  0566  3007               	movlw	7
  1477  0567  00D1               	movwf	??_main^(0+128)
  1478  0568  0851               	movf	??_main^(0+128),w
  1479  0569  1283               	bcf	3,5	;RP0=0, select bank0
  1480  056A  1303               	bcf	3,6	;RP1=0, select bank0
  1481  056B  00A6               	movwf	Lcd_Set_Cursor@b
  1482  056C  3001               	movlw	1
  1483  056D  160A  118A  2622  120A  118A  	fcall	_Lcd_Set_Cursor
  1484                           
  1485                           ;main.c: 321: Lcd_Write_Char('>');
  1486  0572  303E               	movlw	62
  1487  0573  160A  118A  24E3  120A  118A  	fcall	_Lcd_Write_Char
  1488                           
  1489                           ;main.c: 322: Lcd_Set_Cursor(2,7);
  1490  0578  3007               	movlw	7
  1491  0579  1683               	bsf	3,5	;RP0=1, select bank1
  1492  057A  1303               	bcf	3,6	;RP1=0, select bank1
  1493  057B  00D1               	movwf	??_main^(0+128)
  1494  057C  0851               	movf	??_main^(0+128),w
  1495  057D  1283               	bcf	3,5	;RP0=0, select bank0
  1496  057E  1303               	bcf	3,6	;RP1=0, select bank0
  1497  057F  00A6               	movwf	Lcd_Set_Cursor@b
  1498  0580  3002               	movlw	2
  1499  0581  160A  118A  2622  120A  118A  	fcall	_Lcd_Set_Cursor
  1500                           
  1501                           ;main.c: 323: Lcd_Write_Char(' ');
  1502  0586  3020               	movlw	32
  1503  0587  2DBC               	goto	L2
  1504  0588                     l3470:	
  1505                           ;main.c: 324: }
  1506                           
  1507                           
  1508                           ;main.c: 325: else if(seleccion==1)
  1509  0588  1283               	bcf	3,5	;RP0=0, select bank0
  1510  0589  1303               	bcf	3,6	;RP1=0, select bank0
  1511  058A  036C               	decf	_seleccion,w
  1512  058B  1D03               	btfss	3,2
  1513  058C  2DC1               	goto	l3482
  1514                           
  1515                           ;main.c: 326: {
  1516                           ;main.c: 327: mL=atof(num);
  1517  058D  30EA               	movlw	(low (_num| 0))& (0+255)
  1518  058E  160A  118A  237E  120A  118A  	fcall	_atof
  1519  0593  1683               	bsf	3,5	;RP0=1, select bank1
  1520  0594  1303               	bcf	3,6	;RP1=0, select bank1
  1521  0595  0836               	movf	?_atof^(0+128),w
  1522  0596  00DB               	movwf	_mL^(0+128)
  1523  0597  0837               	movf	(?_atof+1)^(0+128),w
  1524  0598  00DC               	movwf	(_mL+1)^(0+128)
  1525  0599  0838               	movf	(?_atof+2)^(0+128),w
  1526  059A  00DD               	movwf	(_mL+2)^(0+128)
  1527                           
  1528                           ;main.c: 328: Lcd_Set_Cursor(1,7);
  1529  059B  3007               	movlw	7
  1530  059C  00D1               	movwf	??_main^(0+128)
  1531  059D  0851               	movf	??_main^(0+128),w
  1532  059E  1283               	bcf	3,5	;RP0=0, select bank0
  1533  059F  1303               	bcf	3,6	;RP1=0, select bank0
  1534  05A0  00A6               	movwf	Lcd_Set_Cursor@b
  1535  05A1  3001               	movlw	1
  1536  05A2  160A  118A  2622  120A  118A  	fcall	_Lcd_Set_Cursor
  1537                           
  1538                           ;main.c: 329: Lcd_Write_Char(' ');
  1539  05A7  3020               	movlw	32
  1540  05A8  160A  118A  24E3  120A  118A  	fcall	_Lcd_Write_Char
  1541                           
  1542                           ;main.c: 330: Lcd_Set_Cursor(2,7);
  1543  05AD  3007               	movlw	7
  1544  05AE  1683               	bsf	3,5	;RP0=1, select bank1
  1545  05AF  1303               	bcf	3,6	;RP1=0, select bank1
  1546  05B0  00D1               	movwf	??_main^(0+128)
  1547  05B1  0851               	movf	??_main^(0+128),w
  1548  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  1549  05B3  1303               	bcf	3,6	;RP1=0, select bank0
  1550  05B4  00A6               	movwf	Lcd_Set_Cursor@b
  1551  05B5  3002               	movlw	2
  1552  05B6  160A  118A  2622  120A  118A  	fcall	_Lcd_Set_Cursor
  1553                           
  1554                           ;main.c: 331: Lcd_Write_Char('>');
  1555  05BB  303E               	movlw	62
  1556  05BC                     L2:	
  1557  05BC  160A  118A  24E3  120A  118A  	fcall	_Lcd_Write_Char
  1558  05C1                     l3482:	
  1559                           
  1560                           ;main.c: 332: }
  1561                           ;main.c: 333: if((mL!=0)&&(minuto!=0))
  1562  05C1  1683               	bsf	3,5	;RP0=1, select bank1
  1563  05C2  1303               	bcf	3,6	;RP1=0, select bank1
  1564  05C3  085D               	movf	(_mL+2)^(0+128),w
  1565  05C4  045C               	iorwf	(_mL+1)^(0+128),w
  1566  05C5  045B               	iorwf	_mL^(0+128),w
  1567  05C6  1903               	skipnz
  1568  05C7  2EA4               	goto	l3492
  1569  05C8  0860               	movf	(_minuto+2)^(0+128),w
  1570  05C9  045F               	iorwf	(_minuto+1)^(0+128),w
  1571  05CA  045E               	iorwf	_minuto^(0+128),w
  1572  05CB  1903               	skipnz
  1573  05CC  2EA4               	goto	l3492
  1574                           
  1575                           ;main.c: 334: {
  1576                           ;main.c: 335: ms=minuto/(mL*0.64);
  1577  05CD  30D7               	movlw	215
  1578  05CE  1283               	bcf	3,5	;RP0=0, select bank0
  1579  05CF  1303               	bcf	3,6	;RP1=0, select bank0
  1580  05D0  00C2               	movwf	___ftmul@f1
  1581  05D1  3023               	movlw	35
  1582  05D2  00C3               	movwf	___ftmul@f1+1
  1583  05D3  303F               	movlw	63
  1584  05D4  00C4               	movwf	___ftmul@f1+2
  1585  05D5  1683               	bsf	3,5	;RP0=1, select bank1
  1586  05D6  1303               	bcf	3,6	;RP1=0, select bank1
  1587  05D7  085B               	movf	_mL^(0+128),w
  1588  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  1589  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  1590  05DA  00C5               	movwf	___ftmul@f2
  1591  05DB  1683               	bsf	3,5	;RP0=1, select bank1
  1592  05DC  1303               	bcf	3,6	;RP1=0, select bank1
  1593  05DD  085C               	movf	(_mL+1)^(0+128),w
  1594  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  1595  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  1596  05E0  00C6               	movwf	___ftmul@f2+1
  1597  05E1  1683               	bsf	3,5	;RP0=1, select bank1
  1598  05E2  1303               	bcf	3,6	;RP1=0, select bank1
  1599  05E3  085D               	movf	(_mL+2)^(0+128),w
  1600  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  1601  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  1602  05E6  00C7               	movwf	___ftmul@f2+2
  1603  05E7  120A  158A  233E  120A  118A  	fcall	___ftmul
  1604  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  1605  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  1606  05EE  0842               	movf	?___ftmul,w
  1607  05EF  00D2               	movwf	___ftdiv@f2
  1608  05F0  0843               	movf	?___ftmul+1,w
  1609  05F1  00D3               	movwf	___ftdiv@f2+1
  1610  05F2  0844               	movf	?___ftmul+2,w
  1611  05F3  00D4               	movwf	___ftdiv@f2+2
  1612  05F4  1683               	bsf	3,5	;RP0=1, select bank1
  1613  05F5  1303               	bcf	3,6	;RP1=0, select bank1
  1614  05F6  085E               	movf	_minuto^(0+128),w
  1615  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  1616  05F8  1303               	bcf	3,6	;RP1=0, select bank0
  1617  05F9  00D5               	movwf	___ftdiv@f1
  1618  05FA  1683               	bsf	3,5	;RP0=1, select bank1
  1619  05FB  1303               	bcf	3,6	;RP1=0, select bank1
  1620  05FC  085F               	movf	(_minuto+1)^(0+128),w
  1621  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  1622  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  1623  05FF  00D6               	movwf	___ftdiv@f1+1
  1624  0600  1683               	bsf	3,5	;RP0=1, select bank1
  1625  0601  1303               	bcf	3,6	;RP1=0, select bank1
  1626  0602  0860               	movf	(_minuto+2)^(0+128),w
  1627  0603  1283               	bcf	3,5	;RP0=0, select bank0
  1628  0604  1303               	bcf	3,6	;RP1=0, select bank0
  1629  0605  00D7               	movwf	___ftdiv@f1+2
  1630  0606  120A  158A  21C4  120A  118A  	fcall	___ftdiv
  1631  060B  1283               	bcf	3,5	;RP0=0, select bank0
  1632  060C  1303               	bcf	3,6	;RP1=0, select bank0
  1633  060D  0852               	movf	?___ftdiv,w
  1634  060E  1683               	bsf	3,5	;RP0=1, select bank1
  1635  060F  1303               	bcf	3,6	;RP1=0, select bank1
  1636  0610  00E1               	movwf	_ms^(0+128)
  1637  0611  1283               	bcf	3,5	;RP0=0, select bank0
  1638  0612  1303               	bcf	3,6	;RP1=0, select bank0
  1639  0613  0853               	movf	?___ftdiv+1,w
  1640  0614  1683               	bsf	3,5	;RP0=1, select bank1
  1641  0615  1303               	bcf	3,6	;RP1=0, select bank1
  1642  0616  00E2               	movwf	(_ms+1)^(0+128)
  1643  0617  1283               	bcf	3,5	;RP0=0, select bank0
  1644  0618  1303               	bcf	3,6	;RP1=0, select bank0
  1645  0619  0854               	movf	?___ftdiv+2,w
  1646  061A  1683               	bsf	3,5	;RP0=1, select bank1
  1647  061B  1303               	bcf	3,6	;RP1=0, select bank1
  1648  061C  00E3               	movwf	(_ms+2)^(0+128)
  1649                           
  1650                           ;main.c: 336: timerPrueba=round(((ms-8.22)*255)/(0.086-8.22));
  1651  061D  0861               	movf	_ms^(0+128),w
  1652  061E  1283               	bcf	3,5	;RP0=0, select bank0
  1653  061F  1303               	bcf	3,6	;RP1=0, select bank0
  1654  0620  00B8               	movwf	___ftadd@f2
  1655  0621  1683               	bsf	3,5	;RP0=1, select bank1
  1656  0622  1303               	bcf	3,6	;RP1=0, select bank1
  1657  0623  0862               	movf	(_ms+1)^(0+128),w
  1658  0624  1283               	bcf	3,5	;RP0=0, select bank0
  1659  0625  1303               	bcf	3,6	;RP1=0, select bank0
  1660  0626  00B9               	movwf	___ftadd@f2+1
  1661  0627  1683               	bsf	3,5	;RP0=1, select bank1
  1662  0628  1303               	bcf	3,6	;RP1=0, select bank1
  1663  0629  0863               	movf	(_ms+2)^(0+128),w
  1664  062A  1283               	bcf	3,5	;RP0=0, select bank0
  1665  062B  1303               	bcf	3,6	;RP1=0, select bank0
  1666  062C  00BA               	movwf	___ftadd@f2+2
  1667  062D  3085               	movlw	133
  1668  062E  00B5               	movwf	___ftadd@f1
  1669  062F  3003               	movlw	3
  1670  0630  00B6               	movwf	___ftadd@f1+1
  1671  0631  30C1               	movlw	193
  1672  0632  00B7               	movwf	___ftadd@f1+2
  1673  0633  120A  158A  25D0  120A  118A  	fcall	___ftadd
  1674  0638  1283               	bcf	3,5	;RP0=0, select bank0
  1675  0639  1303               	bcf	3,6	;RP1=0, select bank0
  1676  063A  0835               	movf	?___ftadd,w
  1677  063B  00C5               	movwf	___ftmul@f2
  1678  063C  0836               	movf	?___ftadd+1,w
  1679  063D  00C6               	movwf	___ftmul@f2+1
  1680  063E  0837               	movf	?___ftadd+2,w
  1681  063F  00C7               	movwf	___ftmul@f2+2
  1682  0640  3000               	movlw	0
  1683  0641  00C2               	movwf	___ftmul@f1
  1684  0642  307F               	movlw	127
  1685  0643  00C3               	movwf	___ftmul@f1+1
  1686  0644  3043               	movlw	67
  1687  0645  00C4               	movwf	___ftmul@f1+2
  1688  0646  120A  158A  233E  120A  118A  	fcall	___ftmul
  1689  064B  1283               	bcf	3,5	;RP0=0, select bank0
  1690  064C  1303               	bcf	3,6	;RP1=0, select bank0
  1691  064D  0842               	movf	?___ftmul,w
  1692  064E  00D5               	movwf	___ftdiv@f1
  1693  064F  0843               	movf	?___ftmul+1,w
  1694  0650  00D6               	movwf	___ftdiv@f1+1
  1695  0651  0844               	movf	?___ftmul+2,w
  1696  0652  00D7               	movwf	___ftdiv@f1+2
  1697  0653  3025               	movlw	37
  1698  0654  00D2               	movwf	___ftdiv@f2
  1699  0655  3002               	movlw	2
  1700  0656  00D3               	movwf	___ftdiv@f2+1
  1701  0657  30C1               	movlw	193
  1702  0658  00D4               	movwf	___ftdiv@f2+2
  1703  0659  120A  158A  21C4  120A  118A  	fcall	___ftdiv
  1704  065E  1283               	bcf	3,5	;RP0=0, select bank0
  1705  065F  1303               	bcf	3,6	;RP1=0, select bank0
  1706  0660  0852               	movf	?___ftdiv,w
  1707  0661  1683               	bsf	3,5	;RP0=1, select bank1
  1708  0662  1303               	bcf	3,6	;RP1=0, select bank1
  1709  0663  00D5               	movwf	_main$1005^(0+128)
  1710  0664  1283               	bcf	3,5	;RP0=0, select bank0
  1711  0665  1303               	bcf	3,6	;RP1=0, select bank0
  1712  0666  0853               	movf	?___ftdiv+1,w
  1713  0667  1683               	bsf	3,5	;RP0=1, select bank1
  1714  0668  1303               	bcf	3,6	;RP1=0, select bank1
  1715  0669  00D6               	movwf	(_main$1005+1)^(0+128)
  1716  066A  1283               	bcf	3,5	;RP0=0, select bank0
  1717  066B  1303               	bcf	3,6	;RP1=0, select bank0
  1718  066C  0854               	movf	?___ftdiv+2,w
  1719  066D  1683               	bsf	3,5	;RP0=1, select bank1
  1720  066E  1303               	bcf	3,6	;RP1=0, select bank1
  1721  066F  00D7               	movwf	(_main$1005+2)^(0+128)
  1722                           
  1723                           ;main.c: 336: timerPrueba=round(((ms-8.22)*255)/(0.086-8.22));
  1724  0670  0855               	movf	_main$1005^(0+128),w
  1725  0671  00AE               	movwf	round@x^(0+128)
  1726  0672  0856               	movf	(_main$1005+1)^(0+128),w
  1727  0673  00AF               	movwf	(round@x+1)^(0+128)
  1728  0674  0857               	movf	(_main$1005+2)^(0+128),w
  1729  0675  00B0               	movwf	(round@x+2)^(0+128)
  1730  0676  120A  158A  2124  120A  118A  	fcall	_round
  1731  067B  1683               	bsf	3,5	;RP0=1, select bank1
  1732  067C  1303               	bcf	3,6	;RP1=0, select bank1
  1733  067D  082E               	movf	?_round^(0+128),w
  1734  067E  00D8               	movwf	_main$1006^(0+128)
  1735  067F  082F               	movf	(?_round+1)^(0+128),w
  1736  0680  00D9               	movwf	(_main$1006+1)^(0+128)
  1737  0681  0830               	movf	(?_round+2)^(0+128),w
  1738  0682  00DA               	movwf	(_main$1006+2)^(0+128)
  1739                           
  1740                           ;main.c: 336: timerPrueba=round(((ms-8.22)*255)/(0.086-8.22));
  1741  0683  0858               	movf	_main$1006^(0+128),w
  1742  0684  1283               	bcf	3,5	;RP0=0, select bank0
  1743  0685  1303               	bcf	3,6	;RP1=0, select bank0
  1744  0686  00E2               	movwf	___fttol@f1
  1745  0687  1683               	bsf	3,5	;RP0=1, select bank1
  1746  0688  1303               	bcf	3,6	;RP1=0, select bank1
  1747  0689  0859               	movf	(_main$1006+1)^(0+128),w
  1748  068A  1283               	bcf	3,5	;RP0=0, select bank0
  1749  068B  1303               	bcf	3,6	;RP1=0, select bank0
  1750  068C  00E3               	movwf	___fttol@f1+1
  1751  068D  1683               	bsf	3,5	;RP0=1, select bank1
  1752  068E  1303               	bcf	3,6	;RP1=0, select bank1
  1753  068F  085A               	movf	(_main$1006+2)^(0+128),w
  1754  0690  1283               	bcf	3,5	;RP0=0, select bank0
  1755  0691  1303               	bcf	3,6	;RP1=0, select bank0
  1756  0692  00E4               	movwf	___fttol@f1+2
  1757  0693  120A  158A  227C  120A  118A  	fcall	___fttol
  1758  0698  1283               	bcf	3,5	;RP0=0, select bank0
  1759  0699  1303               	bcf	3,6	;RP1=0, select bank0
  1760  069A  0863               	movf	?___fttol+1,w
  1761  069B  1683               	bsf	3,5	;RP0=1, select bank1
  1762  069C  1303               	bcf	3,6	;RP1=0, select bank1
  1763  069D  00E9               	movwf	(_timerPrueba+1)^(0+128)
  1764  069E  1283               	bcf	3,5	;RP0=0, select bank0
  1765  069F  1303               	bcf	3,6	;RP1=0, select bank0
  1766  06A0  0862               	movf	?___fttol,w
  1767  06A1  1683               	bsf	3,5	;RP0=1, select bank1
  1768  06A2  1303               	bcf	3,6	;RP1=0, select bank1
  1769  06A3  00E8               	movwf	_timerPrueba^(0+128)
  1770  06A4                     l3492:	
  1771                           
  1772                           ;main.c: 337: }
  1773                           ;main.c: 338: if((timerPrueba<=253)&&(timerPrueba>=0))
  1774  06A4  0869               	movf	(_timerPrueba+1)^(0+128),w
  1775  06A5  3A80               	xorlw	128
  1776  06A6  00FF               	movwf	127
  1777  06A7  3080               	movlw	128
  1778  06A8  027F               	subwf	127,w
  1779  06A9  1D03               	skipz
  1780  06AA  2EAD               	goto	u4125
  1781  06AB  30FE               	movlw	254
  1782  06AC  0268               	subwf	_timerPrueba^(0+128),w
  1783  06AD                     u4125:	
  1784  06AD  1803               	skipnc
  1785  06AE  2ECF               	goto	l217
  1786  06AF  1683               	bsf	3,5	;RP0=1, select bank1
  1787  06B0  1303               	bcf	3,6	;RP1=0, select bank1
  1788  06B1  1BE9               	btfsc	(_timerPrueba+1)^(0+128),7
  1789  06B2  2ECF               	goto	l217
  1790                           
  1791                           ;main.c: 339: {
  1792                           ;main.c: 340: Lcd_Set_Cursor(2,1);
  1793  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  1794  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  1795  06B5  01A6               	clrf	Lcd_Set_Cursor@b
  1796  06B6  0AA6               	incf	Lcd_Set_Cursor@b,f
  1797  06B7  3002               	movlw	2
  1798  06B8  160A  118A  2622  120A  118A  	fcall	_Lcd_Set_Cursor
  1799                           
  1800                           ;main.c: 341: Lcd_Write_String("      ");
  1801  06BD  3071               	movlw	(low ((STR_24-__stringbase)| (0+32768)))& (0+255)
  1802  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  1803  06BF  1303               	bcf	3,6	;RP1=0, select bank0
  1804  06C0  00A7               	movwf	Lcd_Write_String@a
  1805  06C1  3080               	movlw	128
  1806  06C2  00A8               	movwf	Lcd_Write_String@a+1
  1807  06C3  160A  118A  255E  120A  118A  	fcall	_Lcd_Write_String
  1808                           
  1809                           ;main.c: 342: timer=timerPrueba;
  1810  06C8  1683               	bsf	3,5	;RP0=1, select bank1
  1811  06C9  1303               	bcf	3,6	;RP1=0, select bank1
  1812  06CA  0868               	movf	_timerPrueba^(0+128),w
  1813  06CB  00D1               	movwf	??_main^(0+128)
  1814  06CC  0851               	movf	??_main^(0+128),w
  1815  06CD  00FD               	movwf	_timer
  1816                           
  1817                           ;main.c: 343: }
  1818  06CE  2EE5               	goto	l3506
  1819  06CF                     l217:	
  1820                           
  1821                           ;main.c: 344: else
  1822                           ;main.c: 345: {
  1823                           ;main.c: 346: RD4=1;
  1824  06CF  1283               	bcf	3,5	;RP0=0, select bank0
  1825  06D0  1303               	bcf	3,6	;RP1=0, select bank0
  1826  06D1  1608               	bsf	8,4	;volatile
  1827                           
  1828                           ;main.c: 347: Lcd_Set_Cursor(2,1);
  1829  06D2  01A6               	clrf	Lcd_Set_Cursor@b
  1830  06D3  0AA6               	incf	Lcd_Set_Cursor@b,f
  1831  06D4  3002               	movlw	2
  1832  06D5  160A  118A  2622  120A  118A  	fcall	_Lcd_Set_Cursor
  1833                           
  1834                           ;main.c: 348: Lcd_Write_String("ERROR ");
  1835  06DA  3086               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  1836  06DB  1283               	bcf	3,5	;RP0=0, select bank0
  1837  06DC  1303               	bcf	3,6	;RP1=0, select bank0
  1838  06DD  00A7               	movwf	Lcd_Write_String@a
  1839  06DE  3080               	movlw	128
  1840  06DF  00A8               	movwf	Lcd_Write_String@a+1
  1841  06E0  160A  118A  255E  120A  118A  	fcall	_Lcd_Write_String
  1842  06E5                     l3506:	
  1843                           
  1844                           ;main.c: 349: }
  1845                           ;main.c: 350: Lcd_Set_Cursor(1,1);
  1846  06E5  1283               	bcf	3,5	;RP0=0, select bank0
  1847  06E6  1303               	bcf	3,6	;RP1=0, select bank0
  1848  06E7  01A6               	clrf	Lcd_Set_Cursor@b
  1849  06E8  0AA6               	incf	Lcd_Set_Cursor@b,f
  1850  06E9  3001               	movlw	1
  1851  06EA  160A  118A  2622  120A  118A  	fcall	_Lcd_Set_Cursor
  1852                           
  1853                           ;main.c: 351: Lcd_Write_String("Dosis:");
  1854  06EF  308D               	movlw	(low ((STR_26-__stringbase)| (0+32768)))& (0+255)
  1855  06F0  1283               	bcf	3,5	;RP0=0, select bank0
  1856  06F1  1303               	bcf	3,6	;RP1=0, select bank0
  1857  06F2  00A7               	movwf	Lcd_Write_String@a
  1858  06F3  3080               	movlw	128
  1859  06F4  00A8               	movwf	Lcd_Write_String@a+1
  1860  06F5  160A  118A  255E  120A  118A  	fcall	_Lcd_Write_String
  1861                           
  1862                           ;main.c: 352: Lcd_Set_Cursor(1,8);
  1863  06FA  3008               	movlw	8
  1864  06FB  1683               	bsf	3,5	;RP0=1, select bank1
  1865  06FC  1303               	bcf	3,6	;RP1=0, select bank1
  1866  06FD  00D1               	movwf	??_main^(0+128)
  1867  06FE  0851               	movf	??_main^(0+128),w
  1868  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  1869  0700  1303               	bcf	3,6	;RP1=0, select bank0
  1870  0701  00A6               	movwf	Lcd_Set_Cursor@b
  1871  0702  3001               	movlw	1
  1872  0703  160A  118A  2622  120A  118A  	fcall	_Lcd_Set_Cursor
  1873                           
  1874                           ;main.c: 353: floatToString(minuto);
  1875  0708  1683               	bsf	3,5	;RP0=1, select bank1
  1876  0709  1303               	bcf	3,6	;RP1=0, select bank1
  1877  070A  085E               	movf	_minuto^(0+128),w
  1878  070B  00B4               	movwf	floatToString@floatNum^(0+128)
  1879  070C  085F               	movf	(_minuto+1)^(0+128),w
  1880  070D  00B5               	movwf	(floatToString@floatNum+1)^(0+128)
  1881  070E  0860               	movf	(_minuto+2)^(0+128),w
  1882  070F  00B6               	movwf	(floatToString@floatNum+2)^(0+128)
  1883  0710  120A  158A  24E7  120A  118A  	fcall	_floatToString
  1884                           
  1885                           ;main.c: 354: Lcd_Write_String(s);
  1886  0715  3090               	movlw	(low (_s| (0+256)))& (0+255)
  1887  0716  1283               	bcf	3,5	;RP0=0, select bank0
  1888  0717  1303               	bcf	3,6	;RP1=0, select bank0
  1889  0718  00A7               	movwf	Lcd_Write_String@a
  1890  0719  3001               	movlw	1
  1891  071A  00A8               	movwf	Lcd_Write_String@a+1
  1892  071B  160A  118A  255E  120A  118A  	fcall	_Lcd_Write_String
  1893                           
  1894                           ;main.c: 355: Lcd_Write_String("min   ");
  1895  0720  307F               	movlw	(low ((STR_27-__stringbase)| (0+32768)))& (0+255)
  1896  0721  1283               	bcf	3,5	;RP0=0, select bank0
  1897  0722  1303               	bcf	3,6	;RP1=0, select bank0
  1898  0723  00A7               	movwf	Lcd_Write_String@a
  1899  0724  3080               	movlw	128
  1900  0725  00A8               	movwf	Lcd_Write_String@a+1
  1901  0726  160A  118A  255E  120A  118A  	fcall	_Lcd_Write_String
  1902                           
  1903                           ;main.c: 356: Lcd_Set_Cursor(2,8);
  1904  072B  3008               	movlw	8
  1905  072C  1683               	bsf	3,5	;RP0=1, select bank1
  1906  072D  1303               	bcf	3,6	;RP1=0, select bank1
  1907  072E  00D1               	movwf	??_main^(0+128)
  1908  072F  0851               	movf	??_main^(0+128),w
  1909  0730  1283               	bcf	3,5	;RP0=0, select bank0
  1910  0731  1303               	bcf	3,6	;RP1=0, select bank0
  1911  0732  00A6               	movwf	Lcd_Set_Cursor@b
  1912  0733  3002               	movlw	2
  1913  0734  160A  118A  2622  120A  118A  	fcall	_Lcd_Set_Cursor
  1914                           
  1915                           ;main.c: 357: floatToString(mL);
  1916  0739  1683               	bsf	3,5	;RP0=1, select bank1
  1917  073A  1303               	bcf	3,6	;RP1=0, select bank1
  1918  073B  085B               	movf	_mL^(0+128),w
  1919  073C  00B4               	movwf	floatToString@floatNum^(0+128)
  1920  073D  085C               	movf	(_mL+1)^(0+128),w
  1921  073E  00B5               	movwf	(floatToString@floatNum+1)^(0+128)
  1922  073F  085D               	movf	(_mL+2)^(0+128),w
  1923  0740  00B6               	movwf	(floatToString@floatNum+2)^(0+128)
  1924  0741  120A  158A  24E7  120A  118A  	fcall	_floatToString
  1925                           
  1926                           ;main.c: 358: Lcd_Write_String(s);
  1927  0746  3090               	movlw	(low (_s| (0+256)))& (0+255)
  1928  0747  1283               	bcf	3,5	;RP0=0, select bank0
  1929  0748  1303               	bcf	3,6	;RP1=0, select bank0
  1930  0749  00A7               	movwf	Lcd_Write_String@a
  1931  074A  3001               	movlw	1
  1932  074B  00A8               	movwf	Lcd_Write_String@a+1
  1933  074C  160A  118A  255E  120A  118A  	fcall	_Lcd_Write_String
  1934                           
  1935                           ;main.c: 359: Lcd_Write_String("mL    ");
  1936  0751  3078               	movlw	(low ((STR_28-__stringbase)| (0+32768)))& (0+255)
  1937  0752                     L1:	
  1938  0752  1283               	bcf	3,5	;RP0=0, select bank0
  1939  0753  1303               	bcf	3,6	;RP1=0, select bank0
  1940  0754  00A7               	movwf	Lcd_Write_String@a
  1941  0755  3080               	movlw	128
  1942  0756  00A8               	movwf	Lcd_Write_String@a+1
  1943  0757  160A  118A  255E  120A  118A  	fcall	_Lcd_Write_String
  1944  075C                     l3522:	
  1945                           
  1946                           ;main.c: 360: }
  1947                           ;main.c: 361: Navkey();
  1948  075C  160A  118A  2674  120A  118A  	fcall	_Navkey
  1949                           
  1950                           ;main.c: 362: if(tiempo>=minuto*915)
  1951  0761  1683               	bsf	3,5	;RP0=1, select bank1
  1952  0762  1303               	bcf	3,6	;RP1=0, select bank1
  1953  0763  0867               	movf	(_tiempo+1)^(0+128),w
  1954  0764  1283               	bcf	3,5	;RP0=0, select bank0
  1955  0765  1303               	bcf	3,6	;RP1=0, select bank0
  1956  0766  00AB               	movwf	___awtoft@c+1
  1957  0767  1683               	bsf	3,5	;RP0=1, select bank1
  1958  0768  1303               	bcf	3,6	;RP1=0, select bank1
  1959  0769  0866               	movf	_tiempo^(0+128),w
  1960  076A  1283               	bcf	3,5	;RP0=0, select bank0
  1961  076B  1303               	bcf	3,6	;RP1=0, select bank0
  1962  076C  00AA               	movwf	___awtoft@c
  1963  076D  160A  118A  23D8  120A  118A  	fcall	___awtoft
  1964  0772  1283               	bcf	3,5	;RP0=0, select bank0
  1965  0773  1303               	bcf	3,6	;RP1=0, select bank0
  1966  0774  082A               	movf	?___awtoft,w
  1967  0775  00D2               	movwf	___ftge@ff1
  1968  0776  082B               	movf	?___awtoft+1,w
  1969  0777  00D3               	movwf	___ftge@ff1+1
  1970  0778  082C               	movf	?___awtoft+2,w
  1971  0779  00D4               	movwf	___ftge@ff1+2
  1972  077A  1683               	bsf	3,5	;RP0=1, select bank1
  1973  077B  1303               	bcf	3,6	;RP1=0, select bank1
  1974  077C  085E               	movf	_minuto^(0+128),w
  1975  077D  1283               	bcf	3,5	;RP0=0, select bank0
  1976  077E  1303               	bcf	3,6	;RP1=0, select bank0
  1977  077F  00C5               	movwf	___ftmul@f2
  1978  0780  1683               	bsf	3,5	;RP0=1, select bank1
  1979  0781  1303               	bcf	3,6	;RP1=0, select bank1
  1980  0782  085F               	movf	(_minuto+1)^(0+128),w
  1981  0783  1283               	bcf	3,5	;RP0=0, select bank0
  1982  0784  1303               	bcf	3,6	;RP1=0, select bank0
  1983  0785  00C6               	movwf	___ftmul@f2+1
  1984  0786  1683               	bsf	3,5	;RP0=1, select bank1
  1985  0787  1303               	bcf	3,6	;RP1=0, select bank1
  1986  0788  0860               	movf	(_minuto+2)^(0+128),w
  1987  0789  1283               	bcf	3,5	;RP0=0, select bank0
  1988  078A  1303               	bcf	3,6	;RP1=0, select bank0
  1989  078B  00C7               	movwf	___ftmul@f2+2
  1990  078C  30C0               	movlw	192
  1991  078D  00C2               	movwf	___ftmul@f1
  1992  078E  3064               	movlw	100
  1993  078F  00C3               	movwf	___ftmul@f1+1
  1994  0790  3044               	movlw	68
  1995  0791  00C4               	movwf	___ftmul@f1+2
  1996  0792  120A  158A  233E  120A  118A  	fcall	___ftmul
  1997  0797  1283               	bcf	3,5	;RP0=0, select bank0
  1998  0798  1303               	bcf	3,6	;RP1=0, select bank0
  1999  0799  0842               	movf	?___ftmul,w
  2000  079A  00D5               	movwf	___ftge@ff2
  2001  079B  0843               	movf	?___ftmul+1,w
  2002  079C  00D6               	movwf	___ftge@ff2+1
  2003  079D  0844               	movf	?___ftmul+2,w
  2004  079E  00D7               	movwf	___ftge@ff2+2
  2005  079F  160A  118A  26CB  120A  118A  	fcall	___ftge
  2006  07A4  1C03               	btfss	3,0
  2007  07A5  2C52               	goto	l3408
  2008                           
  2009                           ;main.c: 363: {
  2010                           ;main.c: 364: tiempo=0;
  2011  07A6  1683               	bsf	3,5	;RP0=1, select bank1
  2012  07A7  1303               	bcf	3,6	;RP1=0, select bank1
  2013  07A8  01E6               	clrf	_tiempo^(0+128)
  2014  07A9  01E7               	clrf	(_tiempo+1)^(0+128)
  2015                           
  2016                           ;main.c: 365: RD4=1;
  2017  07AA  1283               	bcf	3,5	;RP0=0, select bank0
  2018  07AB  1303               	bcf	3,6	;RP1=0, select bank0
  2019  07AC  1608               	bsf	8,4	;volatile
  2020                           
  2021                           ;main.c: 366: T1CONbits.TMR1ON=0;
  2022  07AD  1010               	bcf	16,0	;volatile
  2023                           
  2024                           ;main.c: 367: INTCONbits.TMR0IE=0;
  2025  07AE  128B               	bcf	11,5	;volatile
  2026  07AF  2C52               	goto	l3408
  2027  07B0                     __end_of_main:	
  2028                           ;main.c: 368: }
  2029                           ;main.c: 369: }
  2030                           ;main.c: 370: return;
  2031                           
  2032                           
  2033                           	psect	text1
  2034  144B                     __ptext1:	
  2035 ;; *************** function _strlen *****************
  2036 ;; Defined at:
  2037 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  2038 ;; Parameters:    Size  Location     Type
  2039 ;;  s               1    wreg     PTR const unsigned char 
  2040 ;;		 -> num(4), 
  2041 ;; Auto vars:     Size  Location     Type
  2042 ;;  s               1    9[BANK0 ] PTR const unsigned char 
  2043 ;;		 -> num(4), 
  2044 ;;  cp              1    8[BANK0 ] PTR const unsigned char 
  2045 ;;		 -> num(4), 
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  2    2[BANK0 ] unsigned int 
  2048 ;; Registers used:
  2049 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2055 ;;      Params:         0       2       0       0       0
  2056 ;;      Locals:         0       2       0       0       0
  2057 ;;      Temps:          0       4       0       0       0
  2058 ;;      Totals:         0       8       0       0       0
  2059 ;;Total ram usage:        8 bytes
  2060 ;; Hardware stack levels used:    1
  2061 ;; Hardware stack levels required when called:    3
  2062 ;; This function calls:
  2063 ;;		Nothing
  2064 ;; This function is called by:
  2065 ;;		_main
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           
  2070                           ;psect for function _strlen
  2071  144B                     _strlen:	
  2072                           
  2073                           ;incstack = 0
  2074                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  2075                           ;strlen@s stored from wreg
  2076  144B  1283               	bcf	3,5	;RP0=0, select bank0
  2077  144C  1303               	bcf	3,6	;RP1=0, select bank0
  2078  144D  00A9               	movwf	strlen@s
  2079  144E  0829               	movf	strlen@s,w
  2080  144F  00A4               	movwf	??_strlen
  2081  1450  0824               	movf	??_strlen,w
  2082  1451  00A8               	movwf	strlen@cp
  2083  1452                     l2926:	
  2084  1452  0828               	movf	strlen@cp,w
  2085  1453  0084               	movwf	4
  2086  1454  1383               	bcf	3,7	;select IRP bank0
  2087  1455  0800               	movf	0,w
  2088  1456  1903               	btfsc	3,2
  2089  1457  2C5D               	goto	l2928
  2090  1458  3001               	movlw	1
  2091  1459  00A4               	movwf	??_strlen
  2092  145A  0824               	movf	??_strlen,w
  2093  145B  07A8               	addwf	strlen@cp,f
  2094  145C  2C52               	goto	l2926
  2095  145D                     l2928:	
  2096  145D  0829               	movf	strlen@s,w
  2097  145E  00A4               	movwf	??_strlen
  2098  145F  3000               	movlw	0
  2099  1460  00A5               	movwf	??_strlen+1
  2100  1461  09A4               	comf	??_strlen,f
  2101  1462  09A5               	comf	??_strlen+1,f
  2102  1463  0AA4               	incf	??_strlen,f
  2103  1464  1903               	skipnz
  2104  1465  0AA5               	incf	??_strlen+1,f
  2105  1466  0828               	movf	strlen@cp,w
  2106  1467  00A6               	movwf	??_strlen+2
  2107  1468  3000               	movlw	0
  2108  1469  00A7               	movwf	??_strlen+3
  2109  146A  0824               	movf	??_strlen,w
  2110  146B  0726               	addwf	??_strlen+2,w
  2111  146C  00A2               	movwf	?_strlen
  2112  146D  0825               	movf	??_strlen+1,w
  2113  146E  1803               	skipnc
  2114  146F  0A25               	incf	??_strlen+1,w
  2115  1470  0727               	addwf	??_strlen+3,w
  2116  1471  00A3               	movwf	?_strlen+1
  2117  1472  0008               	return
  2118  1473                     __end_of_strlen:	
  2119                           
  2120                           	psect	text2
  2121  0CE7                     __ptext2:	
  2122 ;; *************** function _floatToString *****************
  2123 ;; Defined at:
  2124 ;;		line 176 in file "main.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;  floatNum        3   20[BANK1 ] float 
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;  string         16   23[BANK1 ] unsigned char [16]
  2129 ;;  integer         2   47[BANK1 ] int 
  2130 ;;  decimal         2   45[BANK1 ] int 
  2131 ;; Return value:  Size  Location     Type
  2132 ;;                  1    wreg      void 
  2133 ;; Registers used:
  2134 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2135 ;; Tracked objects:
  2136 ;;		On entry : 0/0
  2137 ;;		On exit  : 0/0
  2138 ;;		Unchanged: 0/0
  2139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2140 ;;      Params:         0       0       3       0       0
  2141 ;;      Locals:         0       0      26       0       0
  2142 ;;      Temps:          0       1       0       0       0
  2143 ;;      Totals:         0       1      29       0       0
  2144 ;;Total ram usage:       30 bytes
  2145 ;; Hardware stack levels used:    1
  2146 ;; Hardware stack levels required when called:    7
  2147 ;; This function calls:
  2148 ;;		___awtoft
  2149 ;;		___ftadd
  2150 ;;		___ftmul
  2151 ;;		___ftneg
  2152 ;;		___fttol
  2153 ;;		_round
  2154 ;;		_sprintf
  2155 ;;		_strcpy
  2156 ;; This function is called by:
  2157 ;;		_main
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161                           
  2162                           ;psect for function _floatToString
  2163  0CE7                     _floatToString:	
  2164                           
  2165                           ;main.c: 178: int integer;
  2166                           ;main.c: 179: int decimal;
  2167                           ;main.c: 180: char string[16];
  2168                           ;main.c: 181: integer=(int)floatNum;
  2169                           
  2170                           ;incstack = 0
  2171                           ; Regs used in _floatToString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2172  0CE7  1683               	bsf	3,5	;RP0=1, select bank1
  2173  0CE8  1303               	bcf	3,6	;RP1=0, select bank1
  2174  0CE9  0834               	movf	floatToString@floatNum^(0+128),w
  2175  0CEA  1283               	bcf	3,5	;RP0=0, select bank0
  2176  0CEB  1303               	bcf	3,6	;RP1=0, select bank0
  2177  0CEC  00E2               	movwf	___fttol@f1
  2178  0CED  1683               	bsf	3,5	;RP0=1, select bank1
  2179  0CEE  1303               	bcf	3,6	;RP1=0, select bank1
  2180  0CEF  0835               	movf	(floatToString@floatNum+1)^(0+128),w
  2181  0CF0  1283               	bcf	3,5	;RP0=0, select bank0
  2182  0CF1  1303               	bcf	3,6	;RP1=0, select bank0
  2183  0CF2  00E3               	movwf	___fttol@f1+1
  2184  0CF3  1683               	bsf	3,5	;RP0=1, select bank1
  2185  0CF4  1303               	bcf	3,6	;RP1=0, select bank1
  2186  0CF5  0836               	movf	(floatToString@floatNum+2)^(0+128),w
  2187  0CF6  1283               	bcf	3,5	;RP0=0, select bank0
  2188  0CF7  1303               	bcf	3,6	;RP1=0, select bank0
  2189  0CF8  00E4               	movwf	___fttol@f1+2
  2190  0CF9  120A  158A  227C  120A  158A  	fcall	___fttol
  2191  0CFE  1283               	bcf	3,5	;RP0=0, select bank0
  2192  0CFF  1303               	bcf	3,6	;RP1=0, select bank0
  2193  0D00  0863               	movf	?___fttol+1,w
  2194  0D01  1683               	bsf	3,5	;RP0=1, select bank1
  2195  0D02  1303               	bcf	3,6	;RP1=0, select bank1
  2196  0D03  00D0               	movwf	(floatToString@integer+1)^(0+128)
  2197  0D04  1283               	bcf	3,5	;RP0=0, select bank0
  2198  0D05  1303               	bcf	3,6	;RP1=0, select bank0
  2199  0D06  0862               	movf	?___fttol,w
  2200  0D07  1683               	bsf	3,5	;RP0=1, select bank1
  2201  0D08  1303               	bcf	3,6	;RP1=0, select bank1
  2202  0D09  00CF               	movwf	floatToString@integer^(0+128)
  2203                           
  2204                           ;main.c: 182: decimal=round((floatNum-integer)*100.0);
  2205  0D0A  0850               	movf	(floatToString@integer+1)^(0+128),w
  2206  0D0B  1283               	bcf	3,5	;RP0=0, select bank0
  2207  0D0C  1303               	bcf	3,6	;RP1=0, select bank0
  2208  0D0D  00AB               	movwf	___awtoft@c+1
  2209  0D0E  1683               	bsf	3,5	;RP0=1, select bank1
  2210  0D0F  1303               	bcf	3,6	;RP1=0, select bank1
  2211  0D10  084F               	movf	floatToString@integer^(0+128),w
  2212  0D11  1283               	bcf	3,5	;RP0=0, select bank0
  2213  0D12  1303               	bcf	3,6	;RP1=0, select bank0
  2214  0D13  00AA               	movwf	___awtoft@c
  2215  0D14  160A  118A  23D8  120A  158A  	fcall	___awtoft
  2216  0D19  1283               	bcf	3,5	;RP0=0, select bank0
  2217  0D1A  1303               	bcf	3,6	;RP1=0, select bank0
  2218  0D1B  082A               	movf	?___awtoft,w
  2219  0D1C  00B2               	movwf	___ftneg@f1
  2220  0D1D  082B               	movf	?___awtoft+1,w
  2221  0D1E  00B3               	movwf	___ftneg@f1+1
  2222  0D1F  082C               	movf	?___awtoft+2,w
  2223  0D20  00B4               	movwf	___ftneg@f1+2
  2224  0D21  160A  118A  231A  120A  158A  	fcall	___ftneg
  2225  0D26  1283               	bcf	3,5	;RP0=0, select bank0
  2226  0D27  1303               	bcf	3,6	;RP1=0, select bank0
  2227  0D28  0832               	movf	?___ftneg,w
  2228  0D29  00B8               	movwf	___ftadd@f2
  2229  0D2A  0833               	movf	?___ftneg+1,w
  2230  0D2B  00B9               	movwf	___ftadd@f2+1
  2231  0D2C  0834               	movf	?___ftneg+2,w
  2232  0D2D  00BA               	movwf	___ftadd@f2+2
  2233  0D2E  1683               	bsf	3,5	;RP0=1, select bank1
  2234  0D2F  1303               	bcf	3,6	;RP1=0, select bank1
  2235  0D30  0834               	movf	floatToString@floatNum^(0+128),w
  2236  0D31  1283               	bcf	3,5	;RP0=0, select bank0
  2237  0D32  1303               	bcf	3,6	;RP1=0, select bank0
  2238  0D33  00B5               	movwf	___ftadd@f1
  2239  0D34  1683               	bsf	3,5	;RP0=1, select bank1
  2240  0D35  1303               	bcf	3,6	;RP1=0, select bank1
  2241  0D36  0835               	movf	(floatToString@floatNum+1)^(0+128),w
  2242  0D37  1283               	bcf	3,5	;RP0=0, select bank0
  2243  0D38  1303               	bcf	3,6	;RP1=0, select bank0
  2244  0D39  00B6               	movwf	___ftadd@f1+1
  2245  0D3A  1683               	bsf	3,5	;RP0=1, select bank1
  2246  0D3B  1303               	bcf	3,6	;RP1=0, select bank1
  2247  0D3C  0836               	movf	(floatToString@floatNum+2)^(0+128),w
  2248  0D3D  1283               	bcf	3,5	;RP0=0, select bank0
  2249  0D3E  1303               	bcf	3,6	;RP1=0, select bank0
  2250  0D3F  00B7               	movwf	___ftadd@f1+2
  2251  0D40  120A  158A  25D0  120A  158A  	fcall	___ftadd
  2252  0D45  1283               	bcf	3,5	;RP0=0, select bank0
  2253  0D46  1303               	bcf	3,6	;RP1=0, select bank0
  2254  0D47  0835               	movf	?___ftadd,w
  2255  0D48  00C5               	movwf	___ftmul@f2
  2256  0D49  0836               	movf	?___ftadd+1,w
  2257  0D4A  00C6               	movwf	___ftmul@f2+1
  2258  0D4B  0837               	movf	?___ftadd+2,w
  2259  0D4C  00C7               	movwf	___ftmul@f2+2
  2260  0D4D  3000               	movlw	0
  2261  0D4E  00C2               	movwf	___ftmul@f1
  2262  0D4F  30C8               	movlw	200
  2263  0D50  00C3               	movwf	___ftmul@f1+1
  2264  0D51  3042               	movlw	66
  2265  0D52  00C4               	movwf	___ftmul@f1+2
  2266  0D53  120A  158A  233E  120A  158A  	fcall	___ftmul
  2267  0D58  1283               	bcf	3,5	;RP0=0, select bank0
  2268  0D59  1303               	bcf	3,6	;RP1=0, select bank0
  2269  0D5A  0842               	movf	?___ftmul,w
  2270  0D5B  1683               	bsf	3,5	;RP0=1, select bank1
  2271  0D5C  1303               	bcf	3,6	;RP1=0, select bank1
  2272  0D5D  00C7               	movwf	_floatToString$1002^(0+128)
  2273  0D5E  1283               	bcf	3,5	;RP0=0, select bank0
  2274  0D5F  1303               	bcf	3,6	;RP1=0, select bank0
  2275  0D60  0843               	movf	?___ftmul+1,w
  2276  0D61  1683               	bsf	3,5	;RP0=1, select bank1
  2277  0D62  1303               	bcf	3,6	;RP1=0, select bank1
  2278  0D63  00C8               	movwf	(_floatToString$1002+1)^(0+128)
  2279  0D64  1283               	bcf	3,5	;RP0=0, select bank0
  2280  0D65  1303               	bcf	3,6	;RP1=0, select bank0
  2281  0D66  0844               	movf	?___ftmul+2,w
  2282  0D67  1683               	bsf	3,5	;RP0=1, select bank1
  2283  0D68  1303               	bcf	3,6	;RP1=0, select bank1
  2284  0D69  00C9               	movwf	(_floatToString$1002+2)^(0+128)
  2285                           
  2286                           ;main.c: 182: decimal=round((floatNum-integer)*100.0);
  2287  0D6A  0847               	movf	_floatToString$1002^(0+128),w
  2288  0D6B  00AE               	movwf	round@x^(0+128)
  2289  0D6C  0848               	movf	(_floatToString$1002+1)^(0+128),w
  2290  0D6D  00AF               	movwf	(round@x+1)^(0+128)
  2291  0D6E  0849               	movf	(_floatToString$1002+2)^(0+128),w
  2292  0D6F  00B0               	movwf	(round@x+2)^(0+128)
  2293  0D70  120A  158A  2124  120A  158A  	fcall	_round
  2294  0D75  1683               	bsf	3,5	;RP0=1, select bank1
  2295  0D76  1303               	bcf	3,6	;RP1=0, select bank1
  2296  0D77  082E               	movf	?_round^(0+128),w
  2297  0D78  00CA               	movwf	_floatToString$1003^(0+128)
  2298  0D79  082F               	movf	(?_round+1)^(0+128),w
  2299  0D7A  00CB               	movwf	(_floatToString$1003+1)^(0+128)
  2300  0D7B  0830               	movf	(?_round+2)^(0+128),w
  2301  0D7C  00CC               	movwf	(_floatToString$1003+2)^(0+128)
  2302                           
  2303                           ;main.c: 182: decimal=round((floatNum-integer)*100.0);
  2304  0D7D  084A               	movf	_floatToString$1003^(0+128),w
  2305  0D7E  1283               	bcf	3,5	;RP0=0, select bank0
  2306  0D7F  1303               	bcf	3,6	;RP1=0, select bank0
  2307  0D80  00E2               	movwf	___fttol@f1
  2308  0D81  1683               	bsf	3,5	;RP0=1, select bank1
  2309  0D82  1303               	bcf	3,6	;RP1=0, select bank1
  2310  0D83  084B               	movf	(_floatToString$1003+1)^(0+128),w
  2311  0D84  1283               	bcf	3,5	;RP0=0, select bank0
  2312  0D85  1303               	bcf	3,6	;RP1=0, select bank0
  2313  0D86  00E3               	movwf	___fttol@f1+1
  2314  0D87  1683               	bsf	3,5	;RP0=1, select bank1
  2315  0D88  1303               	bcf	3,6	;RP1=0, select bank1
  2316  0D89  084C               	movf	(_floatToString$1003+2)^(0+128),w
  2317  0D8A  1283               	bcf	3,5	;RP0=0, select bank0
  2318  0D8B  1303               	bcf	3,6	;RP1=0, select bank0
  2319  0D8C  00E4               	movwf	___fttol@f1+2
  2320  0D8D  120A  158A  227C  120A  158A  	fcall	___fttol
  2321  0D92  1283               	bcf	3,5	;RP0=0, select bank0
  2322  0D93  1303               	bcf	3,6	;RP1=0, select bank0
  2323  0D94  0863               	movf	?___fttol+1,w
  2324  0D95  1683               	bsf	3,5	;RP0=1, select bank1
  2325  0D96  1303               	bcf	3,6	;RP1=0, select bank1
  2326  0D97  00CE               	movwf	(floatToString@decimal+1)^(0+128)
  2327  0D98  1283               	bcf	3,5	;RP0=0, select bank0
  2328  0D99  1303               	bcf	3,6	;RP1=0, select bank0
  2329  0D9A  0862               	movf	?___fttol,w
  2330  0D9B  1683               	bsf	3,5	;RP0=1, select bank1
  2331  0D9C  1303               	bcf	3,6	;RP1=0, select bank1
  2332  0D9D  00CD               	movwf	floatToString@decimal^(0+128)
  2333                           
  2334                           ;main.c: 183: sprintf(string,"%d.%d",integer,decimal);
  2335  0D9E  3094               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2336  0D9F  1283               	bcf	3,5	;RP0=0, select bank0
  2337  0DA0  1303               	bcf	3,6	;RP1=0, select bank0
  2338  0DA1  00EB               	movwf	??_floatToString
  2339  0DA2  086B               	movf	??_floatToString,w
  2340  0DA3  00B0               	movwf	sprintf@f
  2341  0DA4  1683               	bsf	3,5	;RP0=1, select bank1
  2342  0DA5  1303               	bcf	3,6	;RP1=0, select bank1
  2343  0DA6  0850               	movf	(floatToString@integer+1)^(0+128),w
  2344  0DA7  1283               	bcf	3,5	;RP0=0, select bank0
  2345  0DA8  1303               	bcf	3,6	;RP1=0, select bank0
  2346  0DA9  00B2               	movwf	?_sprintf+2
  2347  0DAA  1683               	bsf	3,5	;RP0=1, select bank1
  2348  0DAB  1303               	bcf	3,6	;RP1=0, select bank1
  2349  0DAC  084F               	movf	floatToString@integer^(0+128),w
  2350  0DAD  1283               	bcf	3,5	;RP0=0, select bank0
  2351  0DAE  1303               	bcf	3,6	;RP1=0, select bank0
  2352  0DAF  00B1               	movwf	?_sprintf+1
  2353  0DB0  1683               	bsf	3,5	;RP0=1, select bank1
  2354  0DB1  1303               	bcf	3,6	;RP1=0, select bank1
  2355  0DB2  084E               	movf	(floatToString@decimal+1)^(0+128),w
  2356  0DB3  1283               	bcf	3,5	;RP0=0, select bank0
  2357  0DB4  1303               	bcf	3,6	;RP1=0, select bank0
  2358  0DB5  00B4               	movwf	?_sprintf+4
  2359  0DB6  1683               	bsf	3,5	;RP0=1, select bank1
  2360  0DB7  1303               	bcf	3,6	;RP1=0, select bank1
  2361  0DB8  084D               	movf	floatToString@decimal^(0+128),w
  2362  0DB9  1283               	bcf	3,5	;RP0=0, select bank0
  2363  0DBA  1303               	bcf	3,6	;RP1=0, select bank0
  2364  0DBB  00B3               	movwf	?_sprintf+3
  2365  0DBC  30B7               	movlw	(low (floatToString@string| 0))& (0+255)
  2366  0DBD  120A  158A  2411  120A  158A  	fcall	_sprintf
  2367                           
  2368                           ;main.c: 184: strcpy(s,string);
  2369  0DC2  3090               	movlw	(low (_s| (0+256)))& (0+255)
  2370  0DC3  1283               	bcf	3,5	;RP0=0, select bank0
  2371  0DC4  1303               	bcf	3,6	;RP1=0, select bank0
  2372  0DC5  00A2               	movwf	strcpy@to
  2373  0DC6  3001               	movlw	1
  2374  0DC7  00A3               	movwf	strcpy@to+1
  2375  0DC8  30B7               	movlw	(low (floatToString@string| 0))& (0+255)
  2376  0DC9  00A4               	movwf	strcpy@from
  2377  0DCA  3000               	movlw	0
  2378  0DCB  00A5               	movwf	strcpy@from+1
  2379  0DCC  160A  118A  23B5   	fcall	_strcpy
  2380  0DCF  0008               	return
  2381  0DD0                     __end_of_floatToString:	
  2382                           
  2383                           	psect	text3
  2384  0C11                     __ptext3:	
  2385 ;; *************** function _sprintf *****************
  2386 ;; Defined at:
  2387 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;  sp              1    wreg     PTR unsigned char 
  2390 ;;		 -> floatToString@string(16), 
  2391 ;;  f               1   16[BANK0 ] PTR const unsigned char 
  2392 ;;		 -> STR_12(6), 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;  sp              1   29[BANK0 ] PTR unsigned char 
  2395 ;;		 -> floatToString@string(16), 
  2396 ;;  tmpval          4    0        struct .
  2397 ;;  val             2   27[BANK0 ] unsigned int 
  2398 ;;  cp              2    0        PTR const unsigned char 
  2399 ;;  len             2    0        unsigned int 
  2400 ;;  c               1   30[BANK0 ] char 
  2401 ;;  prec            1   26[BANK0 ] char 
  2402 ;;  flag            1   25[BANK0 ] unsigned char 
  2403 ;;  ap              1   24[BANK0 ] PTR void [1]
  2404 ;;		 -> ?_sprintf(2), 
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  2   16[BANK0 ] int 
  2407 ;; Registers used:
  2408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2414 ;;      Params:         0       5       0       0       0
  2415 ;;      Locals:         0       7       0       0       0
  2416 ;;      Temps:          0       3       0       0       0
  2417 ;;      Totals:         0      15       0       0       0
  2418 ;;Total ram usage:       15 bytes
  2419 ;; Hardware stack levels used:    1
  2420 ;; Hardware stack levels required when called:    4
  2421 ;; This function calls:
  2422 ;;		___lwdiv
  2423 ;;		___lwmod
  2424 ;; This function is called by:
  2425 ;;		_floatToString
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           
  2430                           ;psect for function _sprintf
  2431  0C11                     _sprintf:	
  2432                           
  2433                           ;incstack = 0
  2434                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2435                           ;sprintf@sp stored from wreg
  2436  0C11  1283               	bcf	3,5	;RP0=0, select bank0
  2437  0C12  1303               	bcf	3,6	;RP1=0, select bank0
  2438  0C13  00BD               	movwf	sprintf@sp
  2439                           
  2440                           ;doprnt.c: 494: va_list ap;
  2441                           ;doprnt.c: 499: signed char c;
  2442                           ;doprnt.c: 506: signed char prec;
  2443                           ;doprnt.c: 508: unsigned char flag;
  2444                           ;doprnt.c: 523: union {
  2445                           ;doprnt.c: 524: unsigned long vd;
  2446                           ;doprnt.c: 525: double integ;
  2447                           ;doprnt.c: 526: } tmpval;
  2448                           ;doprnt.c: 528: unsigned int val;
  2449                           ;doprnt.c: 529: unsigned len;
  2450                           ;doprnt.c: 530: const char * cp;
  2451                           ;doprnt.c: 533: *ap = __va_start();
  2452  0C14  3031               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2453  0C15  00B5               	movwf	??_sprintf
  2454  0C16  0835               	movf	??_sprintf,w
  2455  0C17  00B8               	movwf	sprintf@ap
  2456  0C18                     l2688:	
  2457                           ;doprnt.c: 536: while(c = *f++) {
  2458                           
  2459  0C18  3001               	movlw	1
  2460  0C19  07B0               	addwf	sprintf@f,f
  2461  0C1A  30FF               	movlw	-1
  2462  0C1B  0730               	addwf	sprintf@f,w
  2463  0C1C  0084               	movwf	4
  2464  0C1D  120A  158A  200A  120A  158A  	fcall	stringdir
  2465  0C22  00B5               	movwf	??_sprintf
  2466  0C23  0835               	movf	??_sprintf,w
  2467  0C24  00BE               	movwf	sprintf@c
  2468  0C25  083E               	movf	sprintf@c,w
  2469  0C26  1903               	btfsc	3,2
  2470  0C27  2CE2               	goto	l2690
  2471                           
  2472                           ;doprnt.c: 538: if(c != '%')
  2473  0C28  3025               	movlw	37
  2474  0C29  063E               	xorwf	sprintf@c,w
  2475  0C2A  1903               	btfsc	3,2
  2476  0C2B  2C38               	goto	l2644
  2477                           
  2478                           ;doprnt.c: 540: {
  2479                           ;doprnt.c: 541: ((*sp++ = (c)));
  2480  0C2C  083E               	movf	sprintf@c,w
  2481  0C2D  00B5               	movwf	??_sprintf
  2482  0C2E  083D               	movf	sprintf@sp,w
  2483  0C2F  0084               	movwf	4
  2484  0C30  0835               	movf	??_sprintf,w
  2485  0C31  1383               	bcf	3,7	;select IRP bank0
  2486  0C32  0080               	movwf	0
  2487  0C33  3001               	movlw	1
  2488  0C34  00B5               	movwf	??_sprintf
  2489  0C35  0835               	movf	??_sprintf,w
  2490  0C36  07BD               	addwf	sprintf@sp,f
  2491                           
  2492                           ;doprnt.c: 542: continue;
  2493  0C37  2C18               	goto	l2688
  2494  0C38                     l2644:	
  2495                           
  2496                           ;doprnt.c: 543: }
  2497                           ;doprnt.c: 548: flag = 0;
  2498  0C38  01B9               	clrf	sprintf@flag
  2499                           
  2500                           ;doprnt.c: 822: }
  2501                           
  2502                           ;doprnt.c: 813: continue;
  2503                           
  2504                           ;doprnt.c: 802: default:
  2505                           
  2506                           ;doprnt.c: 698: case 'i':
  2507                           ;doprnt.c: 699: break;
  2508                           
  2509                           ;doprnt.c: 697: case 'd':
  2510                           
  2511                           ;doprnt.c: 638: goto alldone;
  2512                           
  2513                           ;doprnt.c: 637: case 0:
  2514                           
  2515                           ;doprnt.c: 635: switch(c = *f++) {
  2516  0C39  3001               	movlw	1
  2517  0C3A  07B0               	addwf	sprintf@f,f
  2518  0C3B  30FF               	movlw	-1
  2519  0C3C  0730               	addwf	sprintf@f,w
  2520  0C3D  0084               	movwf	4
  2521  0C3E  120A  158A  200A  120A  158A  	fcall	stringdir
  2522  0C43  00BE               	movwf	sprintf@c
  2523                           
  2524                           ; Switch size 1, requested type "space"
  2525                           ; Number of cases is 3, Range of values is 0 to 105
  2526                           ; switch strategies available:
  2527                           ; Name         Instructions Cycles
  2528                           ; simple_byte           10     6 (average)
  2529                           ; jumptable            260     6 (fixed)
  2530                           ;	Chosen strategy is simple_byte
  2531  0C44  3A00               	xorlw	0	; case 0
  2532  0C45  1903               	skipnz
  2533  0C46  2CE2               	goto	l2690
  2534  0C47  3A64               	xorlw	100	; case 100
  2535  0C48  1903               	skipnz
  2536  0C49  2C4E               	goto	l2650
  2537  0C4A  3A0D               	xorlw	13	; case 105
  2538  0C4B  1903               	skipnz
  2539  0C4C  2C4E               	goto	l2650
  2540  0C4D  2C18               	goto	l2688
  2541  0C4E                     l2650:	
  2542                           
  2543                           ;doprnt.c: 1253: {
  2544                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2545  0C4E  0838               	movf	sprintf@ap,w
  2546  0C4F  0084               	movwf	4
  2547  0C50  1383               	bcf	3,7	;select IRP bank0
  2548  0C51  0800               	movf	0,w
  2549  0C52  00BB               	movwf	sprintf@val
  2550  0C53  0A84               	incf	4,f
  2551  0C54  0800               	movf	0,w
  2552  0C55  00BC               	movwf	sprintf@val+1
  2553  0C56  3002               	movlw	2
  2554  0C57  00B5               	movwf	??_sprintf
  2555  0C58  0835               	movf	??_sprintf,w
  2556  0C59  07B8               	addwf	sprintf@ap,f
  2557                           
  2558                           ;doprnt.c: 1261: if((int)val < 0) {
  2559  0C5A  1FBC               	btfss	sprintf@val+1,7
  2560  0C5B  2C65               	goto	l2660
  2561                           
  2562                           ;doprnt.c: 1262: flag |= 0x03;
  2563  0C5C  3003               	movlw	3
  2564  0C5D  00B5               	movwf	??_sprintf
  2565  0C5E  0835               	movf	??_sprintf,w
  2566  0C5F  04B9               	iorwf	sprintf@flag,f
  2567                           
  2568                           ;doprnt.c: 1263: val = -val;
  2569  0C60  09BB               	comf	sprintf@val,f
  2570  0C61  09BC               	comf	sprintf@val+1,f
  2571  0C62  0ABB               	incf	sprintf@val,f
  2572  0C63  1903               	skipnz
  2573  0C64  0ABC               	incf	sprintf@val+1,f
  2574  0C65                     l2660:	
  2575                           
  2576                           ;doprnt.c: 1264: }
  2577                           ;doprnt.c: 1266: }
  2578                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2579  0C65  01BE               	clrf	sprintf@c
  2580  0C66  0ABE               	incf	sprintf@c,f
  2581  0C67  3005               	movlw	5
  2582  0C68  063E               	xorwf	sprintf@c,w
  2583  0C69  1903               	btfsc	3,2
  2584  0C6A  2C8C               	goto	l2672
  2585  0C6B                     l2666:	
  2586                           
  2587                           ;doprnt.c: 1306: if(val < dpowers[c])
  2588  0C6B  083E               	movf	sprintf@c,w
  2589  0C6C  00B5               	movwf	??_sprintf
  2590  0C6D  0735               	addwf	??_sprintf,w
  2591  0C6E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2592  0C6F  0084               	movwf	4
  2593  0C70  120A  158A  200A  120A  158A  	fcall	stringdir
  2594  0C75  00B6               	movwf	??_sprintf+1
  2595  0C76  120A  158A  200A  120A  158A  	fcall	stringdir
  2596  0C7B  00B7               	movwf	??_sprintf+2
  2597  0C7C  0837               	movf	??_sprintf+2,w
  2598  0C7D  023C               	subwf	sprintf@val+1,w
  2599  0C7E  1D03               	skipz
  2600  0C7F  2C82               	goto	u3185
  2601  0C80  0836               	movf	??_sprintf+1,w
  2602  0C81  023B               	subwf	sprintf@val,w
  2603  0C82                     u3185:	
  2604  0C82  1C03               	btfss	3,0
  2605  0C83  2C8C               	goto	l2672
  2606                           
  2607                           ;doprnt.c: 1307: break;
  2608  0C84  3001               	movlw	1
  2609  0C85  00B5               	movwf	??_sprintf
  2610  0C86  0835               	movf	??_sprintf,w
  2611  0C87  07BE               	addwf	sprintf@c,f
  2612  0C88  3005               	movlw	5
  2613  0C89  063E               	xorwf	sprintf@c,w
  2614  0C8A  1D03               	btfss	3,2
  2615  0C8B  2C6B               	goto	l2666
  2616  0C8C                     l2672:	
  2617                           
  2618                           ;doprnt.c: 1422: {
  2619                           ;doprnt.c: 1438: if(flag & 0x03)
  2620  0C8C  0839               	movf	sprintf@flag,w
  2621  0C8D  3903               	andlw	3
  2622  0C8E  1903               	btfsc	3,2
  2623  0C8F  2C9B               	goto	l2678
  2624                           
  2625                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2626  0C90  302D               	movlw	45
  2627  0C91  00B5               	movwf	??_sprintf
  2628  0C92  083D               	movf	sprintf@sp,w
  2629  0C93  0084               	movwf	4
  2630  0C94  0835               	movf	??_sprintf,w
  2631  0C95  1383               	bcf	3,7	;select IRP bank0
  2632  0C96  0080               	movwf	0
  2633  0C97  3001               	movlw	1
  2634  0C98  00B5               	movwf	??_sprintf
  2635  0C99  0835               	movf	??_sprintf,w
  2636  0C9A  07BD               	addwf	sprintf@sp,f
  2637  0C9B                     l2678:	
  2638                           
  2639                           ;doprnt.c: 1469: }
  2640                           ;doprnt.c: 1472: prec = c;
  2641  0C9B  083E               	movf	sprintf@c,w
  2642  0C9C  00B5               	movwf	??_sprintf
  2643  0C9D  0835               	movf	??_sprintf,w
  2644  0C9E  00BA               	movwf	sprintf@prec
  2645  0C9F                     l2686:	
  2646                           ;doprnt.c: 1474: while(prec--) {
  2647                           
  2648  0C9F  30FF               	movlw	255
  2649  0CA0  00B5               	movwf	??_sprintf
  2650  0CA1  0835               	movf	??_sprintf,w
  2651  0CA2  07BA               	addwf	sprintf@prec,f
  2652  0CA3  0A3A               	incf	sprintf@prec,w
  2653  0CA4  1903               	btfsc	3,2
  2654  0CA5  2C18               	goto	l2688
  2655                           
  2656                           ;doprnt.c: 1478: {
  2657                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2658  0CA6  300A               	movlw	10
  2659  0CA7  00AA               	movwf	___lwmod@divisor
  2660  0CA8  3000               	movlw	0
  2661  0CA9  00AB               	movwf	___lwmod@divisor+1
  2662  0CAA  083A               	movf	sprintf@prec,w
  2663  0CAB  00B5               	movwf	??_sprintf
  2664  0CAC  0735               	addwf	??_sprintf,w
  2665  0CAD  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2666  0CAE  0084               	movwf	4
  2667  0CAF  120A  158A  200A  120A  158A  	fcall	stringdir
  2668  0CB4  00A2               	movwf	___lwdiv@divisor
  2669  0CB5  120A  158A  200A  120A  158A  	fcall	stringdir
  2670  0CBA  00A3               	movwf	___lwdiv@divisor+1
  2671  0CBB  083C               	movf	sprintf@val+1,w
  2672  0CBC  00A5               	movwf	___lwdiv@dividend+1
  2673  0CBD  083B               	movf	sprintf@val,w
  2674  0CBE  00A4               	movwf	___lwdiv@dividend
  2675  0CBF  160A  118A  2520  120A  158A  	fcall	___lwdiv
  2676  0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  2677  0CC5  1303               	bcf	3,6	;RP1=0, select bank0
  2678  0CC6  0823               	movf	?___lwdiv+1,w
  2679  0CC7  00AD               	movwf	___lwmod@dividend+1
  2680  0CC8  0822               	movf	?___lwdiv,w
  2681  0CC9  00AC               	movwf	___lwmod@dividend
  2682  0CCA  160A  118A  2473  120A  158A  	fcall	___lwmod
  2683  0CCF  1283               	bcf	3,5	;RP0=0, select bank0
  2684  0CD0  1303               	bcf	3,6	;RP1=0, select bank0
  2685  0CD1  082A               	movf	?___lwmod,w
  2686  0CD2  3E30               	addlw	48
  2687  0CD3  00B6               	movwf	??_sprintf+1
  2688  0CD4  0836               	movf	??_sprintf+1,w
  2689  0CD5  00BE               	movwf	sprintf@c
  2690                           
  2691                           ;doprnt.c: 1523: }
  2692                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2693  0CD6  083E               	movf	sprintf@c,w
  2694  0CD7  00B5               	movwf	??_sprintf
  2695  0CD8  083D               	movf	sprintf@sp,w
  2696  0CD9  0084               	movwf	4
  2697  0CDA  0835               	movf	??_sprintf,w
  2698  0CDB  1383               	bcf	3,7	;select IRP bank0
  2699  0CDC  0080               	movwf	0
  2700  0CDD  3001               	movlw	1
  2701  0CDE  00B5               	movwf	??_sprintf
  2702  0CDF  0835               	movf	??_sprintf,w
  2703  0CE0  07BD               	addwf	sprintf@sp,f
  2704  0CE1  2C9F               	goto	l2686
  2705  0CE2                     l2690:	
  2706                           ;doprnt.c: 1525: }
  2707                           ;doprnt.c: 1533: }
  2708                           ;doprnt.c: 1535: alldone:
  2709                           
  2710                           
  2711                           ;doprnt.c: 1538: *sp = 0;
  2712  0CE2  083D               	movf	sprintf@sp,w
  2713  0CE3  0084               	movwf	4
  2714  0CE4  1383               	bcf	3,7	;select IRP bank0
  2715  0CE5  0180               	clrf	0
  2716  0CE6  0008               	return
  2717  0CE7                     __end_of_sprintf:	
  2718                           ;doprnt.c: 1540: return 0;
  2719                           ;	Return value of _sprintf is never used
  2720                           
  2721                           
  2722                           	psect	text4
  2723  1473                     __ptext4:	
  2724 ;; *************** function ___lwmod *****************
  2725 ;; Defined at:
  2726 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;  divisor         2   10[BANK0 ] unsigned int 
  2729 ;;  dividend        2   12[BANK0 ] unsigned int 
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;  counter         1   15[BANK0 ] unsigned char 
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  2   10[BANK0 ] unsigned int 
  2734 ;; Registers used:
  2735 ;;		wreg, status,2, status,0
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2741 ;;      Params:         0       4       0       0       0
  2742 ;;      Locals:         0       1       0       0       0
  2743 ;;      Temps:          0       1       0       0       0
  2744 ;;      Totals:         0       6       0       0       0
  2745 ;;Total ram usage:        6 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:    3
  2748 ;; This function calls:
  2749 ;;		Nothing
  2750 ;; This function is called by:
  2751 ;;		_sprintf
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           
  2756                           ;psect for function ___lwmod
  2757  1473                     ___lwmod:	
  2758                           
  2759                           ;incstack = 0
  2760                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2761  1473  1283               	bcf	3,5	;RP0=0, select bank0
  2762  1474  1303               	bcf	3,6	;RP1=0, select bank0
  2763  1475  082A               	movf	___lwmod@divisor,w
  2764  1476  042B               	iorwf	___lwmod@divisor+1,w
  2765  1477  1903               	btfsc	3,2
  2766  1478  2CA2               	goto	l2554
  2767  1479  01AF               	clrf	___lwmod@counter
  2768  147A  0AAF               	incf	___lwmod@counter,f
  2769  147B                     l2544:	
  2770  147B  1BAB               	btfsc	___lwmod@divisor+1,7
  2771  147C  2C89               	goto	l2546
  2772  147D  3001               	movlw	1
  2773  147E                     u3035:	
  2774  147E  1003               	clrc
  2775  147F  0DAA               	rlf	___lwmod@divisor,f
  2776  1480  0DAB               	rlf	___lwmod@divisor+1,f
  2777  1481  3EFF               	addlw	-1
  2778  1482  1D03               	skipz
  2779  1483  2C7E               	goto	u3035
  2780  1484  3001               	movlw	1
  2781  1485  00AE               	movwf	??___lwmod
  2782  1486  082E               	movf	??___lwmod,w
  2783  1487  07AF               	addwf	___lwmod@counter,f
  2784  1488  2C7B               	goto	l2544
  2785  1489                     l2546:	
  2786  1489  082B               	movf	___lwmod@divisor+1,w
  2787  148A  022D               	subwf	___lwmod@dividend+1,w
  2788  148B  1D03               	skipz
  2789  148C  2C8F               	goto	u3055
  2790  148D  082A               	movf	___lwmod@divisor,w
  2791  148E  022C               	subwf	___lwmod@dividend,w
  2792  148F                     u3055:	
  2793  148F  1C03               	skipc
  2794  1490  2C97               	goto	l2550
  2795  1491  082A               	movf	___lwmod@divisor,w
  2796  1492  02AC               	subwf	___lwmod@dividend,f
  2797  1493  082B               	movf	___lwmod@divisor+1,w
  2798  1494  1C03               	skipc
  2799  1495  03AD               	decf	___lwmod@dividend+1,f
  2800  1496  02AD               	subwf	___lwmod@dividend+1,f
  2801  1497                     l2550:	
  2802  1497  3001               	movlw	1
  2803  1498                     u3065:	
  2804  1498  1003               	clrc
  2805  1499  0CAB               	rrf	___lwmod@divisor+1,f
  2806  149A  0CAA               	rrf	___lwmod@divisor,f
  2807  149B  3EFF               	addlw	-1
  2808  149C  1D03               	skipz
  2809  149D  2C98               	goto	u3065
  2810  149E  3001               	movlw	1
  2811  149F  02AF               	subwf	___lwmod@counter,f
  2812  14A0  1D03               	btfss	3,2
  2813  14A1  2C89               	goto	l2546
  2814  14A2                     l2554:	
  2815  14A2  082D               	movf	___lwmod@dividend+1,w
  2816  14A3  00AB               	movwf	?___lwmod+1
  2817  14A4  082C               	movf	___lwmod@dividend,w
  2818  14A5  00AA               	movwf	?___lwmod
  2819  14A6  0008               	return
  2820  14A7                     __end_of___lwmod:	
  2821                           
  2822                           	psect	text5
  2823  1520                     __ptext5:	
  2824 ;; *************** function ___lwdiv *****************
  2825 ;; Defined at:
  2826 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;  divisor         2    2[BANK0 ] unsigned int 
  2829 ;;  dividend        2    4[BANK0 ] unsigned int 
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;  quotient        2    7[BANK0 ] unsigned int 
  2832 ;;  counter         1    9[BANK0 ] unsigned char 
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  2    2[BANK0 ] unsigned int 
  2835 ;; Registers used:
  2836 ;;		wreg, status,2, status,0
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2842 ;;      Params:         0       4       0       0       0
  2843 ;;      Locals:         0       3       0       0       0
  2844 ;;      Temps:          0       1       0       0       0
  2845 ;;      Totals:         0       8       0       0       0
  2846 ;;Total ram usage:        8 bytes
  2847 ;; Hardware stack levels used:    1
  2848 ;; Hardware stack levels required when called:    3
  2849 ;; This function calls:
  2850 ;;		Nothing
  2851 ;; This function is called by:
  2852 ;;		_sprintf
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           
  2857                           ;psect for function ___lwdiv
  2858  1520                     ___lwdiv:	
  2859                           
  2860                           ;incstack = 0
  2861                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2862  1520  1283               	bcf	3,5	;RP0=0, select bank0
  2863  1521  1303               	bcf	3,6	;RP1=0, select bank0
  2864  1522  01A7               	clrf	___lwdiv@quotient
  2865  1523  01A8               	clrf	___lwdiv@quotient+1
  2866  1524  0822               	movf	___lwdiv@divisor,w
  2867  1525  0423               	iorwf	___lwdiv@divisor+1,w
  2868  1526  1903               	btfsc	3,2
  2869  1527  2D59               	goto	l2532
  2870  1528  01A9               	clrf	___lwdiv@counter
  2871  1529  0AA9               	incf	___lwdiv@counter,f
  2872  152A                     l2520:	
  2873  152A  1BA3               	btfsc	___lwdiv@divisor+1,7
  2874  152B  2D38               	goto	l2522
  2875  152C  3001               	movlw	1
  2876  152D                     u2965:	
  2877  152D  1003               	clrc
  2878  152E  0DA2               	rlf	___lwdiv@divisor,f
  2879  152F  0DA3               	rlf	___lwdiv@divisor+1,f
  2880  1530  3EFF               	addlw	-1
  2881  1531  1D03               	skipz
  2882  1532  2D2D               	goto	u2965
  2883  1533  3001               	movlw	1
  2884  1534  00A6               	movwf	??___lwdiv
  2885  1535  0826               	movf	??___lwdiv,w
  2886  1536  07A9               	addwf	___lwdiv@counter,f
  2887  1537  2D2A               	goto	l2520
  2888  1538                     l2522:	
  2889  1538  3001               	movlw	1
  2890  1539                     u2985:	
  2891  1539  1003               	clrc
  2892  153A  0DA7               	rlf	___lwdiv@quotient,f
  2893  153B  0DA8               	rlf	___lwdiv@quotient+1,f
  2894  153C  3EFF               	addlw	-1
  2895  153D  1D03               	skipz
  2896  153E  2D39               	goto	u2985
  2897  153F  0823               	movf	___lwdiv@divisor+1,w
  2898  1540  0225               	subwf	___lwdiv@dividend+1,w
  2899  1541  1D03               	skipz
  2900  1542  2D45               	goto	u2995
  2901  1543  0822               	movf	___lwdiv@divisor,w
  2902  1544  0224               	subwf	___lwdiv@dividend,w
  2903  1545                     u2995:	
  2904  1545  1C03               	skipc
  2905  1546  2D4E               	goto	l2528
  2906  1547  0822               	movf	___lwdiv@divisor,w
  2907  1548  02A4               	subwf	___lwdiv@dividend,f
  2908  1549  0823               	movf	___lwdiv@divisor+1,w
  2909  154A  1C03               	skipc
  2910  154B  03A5               	decf	___lwdiv@dividend+1,f
  2911  154C  02A5               	subwf	___lwdiv@dividend+1,f
  2912  154D  1427               	bsf	___lwdiv@quotient,0
  2913  154E                     l2528:	
  2914  154E  3001               	movlw	1
  2915  154F                     u3005:	
  2916  154F  1003               	clrc
  2917  1550  0CA3               	rrf	___lwdiv@divisor+1,f
  2918  1551  0CA2               	rrf	___lwdiv@divisor,f
  2919  1552  3EFF               	addlw	-1
  2920  1553  1D03               	skipz
  2921  1554  2D4F               	goto	u3005
  2922  1555  3001               	movlw	1
  2923  1556  02A9               	subwf	___lwdiv@counter,f
  2924  1557  1D03               	btfss	3,2
  2925  1558  2D38               	goto	l2522
  2926  1559                     l2532:	
  2927  1559  0828               	movf	___lwdiv@quotient+1,w
  2928  155A  00A3               	movwf	?___lwdiv+1
  2929  155B  0827               	movf	___lwdiv@quotient,w
  2930  155C  00A2               	movwf	?___lwdiv
  2931  155D  0008               	return
  2932  155E                     __end_of___lwdiv:	
  2933                           
  2934                           	psect	text6
  2935  0924                     __ptext6:	
  2936 ;; *************** function _round *****************
  2937 ;; Defined at:
  2938 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\round.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  x               3   14[BANK1 ] unsigned int 
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;  f               3   17[BANK1 ] unsigned int 
  2943 ;; Return value:  Size  Location     Type
  2944 ;;                  3   14[BANK1 ] unsigned int 
  2945 ;; Registers used:
  2946 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2947 ;; Tracked objects:
  2948 ;;		On entry : 0/0
  2949 ;;		On exit  : 0/0
  2950 ;;		Unchanged: 0/0
  2951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2952 ;;      Params:         0       0       3       0       0
  2953 ;;      Locals:         0       0       3       0       0
  2954 ;;      Temps:          0       0       0       0       0
  2955 ;;      Totals:         0       0       6       0       0
  2956 ;;Total ram usage:        6 bytes
  2957 ;; Hardware stack levels used:    1
  2958 ;; Hardware stack levels required when called:    6
  2959 ;; This function calls:
  2960 ;;		___ftadd
  2961 ;;		___ftneg
  2962 ;;		_trunc
  2963 ;; This function is called by:
  2964 ;;		_floatToString
  2965 ;;		_main
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           
  2970                           ;psect for function _round
  2971  0924                     _round:	
  2972                           
  2973                           ;incstack = 0
  2974                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2975  0924  1683               	bsf	3,5	;RP0=1, select bank1
  2976  0925  1303               	bcf	3,6	;RP1=0, select bank1
  2977  0926  082E               	movf	round@x^(0+128),w
  2978  0927  1283               	bcf	3,5	;RP0=0, select bank0
  2979  0928  1303               	bcf	3,6	;RP1=0, select bank0
  2980  0929  00B5               	movwf	___ftadd@f1
  2981  092A  1683               	bsf	3,5	;RP0=1, select bank1
  2982  092B  1303               	bcf	3,6	;RP1=0, select bank1
  2983  092C  082F               	movf	(round@x+1)^(0+128),w
  2984  092D  1283               	bcf	3,5	;RP0=0, select bank0
  2985  092E  1303               	bcf	3,6	;RP1=0, select bank0
  2986  092F  00B6               	movwf	___ftadd@f1+1
  2987  0930  1683               	bsf	3,5	;RP0=1, select bank1
  2988  0931  1303               	bcf	3,6	;RP1=0, select bank1
  2989  0932  0830               	movf	(round@x+2)^(0+128),w
  2990  0933  1283               	bcf	3,5	;RP0=0, select bank0
  2991  0934  1303               	bcf	3,6	;RP1=0, select bank0
  2992  0935  00B7               	movwf	___ftadd@f1+2
  2993  0936  1683               	bsf	3,5	;RP0=1, select bank1
  2994  0937  1303               	bcf	3,6	;RP1=0, select bank1
  2995  0938  082E               	movf	round@x^(0+128),w
  2996  0939  00A6               	movwf	trunc@x^(0+128)
  2997  093A  082F               	movf	(round@x+1)^(0+128),w
  2998  093B  00A7               	movwf	(trunc@x+1)^(0+128)
  2999  093C  0830               	movf	(round@x+2)^(0+128),w
  3000  093D  00A8               	movwf	(trunc@x+2)^(0+128)
  3001  093E  160A  118A  272A  120A  158A  	fcall	_trunc
  3002  0943  1683               	bsf	3,5	;RP0=1, select bank1
  3003  0944  1303               	bcf	3,6	;RP1=0, select bank1
  3004  0945  0826               	movf	?_trunc^(0+128),w
  3005  0946  1283               	bcf	3,5	;RP0=0, select bank0
  3006  0947  1303               	bcf	3,6	;RP1=0, select bank0
  3007  0948  00B2               	movwf	___ftneg@f1
  3008  0949  1683               	bsf	3,5	;RP0=1, select bank1
  3009  094A  1303               	bcf	3,6	;RP1=0, select bank1
  3010  094B  0827               	movf	(?_trunc+1)^(0+128),w
  3011  094C  1283               	bcf	3,5	;RP0=0, select bank0
  3012  094D  1303               	bcf	3,6	;RP1=0, select bank0
  3013  094E  00B3               	movwf	___ftneg@f1+1
  3014  094F  1683               	bsf	3,5	;RP0=1, select bank1
  3015  0950  1303               	bcf	3,6	;RP1=0, select bank1
  3016  0951  0828               	movf	(?_trunc+2)^(0+128),w
  3017  0952  1283               	bcf	3,5	;RP0=0, select bank0
  3018  0953  1303               	bcf	3,6	;RP1=0, select bank0
  3019  0954  00B4               	movwf	___ftneg@f1+2
  3020  0955  160A  118A  231A  120A  158A  	fcall	___ftneg
  3021  095A  1283               	bcf	3,5	;RP0=0, select bank0
  3022  095B  1303               	bcf	3,6	;RP1=0, select bank0
  3023  095C  0832               	movf	?___ftneg,w
  3024  095D  00B8               	movwf	___ftadd@f2
  3025  095E  0833               	movf	?___ftneg+1,w
  3026  095F  00B9               	movwf	___ftadd@f2+1
  3027  0960  0834               	movf	?___ftneg+2,w
  3028  0961  00BA               	movwf	___ftadd@f2+2
  3029  0962  120A  158A  25D0  120A  158A  	fcall	___ftadd
  3030  0967  1283               	bcf	3,5	;RP0=0, select bank0
  3031  0968  1303               	bcf	3,6	;RP1=0, select bank0
  3032  0969  0835               	movf	?___ftadd,w
  3033  096A  1683               	bsf	3,5	;RP0=1, select bank1
  3034  096B  1303               	bcf	3,6	;RP1=0, select bank1
  3035  096C  00B1               	movwf	round@f^(0+128)
  3036  096D  1283               	bcf	3,5	;RP0=0, select bank0
  3037  096E  1303               	bcf	3,6	;RP1=0, select bank0
  3038  096F  0836               	movf	?___ftadd+1,w
  3039  0970  1683               	bsf	3,5	;RP0=1, select bank1
  3040  0971  1303               	bcf	3,6	;RP1=0, select bank1
  3041  0972  00B2               	movwf	(round@f+1)^(0+128)
  3042  0973  1283               	bcf	3,5	;RP0=0, select bank0
  3043  0974  1303               	bcf	3,6	;RP1=0, select bank0
  3044  0975  0837               	movf	?___ftadd+2,w
  3045  0976  1683               	bsf	3,5	;RP0=1, select bank1
  3046  0977  1303               	bcf	3,6	;RP1=0, select bank1
  3047  0978  00B3               	movwf	(round@f+2)^(0+128)
  3048  0979  0831               	movf	round@f^(0+128),w
  3049  097A  1283               	bcf	3,5	;RP0=0, select bank0
  3050  097B  1303               	bcf	3,6	;RP1=0, select bank0
  3051  097C  00B5               	movwf	___ftadd@f1
  3052  097D  1683               	bsf	3,5	;RP0=1, select bank1
  3053  097E  1303               	bcf	3,6	;RP1=0, select bank1
  3054  097F  0832               	movf	(round@f+1)^(0+128),w
  3055  0980  1283               	bcf	3,5	;RP0=0, select bank0
  3056  0981  1303               	bcf	3,6	;RP1=0, select bank0
  3057  0982  00B6               	movwf	___ftadd@f1+1
  3058  0983  1683               	bsf	3,5	;RP0=1, select bank1
  3059  0984  1303               	bcf	3,6	;RP1=0, select bank1
  3060  0985  0833               	movf	(round@f+2)^(0+128),w
  3061  0986  1283               	bcf	3,5	;RP0=0, select bank0
  3062  0987  1303               	bcf	3,6	;RP1=0, select bank0
  3063  0988  00B7               	movwf	___ftadd@f1+2
  3064  0989  1683               	bsf	3,5	;RP0=1, select bank1
  3065  098A  1303               	bcf	3,6	;RP1=0, select bank1
  3066  098B  082E               	movf	round@x^(0+128),w
  3067  098C  1283               	bcf	3,5	;RP0=0, select bank0
  3068  098D  1303               	bcf	3,6	;RP1=0, select bank0
  3069  098E  00B8               	movwf	___ftadd@f2
  3070  098F  1683               	bsf	3,5	;RP0=1, select bank1
  3071  0990  1303               	bcf	3,6	;RP1=0, select bank1
  3072  0991  082F               	movf	(round@x+1)^(0+128),w
  3073  0992  1283               	bcf	3,5	;RP0=0, select bank0
  3074  0993  1303               	bcf	3,6	;RP1=0, select bank0
  3075  0994  00B9               	movwf	___ftadd@f2+1
  3076  0995  1683               	bsf	3,5	;RP0=1, select bank1
  3077  0996  1303               	bcf	3,6	;RP1=0, select bank1
  3078  0997  0830               	movf	(round@x+2)^(0+128),w
  3079  0998  1283               	bcf	3,5	;RP0=0, select bank0
  3080  0999  1303               	bcf	3,6	;RP1=0, select bank0
  3081  099A  00BA               	movwf	___ftadd@f2+2
  3082  099B  120A  158A  25D0  120A  158A  	fcall	___ftadd
  3083  09A0  1283               	bcf	3,5	;RP0=0, select bank0
  3084  09A1  1303               	bcf	3,6	;RP1=0, select bank0
  3085  09A2  0835               	movf	?___ftadd,w
  3086  09A3  1683               	bsf	3,5	;RP0=1, select bank1
  3087  09A4  1303               	bcf	3,6	;RP1=0, select bank1
  3088  09A5  00AE               	movwf	round@x^(0+128)
  3089  09A6  1283               	bcf	3,5	;RP0=0, select bank0
  3090  09A7  1303               	bcf	3,6	;RP1=0, select bank0
  3091  09A8  0836               	movf	?___ftadd+1,w
  3092  09A9  1683               	bsf	3,5	;RP0=1, select bank1
  3093  09AA  1303               	bcf	3,6	;RP1=0, select bank1
  3094  09AB  00AF               	movwf	(round@x+1)^(0+128)
  3095  09AC  1283               	bcf	3,5	;RP0=0, select bank0
  3096  09AD  1303               	bcf	3,6	;RP1=0, select bank0
  3097  09AE  0837               	movf	?___ftadd+2,w
  3098  09AF  1683               	bsf	3,5	;RP0=1, select bank1
  3099  09B0  1303               	bcf	3,6	;RP1=0, select bank1
  3100  09B1  00B0               	movwf	(round@x+2)^(0+128)
  3101  09B2  082E               	movf	round@x^(0+128),w
  3102  09B3  00A6               	movwf	trunc@x^(0+128)
  3103  09B4  082F               	movf	(round@x+1)^(0+128),w
  3104  09B5  00A7               	movwf	(trunc@x+1)^(0+128)
  3105  09B6  0830               	movf	(round@x+2)^(0+128),w
  3106  09B7  00A8               	movwf	(trunc@x+2)^(0+128)
  3107  09B8  160A  118A  272A   	fcall	_trunc
  3108  09BB  1683               	bsf	3,5	;RP0=1, select bank1
  3109  09BC  1303               	bcf	3,6	;RP1=0, select bank1
  3110  09BD  0826               	movf	?_trunc^(0+128),w
  3111  09BE  00AE               	movwf	?_round^(0+128)
  3112  09BF  0827               	movf	(?_trunc+1)^(0+128),w
  3113  09C0  00AF               	movwf	(?_round+1)^(0+128)
  3114  09C1  0828               	movf	(?_trunc+2)^(0+128),w
  3115  09C2  00B0               	movwf	(?_round+2)^(0+128)
  3116  09C3  0008               	return
  3117  09C4                     __end_of_round:	
  3118                           
  3119                           	psect	text7
  3120  172A                     __ptext7:	
  3121 ;; *************** function _trunc *****************
  3122 ;; Defined at:
  3123 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\trunc.c"
  3124 ;; Parameters:    Size  Location     Type
  3125 ;;  x               3    6[BANK1 ] unsigned int 
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;  i               3    9[BANK1 ] unsigned int 
  3128 ;;  expon           2   12[BANK1 ] int 
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  3    6[BANK1 ] int 
  3131 ;; Registers used:
  3132 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3138 ;;      Params:         0       0       3       0       0
  3139 ;;      Locals:         0       0       5       0       0
  3140 ;;      Temps:          0       1       0       0       0
  3141 ;;      Totals:         0       1       8       0       0
  3142 ;;Total ram usage:        9 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:    5
  3145 ;; This function calls:
  3146 ;;		___altoft
  3147 ;;		___fttol
  3148 ;;		_frexp
  3149 ;; This function is called by:
  3150 ;;		_round
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           
  3155                           ;psect for function _trunc
  3156  172A                     _trunc:	
  3157                           
  3158                           ;incstack = 0
  3159                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3160  172A  1683               	bsf	3,5	;RP0=1, select bank1
  3161  172B  1303               	bcf	3,6	;RP1=0, select bank1
  3162  172C  0826               	movf	trunc@x^(0+128),w
  3163  172D  1283               	bcf	3,5	;RP0=0, select bank0
  3164  172E  1303               	bcf	3,6	;RP1=0, select bank0
  3165  172F  00A2               	movwf	frexp@value
  3166  1730  1683               	bsf	3,5	;RP0=1, select bank1
  3167  1731  1303               	bcf	3,6	;RP1=0, select bank1
  3168  1732  0827               	movf	(trunc@x+1)^(0+128),w
  3169  1733  1283               	bcf	3,5	;RP0=0, select bank0
  3170  1734  1303               	bcf	3,6	;RP1=0, select bank0
  3171  1735  00A3               	movwf	frexp@value+1
  3172  1736  1683               	bsf	3,5	;RP0=1, select bank1
  3173  1737  1303               	bcf	3,6	;RP1=0, select bank1
  3174  1738  0828               	movf	(trunc@x+2)^(0+128),w
  3175  1739  1283               	bcf	3,5	;RP0=0, select bank0
  3176  173A  1303               	bcf	3,6	;RP1=0, select bank0
  3177  173B  00A4               	movwf	frexp@value+2
  3178  173C  30AC               	movlw	(low (trunc@expon| 0))& (0+255)
  3179  173D  00EA               	movwf	??_trunc
  3180  173E  086A               	movf	??_trunc,w
  3181  173F  00A5               	movwf	frexp@eptr
  3182  1740  160A  118A  24A7  160A  118A  	fcall	_frexp
  3183  1745  1683               	bsf	3,5	;RP0=1, select bank1
  3184  1746  1303               	bcf	3,6	;RP1=0, select bank1
  3185  1747  1FAD               	btfss	(trunc@expon+1)^(0+128),7
  3186  1748  2F50               	goto	l3376
  3187  1749  3000               	movlw	0
  3188  174A  00A6               	movwf	?_trunc^(0+128)
  3189  174B  3000               	movlw	0
  3190  174C  00A7               	movwf	(?_trunc+1)^(0+128)
  3191  174D  3000               	movlw	0
  3192  174E  00A8               	movwf	(?_trunc+2)^(0+128)
  3193  174F  0008               	return
  3194  1750                     l3376:	
  3195  1750  3000               	movlw	0
  3196  1751  022D               	subwf	(trunc@expon+1)^(0+128),w
  3197  1752  3015               	movlw	21
  3198  1753  1903               	skipnz
  3199  1754  022C               	subwf	trunc@expon^(0+128),w
  3200  1755  1803               	btfsc	3,0
  3201  1756  0008               	return
  3202  1757  0826               	movf	trunc@x^(0+128),w
  3203  1758  1283               	bcf	3,5	;RP0=0, select bank0
  3204  1759  1303               	bcf	3,6	;RP1=0, select bank0
  3205  175A  00E2               	movwf	___fttol@f1
  3206  175B  1683               	bsf	3,5	;RP0=1, select bank1
  3207  175C  1303               	bcf	3,6	;RP1=0, select bank1
  3208  175D  0827               	movf	(trunc@x+1)^(0+128),w
  3209  175E  1283               	bcf	3,5	;RP0=0, select bank0
  3210  175F  1303               	bcf	3,6	;RP1=0, select bank0
  3211  1760  00E3               	movwf	___fttol@f1+1
  3212  1761  1683               	bsf	3,5	;RP0=1, select bank1
  3213  1762  1303               	bcf	3,6	;RP1=0, select bank1
  3214  1763  0828               	movf	(trunc@x+2)^(0+128),w
  3215  1764  1283               	bcf	3,5	;RP0=0, select bank0
  3216  1765  1303               	bcf	3,6	;RP1=0, select bank0
  3217  1766  00E4               	movwf	___fttol@f1+2
  3218  1767  120A  158A  227C  160A  118A  	fcall	___fttol
  3219  176C  1283               	bcf	3,5	;RP0=0, select bank0
  3220  176D  1303               	bcf	3,6	;RP1=0, select bank0
  3221  176E  0865               	movf	?___fttol+3,w
  3222  176F  00AD               	movwf	___altoft@c+3
  3223  1770  0864               	movf	?___fttol+2,w
  3224  1771  00AC               	movwf	___altoft@c+2
  3225  1772  0863               	movf	?___fttol+1,w
  3226  1773  00AB               	movwf	___altoft@c+1
  3227  1774  0862               	movf	?___fttol,w
  3228  1775  00AA               	movwf	___altoft@c
  3229  1776  160A  118A  25E0   	fcall	___altoft
  3230  1779  1283               	bcf	3,5	;RP0=0, select bank0
  3231  177A  1303               	bcf	3,6	;RP1=0, select bank0
  3232  177B  082A               	movf	?___altoft,w
  3233  177C  1683               	bsf	3,5	;RP0=1, select bank1
  3234  177D  1303               	bcf	3,6	;RP1=0, select bank1
  3235  177E  00A9               	movwf	trunc@i^(0+128)
  3236  177F  1283               	bcf	3,5	;RP0=0, select bank0
  3237  1780  1303               	bcf	3,6	;RP1=0, select bank0
  3238  1781  082B               	movf	?___altoft+1,w
  3239  1782  1683               	bsf	3,5	;RP0=1, select bank1
  3240  1783  1303               	bcf	3,6	;RP1=0, select bank1
  3241  1784  00AA               	movwf	(trunc@i+1)^(0+128)
  3242  1785  1283               	bcf	3,5	;RP0=0, select bank0
  3243  1786  1303               	bcf	3,6	;RP1=0, select bank0
  3244  1787  082C               	movf	?___altoft+2,w
  3245  1788  1683               	bsf	3,5	;RP0=1, select bank1
  3246  1789  1303               	bcf	3,6	;RP1=0, select bank1
  3247  178A  00AB               	movwf	(trunc@i+2)^(0+128)
  3248  178B  0829               	movf	trunc@i^(0+128),w
  3249  178C  00A6               	movwf	?_trunc^(0+128)
  3250  178D  082A               	movf	(trunc@i+1)^(0+128),w
  3251  178E  00A7               	movwf	(?_trunc+1)^(0+128)
  3252  178F  082B               	movf	(trunc@i+2)^(0+128),w
  3253  1790  00A8               	movwf	(?_trunc+2)^(0+128)
  3254  1791  0008               	return
  3255  1792                     __end_of_trunc:	
  3256                           
  3257                           	psect	text8
  3258  14A7                     __ptext8:	
  3259 ;; *************** function _frexp *****************
  3260 ;; Defined at:
  3261 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\frexp.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;  value           3    2[BANK0 ] int 
  3264 ;;  eptr            1    5[BANK0 ] PTR int 
  3265 ;;		 -> trunc@expon(2), 
  3266 ;; Auto vars:     Size  Location     Type
  3267 ;;		None
  3268 ;; Return value:  Size  Location     Type
  3269 ;;                  3    2[BANK0 ] PTR int 
  3270 ;; Registers used:
  3271 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3277 ;;      Params:         0       4       0       0       0
  3278 ;;      Locals:         0       0       0       0       0
  3279 ;;      Temps:          0       2       0       0       0
  3280 ;;      Totals:         0       6       0       0       0
  3281 ;;Total ram usage:        6 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; Hardware stack levels required when called:    3
  3284 ;; This function calls:
  3285 ;;		Nothing
  3286 ;; This function is called by:
  3287 ;;		_trunc
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           
  3292                           ;psect for function _frexp
  3293  14A7                     _frexp:	
  3294                           
  3295                           ;incstack = 0
  3296                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  3297  14A7  1283               	bcf	3,5	;RP0=0, select bank0
  3298  14A8  1303               	bcf	3,6	;RP1=0, select bank0
  3299  14A9  0824               	movf	frexp@value+2,w
  3300  14AA  0423               	iorwf	frexp@value+1,w
  3301  14AB  0422               	iorwf	frexp@value,w
  3302  14AC  1D03               	skipz
  3303  14AD  2CB5               	goto	l2246
  3304  14AE  0825               	movf	frexp@eptr,w
  3305  14AF  0084               	movwf	4
  3306  14B0  1383               	bcf	3,7	;select IRP bank0
  3307  14B1  0180               	clrf	0
  3308  14B2  0A84               	incf	4,f
  3309  14B3  0180               	clrf	0
  3310                           
  3311                           ;	Return value of _frexp is never used
  3312  14B4  0008               	return
  3313  14B5                     l2246:	
  3314  14B5  0824               	movf	frexp@value+2,w
  3315  14B6  397F               	andlw	127
  3316  14B7  00A6               	movwf	??_frexp
  3317  14B8  01A7               	clrf	??_frexp+1
  3318  14B9  1003               	clrc
  3319  14BA  0DA6               	rlf	??_frexp,f
  3320  14BB  0DA7               	rlf	??_frexp+1,f
  3321  14BC  0825               	movf	frexp@eptr,w
  3322  14BD  0084               	movwf	4
  3323  14BE  0826               	movf	??_frexp,w
  3324  14BF  1383               	bcf	3,7	;select IRP bank0
  3325  14C0  0080               	movwf	0
  3326  14C1  0A84               	incf	4,f
  3327  14C2  0827               	movf	??_frexp+1,w
  3328  14C3  0080               	movwf	0
  3329  14C4  0D23               	rlf	frexp@value+1,w
  3330  14C5  0D23               	rlf	frexp@value+1,w
  3331  14C6  3901               	andlw	1
  3332  14C7  00A6               	movwf	??_frexp
  3333  14C8  01A7               	clrf	??_frexp+1
  3334  14C9  0825               	movf	frexp@eptr,w
  3335  14CA  0084               	movwf	4
  3336  14CB  0826               	movf	??_frexp,w
  3337  14CC  0480               	iorwf	0,f
  3338  14CD  0A84               	incf	4,f
  3339  14CE  0827               	movf	??_frexp+1,w
  3340  14CF  0480               	iorwf	0,f
  3341  14D0  0825               	movf	frexp@eptr,w
  3342  14D1  0084               	movwf	4
  3343  14D2  3082               	movlw	130
  3344  14D3  0780               	addwf	0,f
  3345  14D4  0F84               	incfsz	4,f
  3346  14D5  0800               	movf	0,w
  3347  14D6  1803               	skipnc
  3348  14D7  0A00               	incf	0,w
  3349  14D8  00FF               	movwf	127
  3350  14D9  30FF               	movlw	255
  3351  14DA  077F               	addwf	127,w
  3352  14DB  0080               	movwf	0
  3353  14DC  0384               	decf	4,f
  3354  14DD  0824               	movf	frexp@value+2,w
  3355  14DE  3980               	andlw	-128
  3356  14DF  383F               	iorlw	63
  3357  14E0  00A4               	movwf	frexp@value+2
  3358  14E1  13A3               	bcf	frexp@value+1,7
  3359  14E2  0008               	return
  3360  14E3                     __end_of_frexp:	
  3361                           ;	Return value of _frexp is never used
  3362                           
  3363                           
  3364                           	psect	text9
  3365  0A7C                     __ptext9:	
  3366 ;; *************** function ___fttol *****************
  3367 ;; Defined at:
  3368 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  3369 ;; Parameters:    Size  Location     Type
  3370 ;;  f1              3   66[BANK0 ] float 
  3371 ;; Auto vars:     Size  Location     Type
  3372 ;;  lval            4    1[BANK1 ] unsigned long 
  3373 ;;  exp1            1    5[BANK1 ] unsigned char 
  3374 ;;  sign1           1    0[BANK1 ] unsigned char 
  3375 ;; Return value:  Size  Location     Type
  3376 ;;                  4   66[BANK0 ] long 
  3377 ;; Registers used:
  3378 ;;		wreg, status,2, status,0
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3384 ;;      Params:         0       4       0       0       0
  3385 ;;      Locals:         0       0       6       0       0
  3386 ;;      Temps:          0       4       0       0       0
  3387 ;;      Totals:         0       8       6       0       0
  3388 ;;Total ram usage:       14 bytes
  3389 ;; Hardware stack levels used:    1
  3390 ;; Hardware stack levels required when called:    3
  3391 ;; This function calls:
  3392 ;;		Nothing
  3393 ;; This function is called by:
  3394 ;;		_floatToString
  3395 ;;		_main
  3396 ;;		_trunc
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           
  3401                           ;psect for function ___fttol
  3402  0A7C                     ___fttol:	
  3403                           
  3404                           ;incstack = 0
  3405                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3406  0A7C  1283               	bcf	3,5	;RP0=0, select bank0
  3407  0A7D  1303               	bcf	3,6	;RP1=0, select bank0
  3408  0A7E  0862               	movf	___fttol@f1,w
  3409  0A7F  00E6               	movwf	??___fttol
  3410  0A80  0863               	movf	___fttol@f1+1,w
  3411  0A81  00E7               	movwf	??___fttol+1
  3412  0A82  0864               	movf	___fttol@f1+2,w
  3413  0A83  00E8               	movwf	??___fttol+2
  3414  0A84  1003               	clrc
  3415  0A85  0D67               	rlf	??___fttol+1,w
  3416  0A86  0D68               	rlf	??___fttol+2,w
  3417  0A87  00E9               	movwf	??___fttol+3
  3418  0A88  0869               	movf	??___fttol+3,w
  3419  0A89  1683               	bsf	3,5	;RP0=1, select bank1
  3420  0A8A  1303               	bcf	3,6	;RP1=0, select bank1
  3421  0A8B  00A5               	movwf	___fttol@exp1^(0+128)
  3422  0A8C  0825               	movf	___fttol@exp1^(0+128),w
  3423  0A8D  1D03               	btfss	3,2
  3424  0A8E  2A9A               	goto	l2204
  3425  0A8F  3000               	movlw	0
  3426  0A90  1283               	bcf	3,5	;RP0=0, select bank0
  3427  0A91  1303               	bcf	3,6	;RP1=0, select bank0
  3428  0A92  00E5               	movwf	?___fttol+3
  3429  0A93  3000               	movlw	0
  3430  0A94  00E4               	movwf	?___fttol+2
  3431  0A95  3000               	movlw	0
  3432  0A96  00E3               	movwf	?___fttol+1
  3433  0A97  3000               	movlw	0
  3434  0A98  00E2               	movwf	?___fttol
  3435  0A99  0008               	return
  3436  0A9A                     l2204:	
  3437  0A9A  1283               	bcf	3,5	;RP0=0, select bank0
  3438  0A9B  0862               	movf	___fttol@f1,w
  3439  0A9C  00E6               	movwf	??___fttol
  3440  0A9D  0863               	movf	___fttol@f1+1,w
  3441  0A9E  00E7               	movwf	??___fttol+1
  3442  0A9F  0864               	movf	___fttol@f1+2,w
  3443  0AA0  00E8               	movwf	??___fttol+2
  3444  0AA1  3017               	movlw	23
  3445  0AA2                     u2215:	
  3446  0AA2  1003               	clrc
  3447  0AA3  0CE8               	rrf	??___fttol+2,f
  3448  0AA4  0CE7               	rrf	??___fttol+1,f
  3449  0AA5  0CE6               	rrf	??___fttol,f
  3450  0AA6  3EFF               	addlw	-1
  3451  0AA7  1D03               	skipz
  3452  0AA8  2AA2               	goto	u2215
  3453  0AA9  0866               	movf	??___fttol,w
  3454  0AAA  00E9               	movwf	??___fttol+3
  3455  0AAB  0869               	movf	??___fttol+3,w
  3456  0AAC  1683               	bsf	3,5	;RP0=1, select bank1
  3457  0AAD  1303               	bcf	3,6	;RP1=0, select bank1
  3458  0AAE  00A0               	movwf	___fttol@sign1^(0+128)
  3459  0AAF  1283               	bcf	3,5	;RP0=0, select bank0
  3460  0AB0  1303               	bcf	3,6	;RP1=0, select bank0
  3461  0AB1  17E3               	bsf	___fttol@f1+1,7
  3462  0AB2  30FF               	movlw	255
  3463  0AB3  05E2               	andwf	___fttol@f1,f
  3464  0AB4  30FF               	movlw	255
  3465  0AB5  05E3               	andwf	___fttol@f1+1,f
  3466  0AB6  3000               	movlw	0
  3467  0AB7  05E4               	andwf	___fttol@f1+2,f
  3468  0AB8  0862               	movf	___fttol@f1,w
  3469  0AB9  1683               	bsf	3,5	;RP0=1, select bank1
  3470  0ABA  1303               	bcf	3,6	;RP1=0, select bank1
  3471  0ABB  00A1               	movwf	___fttol@lval^(0+128)
  3472  0ABC  1283               	bcf	3,5	;RP0=0, select bank0
  3473  0ABD  1303               	bcf	3,6	;RP1=0, select bank0
  3474  0ABE  0863               	movf	___fttol@f1+1,w
  3475  0ABF  1683               	bsf	3,5	;RP0=1, select bank1
  3476  0AC0  1303               	bcf	3,6	;RP1=0, select bank1
  3477  0AC1  00A2               	movwf	(___fttol@lval^(0+128)+1)
  3478  0AC2  1283               	bcf	3,5	;RP0=0, select bank0
  3479  0AC3  1303               	bcf	3,6	;RP1=0, select bank0
  3480  0AC4  0864               	movf	___fttol@f1+2,w
  3481  0AC5  1683               	bsf	3,5	;RP0=1, select bank1
  3482  0AC6  1303               	bcf	3,6	;RP1=0, select bank1
  3483  0AC7  00A3               	movwf	(___fttol@lval^(0+128)+2)
  3484  0AC8  01A4               	clrf	(___fttol@lval^(0+128)+3)
  3485  0AC9  308E               	movlw	142
  3486  0ACA  02A5               	subwf	___fttol@exp1^(0+128),f
  3487  0ACB  1FA5               	btfss	___fttol@exp1^(0+128),7
  3488  0ACC  2AF3               	goto	l2224
  3489  0ACD  0825               	movf	___fttol@exp1^(0+128),w
  3490  0ACE  3A80               	xorlw	128
  3491  0ACF  3E8F               	addlw	143
  3492  0AD0  1803               	skipnc
  3493  0AD1  2ADD               	goto	l2222
  3494  0AD2  3000               	movlw	0
  3495  0AD3  1283               	bcf	3,5	;RP0=0, select bank0
  3496  0AD4  1303               	bcf	3,6	;RP1=0, select bank0
  3497  0AD5  00E5               	movwf	?___fttol+3
  3498  0AD6  3000               	movlw	0
  3499  0AD7  00E4               	movwf	?___fttol+2
  3500  0AD8  3000               	movlw	0
  3501  0AD9  00E3               	movwf	?___fttol+1
  3502  0ADA  3000               	movlw	0
  3503  0ADB  00E2               	movwf	?___fttol
  3504  0ADC  0008               	return
  3505  0ADD                     l2222:	
  3506  0ADD  3001               	movlw	1
  3507  0ADE                     u2245:	
  3508  0ADE  1003               	clrc
  3509  0ADF  1683               	bsf	3,5	;RP0=1, select bank1
  3510  0AE0  1303               	bcf	3,6	;RP1=0, select bank1
  3511  0AE1  0CA4               	rrf	(___fttol@lval+3)^(0+128),f
  3512  0AE2  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  3513  0AE3  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  3514  0AE4  0CA1               	rrf	___fttol@lval^(0+128),f
  3515  0AE5  3EFF               	addlw	-1
  3516  0AE6  1D03               	skipz
  3517  0AE7  2ADE               	goto	u2245
  3518  0AE8  3001               	movlw	1
  3519  0AE9  1283               	bcf	3,5	;RP0=0, select bank0
  3520  0AEA  1303               	bcf	3,6	;RP1=0, select bank0
  3521  0AEB  00E6               	movwf	??___fttol
  3522  0AEC  0866               	movf	??___fttol,w
  3523  0AED  1683               	bsf	3,5	;RP0=1, select bank1
  3524  0AEE  1303               	bcf	3,6	;RP1=0, select bank1
  3525  0AEF  07A5               	addwf	___fttol@exp1^(0+128),f
  3526  0AF0  1903               	btfsc	3,2
  3527  0AF1  2B19               	goto	l2232
  3528  0AF2  2ADD               	goto	l2222
  3529  0AF3                     l2224:	
  3530  0AF3  3018               	movlw	24
  3531  0AF4  0225               	subwf	___fttol@exp1^(0+128),w
  3532  0AF5  1C03               	skipc
  3533  0AF6  2B14               	goto	l675
  3534  0AF7  3000               	movlw	0
  3535  0AF8  1283               	bcf	3,5	;RP0=0, select bank0
  3536  0AF9  1303               	bcf	3,6	;RP1=0, select bank0
  3537  0AFA  00E5               	movwf	?___fttol+3
  3538  0AFB  3000               	movlw	0
  3539  0AFC  00E4               	movwf	?___fttol+2
  3540  0AFD  3000               	movlw	0
  3541  0AFE  00E3               	movwf	?___fttol+1
  3542  0AFF  3000               	movlw	0
  3543  0B00  00E2               	movwf	?___fttol
  3544  0B01  0008               	return
  3545  0B02                     l2230:	
  3546  0B02  3001               	movlw	1
  3547  0B03  1283               	bcf	3,5	;RP0=0, select bank0
  3548  0B04  00E6               	movwf	??___fttol
  3549  0B05                     u2275:	
  3550  0B05  1003               	clrc
  3551  0B06  1683               	bsf	3,5	;RP0=1, select bank1
  3552  0B07  1303               	bcf	3,6	;RP1=0, select bank1
  3553  0B08  0DA1               	rlf	___fttol@lval^(0+128),f
  3554  0B09  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  3555  0B0A  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  3556  0B0B  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  3557  0B0C  1283               	bcf	3,5	;RP0=0, select bank0
  3558  0B0D  1303               	bcf	3,6	;RP1=0, select bank0
  3559  0B0E  0BE6               	decfsz	??___fttol,f
  3560  0B0F  2B05               	goto	u2275
  3561  0B10  3001               	movlw	1
  3562  0B11  1683               	bsf	3,5	;RP0=1, select bank1
  3563  0B12  1303               	bcf	3,6	;RP1=0, select bank1
  3564  0B13  02A5               	subwf	___fttol@exp1^(0+128),f
  3565  0B14                     l675:	
  3566  0B14  1683               	bsf	3,5	;RP0=1, select bank1
  3567  0B15  1303               	bcf	3,6	;RP1=0, select bank1
  3568  0B16  0825               	movf	___fttol@exp1^(0+128),w
  3569  0B17  1D03               	btfss	3,2
  3570  0B18  2B02               	goto	l2230
  3571  0B19                     l2232:	
  3572  0B19  0820               	movf	___fttol@sign1^(0+128),w
  3573  0B1A  1903               	btfsc	3,2
  3574  0B1B  2B27               	goto	l2236
  3575  0B1C  09A1               	comf	___fttol@lval^(0+128),f
  3576  0B1D  09A2               	comf	(___fttol@lval+1)^(0+128),f
  3577  0B1E  09A3               	comf	(___fttol@lval+2)^(0+128),f
  3578  0B1F  09A4               	comf	(___fttol@lval+3)^(0+128),f
  3579  0B20  0AA1               	incf	___fttol@lval^(0+128),f
  3580  0B21  1903               	skipnz
  3581  0B22  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  3582  0B23  1903               	skipnz
  3583  0B24  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  3584  0B25  1903               	skipnz
  3585  0B26  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  3586  0B27                     l2236:	
  3587  0B27  0824               	movf	(___fttol@lval+3)^(0+128),w
  3588  0B28  1283               	bcf	3,5	;RP0=0, select bank0
  3589  0B29  1303               	bcf	3,6	;RP1=0, select bank0
  3590  0B2A  00E5               	movwf	?___fttol+3
  3591  0B2B  1683               	bsf	3,5	;RP0=1, select bank1
  3592  0B2C  1303               	bcf	3,6	;RP1=0, select bank1
  3593  0B2D  0823               	movf	(___fttol@lval+2)^(0+128),w
  3594  0B2E  1283               	bcf	3,5	;RP0=0, select bank0
  3595  0B2F  1303               	bcf	3,6	;RP1=0, select bank0
  3596  0B30  00E4               	movwf	?___fttol+2
  3597  0B31  1683               	bsf	3,5	;RP0=1, select bank1
  3598  0B32  1303               	bcf	3,6	;RP1=0, select bank1
  3599  0B33  0822               	movf	(___fttol@lval+1)^(0+128),w
  3600  0B34  1283               	bcf	3,5	;RP0=0, select bank0
  3601  0B35  1303               	bcf	3,6	;RP1=0, select bank0
  3602  0B36  00E3               	movwf	?___fttol+1
  3603  0B37  1683               	bsf	3,5	;RP0=1, select bank1
  3604  0B38  1303               	bcf	3,6	;RP1=0, select bank1
  3605  0B39  0821               	movf	___fttol@lval^(0+128),w
  3606  0B3A  1283               	bcf	3,5	;RP0=0, select bank0
  3607  0B3B  1303               	bcf	3,6	;RP1=0, select bank0
  3608  0B3C  00E2               	movwf	?___fttol
  3609  0B3D  0008               	return
  3610  0B3E                     __end_of___fttol:	
  3611                           
  3612                           	psect	text10
  3613  0DD0                     __ptext10:	
  3614 ;; *************** function ___ftadd *****************
  3615 ;; Defined at:
  3616 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;  f1              3   21[BANK0 ] float 
  3619 ;;  f2              3   24[BANK0 ] float 
  3620 ;; Auto vars:     Size  Location     Type
  3621 ;;  exp1            1   33[BANK0 ] unsigned char 
  3622 ;;  exp2            1   32[BANK0 ] unsigned char 
  3623 ;;  sign            1   31[BANK0 ] unsigned char 
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  3   21[BANK0 ] float 
  3626 ;; Registers used:
  3627 ;;		wreg, status,2, status,0, pclath, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3633 ;;      Params:         0       6       0       0       0
  3634 ;;      Locals:         0       3       0       0       0
  3635 ;;      Temps:          0       4       0       0       0
  3636 ;;      Totals:         0      13       0       0       0
  3637 ;;Total ram usage:       13 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    4
  3640 ;; This function calls:
  3641 ;;		___ftpack
  3642 ;; This function is called by:
  3643 ;;		_floatToString
  3644 ;;		_main
  3645 ;;		_round
  3646 ;; This function uses a non-reentrant model
  3647 ;;
  3648                           
  3649                           
  3650                           ;psect for function ___ftadd
  3651  0DD0                     ___ftadd:	
  3652                           
  3653                           ;incstack = 0
  3654                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  3655  0DD0  1283               	bcf	3,5	;RP0=0, select bank0
  3656  0DD1  1303               	bcf	3,6	;RP1=0, select bank0
  3657  0DD2  0835               	movf	___ftadd@f1,w
  3658  0DD3  00BB               	movwf	??___ftadd
  3659  0DD4  0836               	movf	___ftadd@f1+1,w
  3660  0DD5  00BC               	movwf	??___ftadd+1
  3661  0DD6  0837               	movf	___ftadd@f1+2,w
  3662  0DD7  00BD               	movwf	??___ftadd+2
  3663  0DD8  1003               	clrc
  3664  0DD9  0D3C               	rlf	??___ftadd+1,w
  3665  0DDA  0D3D               	rlf	??___ftadd+2,w
  3666  0DDB  00BE               	movwf	??___ftadd+3
  3667  0DDC  083E               	movf	??___ftadd+3,w
  3668  0DDD  00C1               	movwf	___ftadd@exp1
  3669  0DDE  0838               	movf	___ftadd@f2,w
  3670  0DDF  00BB               	movwf	??___ftadd
  3671  0DE0  0839               	movf	___ftadd@f2+1,w
  3672  0DE1  00BC               	movwf	??___ftadd+1
  3673  0DE2  083A               	movf	___ftadd@f2+2,w
  3674  0DE3  00BD               	movwf	??___ftadd+2
  3675  0DE4  1003               	clrc
  3676  0DE5  0D3C               	rlf	??___ftadd+1,w
  3677  0DE6  0D3D               	rlf	??___ftadd+2,w
  3678  0DE7  00BE               	movwf	??___ftadd+3
  3679  0DE8  083E               	movf	??___ftadd+3,w
  3680  0DE9  00C0               	movwf	___ftadd@exp2
  3681  0DEA  0841               	movf	___ftadd@exp1,w
  3682  0DEB  1903               	btfsc	3,2
  3683  0DEC  2DF9               	goto	l2326
  3684  0DED  0840               	movf	___ftadd@exp2,w
  3685  0DEE  0241               	subwf	___ftadd@exp1,w
  3686  0DEF  1803               	skipnc
  3687  0DF0  2E00               	goto	l2330
  3688  0DF1  0341               	decf	___ftadd@exp1,w
  3689  0DF2  3AFF               	xorlw	255
  3690  0DF3  0740               	addwf	___ftadd@exp2,w
  3691  0DF4  00BB               	movwf	??___ftadd
  3692  0DF5  3019               	movlw	25
  3693  0DF6  023B               	subwf	??___ftadd,w
  3694  0DF7  1C03               	skipc
  3695  0DF8  2E00               	goto	l2330
  3696  0DF9                     l2326:	
  3697  0DF9  0838               	movf	___ftadd@f2,w
  3698  0DFA  00B5               	movwf	?___ftadd
  3699  0DFB  0839               	movf	___ftadd@f2+1,w
  3700  0DFC  00B6               	movwf	?___ftadd+1
  3701  0DFD  083A               	movf	___ftadd@f2+2,w
  3702  0DFE  00B7               	movwf	?___ftadd+2
  3703  0DFF  0008               	return
  3704  0E00                     l2330:	
  3705  0E00  0840               	movf	___ftadd@exp2,w
  3706  0E01  1903               	btfsc	3,2
  3707  0E02  0008               	return
  3708  0E03  0841               	movf	___ftadd@exp1,w
  3709  0E04  0240               	subwf	___ftadd@exp2,w
  3710  0E05  1803               	skipnc
  3711  0E06  2E0F               	goto	l2336
  3712  0E07  0340               	decf	___ftadd@exp2,w
  3713  0E08  3AFF               	xorlw	255
  3714  0E09  0741               	addwf	___ftadd@exp1,w
  3715  0E0A  00BB               	movwf	??___ftadd
  3716  0E0B  3019               	movlw	25
  3717  0E0C  023B               	subwf	??___ftadd,w
  3718  0E0D  1803               	btfsc	3,0
  3719  0E0E  0008               	return
  3720  0E0F                     l2336:	
  3721  0E0F  3006               	movlw	6
  3722  0E10  00BB               	movwf	??___ftadd
  3723  0E11  083B               	movf	??___ftadd,w
  3724  0E12  00BF               	movwf	___ftadd@sign
  3725  0E13  1BB7               	btfsc	___ftadd@f1+2,7
  3726  0E14  17BF               	bsf	___ftadd@sign,7
  3727  0E15  1BBA               	btfsc	___ftadd@f2+2,7
  3728  0E16  173F               	bsf	___ftadd@sign,6
  3729  0E17  17B6               	bsf	___ftadd@f1+1,7
  3730  0E18  30FF               	movlw	255
  3731  0E19  05B5               	andwf	___ftadd@f1,f
  3732  0E1A  30FF               	movlw	255
  3733  0E1B  05B6               	andwf	___ftadd@f1+1,f
  3734  0E1C  3000               	movlw	0
  3735  0E1D  05B7               	andwf	___ftadd@f1+2,f
  3736  0E1E  17B9               	bsf	___ftadd@f2+1,7
  3737  0E1F  30FF               	movlw	255
  3738  0E20  05B8               	andwf	___ftadd@f2,f
  3739  0E21  30FF               	movlw	255
  3740  0E22  05B9               	andwf	___ftadd@f2+1,f
  3741  0E23  3000               	movlw	0
  3742  0E24  05BA               	andwf	___ftadd@f2+2,f
  3743  0E25  0840               	movf	___ftadd@exp2,w
  3744  0E26  0241               	subwf	___ftadd@exp1,w
  3745  0E27  1803               	skipnc
  3746  0E28  2E4F               	goto	l2358
  3747  0E29                     l2348:	
  3748  0E29  3001               	movlw	1
  3749  0E2A                     u2525:	
  3750  0E2A  1003               	clrc
  3751  0E2B  0DB8               	rlf	___ftadd@f2,f
  3752  0E2C  0DB9               	rlf	___ftadd@f2+1,f
  3753  0E2D  0DBA               	rlf	___ftadd@f2+2,f
  3754  0E2E  3EFF               	addlw	-1
  3755  0E2F  1D03               	skipz
  3756  0E30  2E2A               	goto	u2525
  3757  0E31  3001               	movlw	1
  3758  0E32  02C0               	subwf	___ftadd@exp2,f
  3759  0E33  0840               	movf	___ftadd@exp2,w
  3760  0E34  0641               	xorwf	___ftadd@exp1,w
  3761  0E35  1903               	skipnz
  3762  0E36  2E4A               	goto	l2356
  3763  0E37  3001               	movlw	1
  3764  0E38  02BF               	subwf	___ftadd@sign,f
  3765  0E39  083F               	movf	___ftadd@sign,w
  3766  0E3A  3907               	andlw	7
  3767  0E3B  1903               	btfsc	3,2
  3768  0E3C  2E4A               	goto	l2356
  3769  0E3D  2E29               	goto	l2348
  3770  0E3E                     l2354:	
  3771  0E3E  3001               	movlw	1
  3772  0E3F                     u2555:	
  3773  0E3F  1003               	clrc
  3774  0E40  0CB7               	rrf	___ftadd@f1+2,f
  3775  0E41  0CB6               	rrf	___ftadd@f1+1,f
  3776  0E42  0CB5               	rrf	___ftadd@f1,f
  3777  0E43  3EFF               	addlw	-1
  3778  0E44  1D03               	skipz
  3779  0E45  2E3F               	goto	u2555
  3780  0E46  3001               	movlw	1
  3781  0E47  00BB               	movwf	??___ftadd
  3782  0E48  083B               	movf	??___ftadd,w
  3783  0E49  07C1               	addwf	___ftadd@exp1,f
  3784  0E4A                     l2356:	
  3785  0E4A  0841               	movf	___ftadd@exp1,w
  3786  0E4B  0640               	xorwf	___ftadd@exp2,w
  3787  0E4C  1903               	btfsc	3,2
  3788  0E4D  2E78               	goto	l615
  3789  0E4E  2E3E               	goto	l2354
  3790  0E4F                     l2358:	
  3791  0E4F  0841               	movf	___ftadd@exp1,w
  3792  0E50  0240               	subwf	___ftadd@exp2,w
  3793  0E51  1803               	skipnc
  3794  0E52  2E78               	goto	l615
  3795  0E53                     l2360:	
  3796  0E53  3001               	movlw	1
  3797  0E54                     u2585:	
  3798  0E54  1003               	clrc
  3799  0E55  0DB5               	rlf	___ftadd@f1,f
  3800  0E56  0DB6               	rlf	___ftadd@f1+1,f
  3801  0E57  0DB7               	rlf	___ftadd@f1+2,f
  3802  0E58  3EFF               	addlw	-1
  3803  0E59  1D03               	skipz
  3804  0E5A  2E54               	goto	u2585
  3805  0E5B  3001               	movlw	1
  3806  0E5C  02C1               	subwf	___ftadd@exp1,f
  3807  0E5D  0840               	movf	___ftadd@exp2,w
  3808  0E5E  0641               	xorwf	___ftadd@exp1,w
  3809  0E5F  1903               	skipnz
  3810  0E60  2E74               	goto	l2368
  3811  0E61  3001               	movlw	1
  3812  0E62  02BF               	subwf	___ftadd@sign,f
  3813  0E63  083F               	movf	___ftadd@sign,w
  3814  0E64  3907               	andlw	7
  3815  0E65  1903               	btfsc	3,2
  3816  0E66  2E74               	goto	l2368
  3817  0E67  2E53               	goto	l2360
  3818  0E68                     l2366:	
  3819  0E68  3001               	movlw	1
  3820  0E69                     u2615:	
  3821  0E69  1003               	clrc
  3822  0E6A  0CBA               	rrf	___ftadd@f2+2,f
  3823  0E6B  0CB9               	rrf	___ftadd@f2+1,f
  3824  0E6C  0CB8               	rrf	___ftadd@f2,f
  3825  0E6D  3EFF               	addlw	-1
  3826  0E6E  1D03               	skipz
  3827  0E6F  2E69               	goto	u2615
  3828  0E70  3001               	movlw	1
  3829  0E71  00BB               	movwf	??___ftadd
  3830  0E72  083B               	movf	??___ftadd,w
  3831  0E73  07C0               	addwf	___ftadd@exp2,f
  3832  0E74                     l2368:	
  3833  0E74  0841               	movf	___ftadd@exp1,w
  3834  0E75  0640               	xorwf	___ftadd@exp2,w
  3835  0E76  1D03               	skipz
  3836  0E77  2E68               	goto	l2366
  3837  0E78                     l615:	
  3838  0E78  1FBF               	btfss	___ftadd@sign,7
  3839  0E79  2E8A               	goto	l2372
  3840  0E7A  30FF               	movlw	255
  3841  0E7B  06B5               	xorwf	___ftadd@f1,f
  3842  0E7C  30FF               	movlw	255
  3843  0E7D  06B6               	xorwf	___ftadd@f1+1,f
  3844  0E7E  30FF               	movlw	255
  3845  0E7F  06B7               	xorwf	___ftadd@f1+2,f
  3846  0E80  3001               	movlw	1
  3847  0E81  07B5               	addwf	___ftadd@f1,f
  3848  0E82  3000               	movlw	0
  3849  0E83  1803               	skipnc
  3850  0E84  3001               	movlw	1
  3851  0E85  07B6               	addwf	___ftadd@f1+1,f
  3852  0E86  3000               	movlw	0
  3853  0E87  1803               	skipnc
  3854  0E88  3001               	movlw	1
  3855  0E89  07B7               	addwf	___ftadd@f1+2,f
  3856  0E8A                     l2372:	
  3857  0E8A  1F3F               	btfss	___ftadd@sign,6
  3858  0E8B  2E9C               	goto	l2376
  3859  0E8C  30FF               	movlw	255
  3860  0E8D  06B8               	xorwf	___ftadd@f2,f
  3861  0E8E  30FF               	movlw	255
  3862  0E8F  06B9               	xorwf	___ftadd@f2+1,f
  3863  0E90  30FF               	movlw	255
  3864  0E91  06BA               	xorwf	___ftadd@f2+2,f
  3865  0E92  3001               	movlw	1
  3866  0E93  07B8               	addwf	___ftadd@f2,f
  3867  0E94  3000               	movlw	0
  3868  0E95  1803               	skipnc
  3869  0E96  3001               	movlw	1
  3870  0E97  07B9               	addwf	___ftadd@f2+1,f
  3871  0E98  3000               	movlw	0
  3872  0E99  1803               	skipnc
  3873  0E9A  3001               	movlw	1
  3874  0E9B  07BA               	addwf	___ftadd@f2+2,f
  3875  0E9C                     l2376:	
  3876  0E9C  01BF               	clrf	___ftadd@sign
  3877  0E9D  0835               	movf	___ftadd@f1,w
  3878  0E9E  07B8               	addwf	___ftadd@f2,f
  3879  0E9F  0836               	movf	___ftadd@f1+1,w
  3880  0EA0  1103               	clrz
  3881  0EA1  1803               	skipnc
  3882  0EA2  0A36               	incf	___ftadd@f1+1,w
  3883  0EA3  1D03               	btfss	3,2
  3884  0EA4  07B9               	addwf	___ftadd@f2+1,f
  3885  0EA5  0837               	movf	___ftadd@f1+2,w
  3886  0EA6  1103               	clrz
  3887  0EA7  1803               	skipnc
  3888  0EA8  0A37               	incf	___ftadd@f1+2,w
  3889  0EA9  1D03               	btfss	3,2
  3890  0EAA  07BA               	addwf	___ftadd@f2+2,f
  3891  0EAB  1FBA               	btfss	___ftadd@f2+2,7
  3892  0EAC  2EBF               	goto	l2386
  3893  0EAD  30FF               	movlw	255
  3894  0EAE  06B8               	xorwf	___ftadd@f2,f
  3895  0EAF  30FF               	movlw	255
  3896  0EB0  06B9               	xorwf	___ftadd@f2+1,f
  3897  0EB1  30FF               	movlw	255
  3898  0EB2  06BA               	xorwf	___ftadd@f2+2,f
  3899  0EB3  3001               	movlw	1
  3900  0EB4  07B8               	addwf	___ftadd@f2,f
  3901  0EB5  3000               	movlw	0
  3902  0EB6  1803               	skipnc
  3903  0EB7  3001               	movlw	1
  3904  0EB8  07B9               	addwf	___ftadd@f2+1,f
  3905  0EB9  3000               	movlw	0
  3906  0EBA  1803               	skipnc
  3907  0EBB  3001               	movlw	1
  3908  0EBC  07BA               	addwf	___ftadd@f2+2,f
  3909  0EBD  01BF               	clrf	___ftadd@sign
  3910  0EBE  0ABF               	incf	___ftadd@sign,f
  3911  0EBF                     l2386:	
  3912  0EBF  0838               	movf	___ftadd@f2,w
  3913  0EC0  00A2               	movwf	___ftpack@arg
  3914  0EC1  0839               	movf	___ftadd@f2+1,w
  3915  0EC2  00A3               	movwf	___ftpack@arg+1
  3916  0EC3  083A               	movf	___ftadd@f2+2,w
  3917  0EC4  00A4               	movwf	___ftpack@arg+2
  3918  0EC5  0841               	movf	___ftadd@exp1,w
  3919  0EC6  00BB               	movwf	??___ftadd
  3920  0EC7  083B               	movf	??___ftadd,w
  3921  0EC8  00A5               	movwf	___ftpack@exp
  3922  0EC9  083F               	movf	___ftadd@sign,w
  3923  0ECA  00BC               	movwf	??___ftadd+1
  3924  0ECB  083C               	movf	??___ftadd+1,w
  3925  0ECC  00A6               	movwf	___ftpack@sign
  3926  0ECD  160A  118A  2792   	fcall	___ftpack
  3927  0ED0  1283               	bcf	3,5	;RP0=0, select bank0
  3928  0ED1  1303               	bcf	3,6	;RP1=0, select bank0
  3929  0ED2  0822               	movf	?___ftpack,w
  3930  0ED3  00B5               	movwf	?___ftadd
  3931  0ED4  0823               	movf	?___ftpack+1,w
  3932  0ED5  00B6               	movwf	?___ftadd+1
  3933  0ED6  0824               	movf	?___ftpack+2,w
  3934  0ED7  00B7               	movwf	?___ftadd+2
  3935  0ED8  0008               	return
  3936  0ED9                     __end_of___ftadd:	
  3937                           
  3938                           	psect	text11
  3939  13D8                     __ptext11:	
  3940 ;; *************** function ___awtoft *****************
  3941 ;; Defined at:
  3942 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;  c               2   10[BANK0 ] int 
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;  sign            1   15[BANK0 ] unsigned char 
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  3   10[BANK0 ] float 
  3949 ;; Registers used:
  3950 ;;		wreg, status,2, status,0, pclath, cstack
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3956 ;;      Params:         0       3       0       0       0
  3957 ;;      Locals:         0       1       0       0       0
  3958 ;;      Temps:          0       2       0       0       0
  3959 ;;      Totals:         0       6       0       0       0
  3960 ;;Total ram usage:        6 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    4
  3963 ;; This function calls:
  3964 ;;		___ftpack
  3965 ;; This function is called by:
  3966 ;;		_floatToString
  3967 ;;		_main
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           
  3972                           ;psect for function ___awtoft
  3973  13D8                     ___awtoft:	
  3974                           
  3975                           ;incstack = 0
  3976                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  3977  13D8  1283               	bcf	3,5	;RP0=0, select bank0
  3978  13D9  1303               	bcf	3,6	;RP1=0, select bank0
  3979  13DA  01AF               	clrf	___awtoft@sign
  3980  13DB  1FAB               	btfss	___awtoft@c+1,7
  3981  13DC  2BE4               	goto	l2900
  3982  13DD  09AA               	comf	___awtoft@c,f
  3983  13DE  09AB               	comf	___awtoft@c+1,f
  3984  13DF  0AAA               	incf	___awtoft@c,f
  3985  13E0  1903               	skipnz
  3986  13E1  0AAB               	incf	___awtoft@c+1,f
  3987  13E2  01AF               	clrf	___awtoft@sign
  3988  13E3  0AAF               	incf	___awtoft@sign,f
  3989  13E4                     l2900:	
  3990  13E4  082A               	movf	___awtoft@c,w
  3991  13E5  00A2               	movwf	___ftpack@arg
  3992  13E6  082B               	movf	___awtoft@c+1,w
  3993  13E7  00A3               	movwf	___ftpack@arg+1
  3994  13E8  01A4               	clrf	___ftpack@arg+2
  3995  13E9  308E               	movlw	142
  3996  13EA  00AD               	movwf	??___awtoft
  3997  13EB  082D               	movf	??___awtoft,w
  3998  13EC  00A5               	movwf	___ftpack@exp
  3999  13ED  082F               	movf	___awtoft@sign,w
  4000  13EE  00AE               	movwf	??___awtoft+1
  4001  13EF  082E               	movf	??___awtoft+1,w
  4002  13F0  00A6               	movwf	___ftpack@sign
  4003  13F1  160A  118A  2792   	fcall	___ftpack
  4004  13F4  1283               	bcf	3,5	;RP0=0, select bank0
  4005  13F5  1303               	bcf	3,6	;RP1=0, select bank0
  4006  13F6  0822               	movf	?___ftpack,w
  4007  13F7  00AA               	movwf	?___awtoft
  4008  13F8  0823               	movf	?___ftpack+1,w
  4009  13F9  00AB               	movwf	?___awtoft+1
  4010  13FA  0824               	movf	?___ftpack+2,w
  4011  13FB  00AC               	movwf	?___awtoft+2
  4012  13FC  0008               	return
  4013  13FD                     __end_of___awtoft:	
  4014                           
  4015                           	psect	text12
  4016  137E                     __ptext12:	
  4017 ;; *************** function _atof *****************
  4018 ;; Defined at:
  4019 ;;		line 200 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atof.c"
  4020 ;; Parameters:    Size  Location     Type
  4021 ;;  s               1    wreg     PTR const unsigned char 
  4022 ;;		 -> num(4), 
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;  s               1   73[BANK0 ] PTR const unsigned char 
  4025 ;;		 -> num(4), 
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  3   22[BANK1 ] PTR const unsigned char 
  4028 ;; Registers used:
  4029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4035 ;;      Params:         0       0       4       0       0
  4036 ;;      Locals:         0       1       0       0       0
  4037 ;;      Temps:          0       0       0       0       0
  4038 ;;      Totals:         0       1       4       0       0
  4039 ;;Total ram usage:        5 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:    6
  4042 ;; This function calls:
  4043 ;;		_strtod
  4044 ;; This function is called by:
  4045 ;;		_main
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           
  4050                           ;psect for function _atof
  4051  137E                     _atof:	
  4052                           
  4053                           ;incstack = 0
  4054                           ; Regs used in _atof: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4055                           ;atof@s stored from wreg
  4056  137E  1283               	bcf	3,5	;RP0=0, select bank0
  4057  137F  1303               	bcf	3,6	;RP1=0, select bank0
  4058  1380  00E9               	movwf	atof@s
  4059  1381  01E2               	clrf	strtod@res
  4060  1382  0869               	movf	atof@s,w
  4061  1383  120A  118A  202D   	fcall	_strtod
  4062  1386  1283               	bcf	3,5	;RP0=0, select bank0
  4063  1387  1303               	bcf	3,6	;RP1=0, select bank0
  4064  1388  0862               	movf	?_strtod,w
  4065  1389  1683               	bsf	3,5	;RP0=1, select bank1
  4066  138A  1303               	bcf	3,6	;RP1=0, select bank1
  4067  138B  00B6               	movwf	?_atof^(0+128)
  4068  138C  1283               	bcf	3,5	;RP0=0, select bank0
  4069  138D  1303               	bcf	3,6	;RP1=0, select bank0
  4070  138E  0863               	movf	?_strtod+1,w
  4071  138F  1683               	bsf	3,5	;RP0=1, select bank1
  4072  1390  1303               	bcf	3,6	;RP1=0, select bank1
  4073  1391  00B7               	movwf	(?_atof+1)^(0+128)
  4074  1392  1283               	bcf	3,5	;RP0=0, select bank0
  4075  1393  1303               	bcf	3,6	;RP1=0, select bank0
  4076  1394  0864               	movf	?_strtod+2,w
  4077  1395  1683               	bsf	3,5	;RP0=1, select bank1
  4078  1396  1303               	bcf	3,6	;RP1=0, select bank1
  4079  1397  00B8               	movwf	(?_atof+2)^(0+128)
  4080  1398  0008               	return
  4081  1399                     __end_of_atof:	
  4082                           
  4083                           	psect	text13
  4084  002D                     __ptext13:	
  4085 ;; *************** function _strtod *****************
  4086 ;; Defined at:
  4087 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atof.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;  s               1    wreg     PTR const unsigned char 
  4090 ;;		 -> num(4), 
  4091 ;;  res             1   66[BANK0 ] PTR PTR const unsigned c
  4092 ;;		 -> NULL(0), 
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;  s               1   21[BANK1 ] PTR const unsigned char 
  4095 ;;		 -> num(4), 
  4096 ;;  _u              4   17[BANK1 ] struct .
  4097 ;;  expon           1   16[BANK1 ] char 
  4098 ;;  flags           1   15[BANK1 ] unsigned char 
  4099 ;;  eexp            1   14[BANK1 ] char 
  4100 ;; Return value:  Size  Location     Type
  4101 ;;                  3   66[BANK0 ] char 
  4102 ;; Registers used:
  4103 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4104 ;; Tracked objects:
  4105 ;;		On entry : 0/0
  4106 ;;		On exit  : 0/0
  4107 ;;		Unchanged: 0/0
  4108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4109 ;;      Params:         0       3       0       0       0
  4110 ;;      Locals:         0       0      22       0       0
  4111 ;;      Temps:          0       4       0       0       0
  4112 ;;      Totals:         0       7      22       0       0
  4113 ;;Total ram usage:       29 bytes
  4114 ;; Hardware stack levels used:    1
  4115 ;; Hardware stack levels required when called:    5
  4116 ;; This function calls:
  4117 ;;		___altoft
  4118 ;;		___bmul
  4119 ;;		___ftdiv
  4120 ;;		___ftge
  4121 ;;		___ftmul
  4122 ;;		___ftneg
  4123 ;;		___lmul
  4124 ;;		_isdigit
  4125 ;;		_isspace
  4126 ;; This function is called by:
  4127 ;;		_atof
  4128 ;; This function uses a non-reentrant model
  4129 ;;
  4130                           
  4131                           
  4132                           ;psect for function _strtod
  4133  002D                     _strtod:	
  4134                           
  4135                           ;incstack = 0
  4136                           ; Regs used in _strtod: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4137                           ;strtod@s stored from wreg
  4138  002D  1683               	bsf	3,5	;RP0=1, select bank1
  4139  002E  1303               	bcf	3,6	;RP1=0, select bank1
  4140  002F  00B5               	movwf	strtod@s^(0+128)
  4141  0030  1283               	bcf	3,5	;RP0=0, select bank0
  4142  0031  1303               	bcf	3,6	;RP1=0, select bank0
  4143  0032  0862               	movf	strtod@res,w
  4144  0033  1903               	btfsc	3,2
  4145  0034  2840               	goto	l2704
  4146  0035  1683               	bsf	3,5	;RP0=1, select bank1
  4147  0036  1303               	bcf	3,6	;RP1=0, select bank1
  4148  0037  0835               	movf	strtod@s^(0+128),w
  4149  0038  1283               	bcf	3,5	;RP0=0, select bank0
  4150  0039  1303               	bcf	3,6	;RP1=0, select bank0
  4151  003A  00E5               	movwf	??_strtod
  4152  003B  0862               	movf	strtod@res,w
  4153  003C  0084               	movwf	4
  4154  003D  0865               	movf	??_strtod,w
  4155  003E  1383               	bcf	3,7	;select IRP bank0
  4156  003F  0080               	movwf	0
  4157  0040                     l2704:	
  4158  0040  1683               	bsf	3,5	;RP0=1, select bank1
  4159  0041  1303               	bcf	3,6	;RP1=0, select bank1
  4160  0042  0835               	movf	strtod@s^(0+128),w
  4161  0043  0084               	movwf	4
  4162  0044  1383               	bcf	3,7	;select IRP bank0
  4163  0045  0800               	movf	0,w
  4164  0046  00AE               	movwf	strtod@eexp^(0+128)
  4165  0047  160A  118A  2352  120A  118A  	fcall	_isspace
  4166  004C  1C03               	btfss	3,0
  4167  004D  2857               	goto	l2706
  4168  004E  3001               	movlw	1
  4169  004F  1283               	bcf	3,5	;RP0=0, select bank0
  4170  0050  1303               	bcf	3,6	;RP1=0, select bank0
  4171  0051  00E5               	movwf	??_strtod
  4172  0052  0865               	movf	??_strtod,w
  4173  0053  1683               	bsf	3,5	;RP0=1, select bank1
  4174  0054  1303               	bcf	3,6	;RP1=0, select bank1
  4175  0055  07B5               	addwf	strtod@s^(0+128),f
  4176  0056  2840               	goto	l2704
  4177  0057                     l2706:	
  4178  0057  1683               	bsf	3,5	;RP0=1, select bank1
  4179  0058  1303               	bcf	3,6	;RP1=0, select bank1
  4180  0059  01AF               	clrf	strtod@flags^(0+128)
  4181  005A  302D               	movlw	45
  4182  005B  062E               	xorwf	strtod@eexp^(0+128),w
  4183  005C  1D03               	btfss	3,2
  4184  005D  2861               	goto	l2714
  4185  005E  01AF               	clrf	strtod@flags^(0+128)
  4186  005F  0AAF               	incf	strtod@flags^(0+128),f
  4187  0060  2865               	goto	l2716
  4188  0061                     l2714:	
  4189  0061  302B               	movlw	43
  4190  0062  062E               	xorwf	strtod@eexp^(0+128),w
  4191  0063  1D03               	btfss	3,2
  4192  0064  286D               	goto	l2718
  4193  0065                     l2716:	
  4194  0065  3001               	movlw	1
  4195  0066  1283               	bcf	3,5	;RP0=0, select bank0
  4196  0067  1303               	bcf	3,6	;RP1=0, select bank0
  4197  0068  00E5               	movwf	??_strtod
  4198  0069  0865               	movf	??_strtod,w
  4199  006A  1683               	bsf	3,5	;RP0=1, select bank1
  4200  006B  1303               	bcf	3,6	;RP1=0, select bank1
  4201  006C  07B5               	addwf	strtod@s^(0+128),f
  4202  006D                     l2718:	
  4203  006D  01AE               	clrf	strtod@eexp^(0+128)
  4204  006E  3000               	movlw	0
  4205  006F  00B4               	movwf	(strtod@_u+3)^(0+128)
  4206  0070  3000               	movlw	0
  4207  0071  00B3               	movwf	(strtod@_u+2)^(0+128)
  4208  0072  3000               	movlw	0
  4209  0073  00B2               	movwf	(strtod@_u+1)^(0+128)
  4210  0074  3000               	movlw	0
  4211  0075  00B1               	movwf	strtod@_u^(0+128)
  4212  0076  01B0               	clrf	strtod@expon^(0+128)
  4213  0077  2888               	goto	l2724
  4214  0078                     l2726:	
  4215  0078  0835               	movf	strtod@s^(0+128),w
  4216  0079  0084               	movwf	4
  4217  007A  302E               	movlw	46
  4218  007B  1383               	bcf	3,7	;select IRP bank0
  4219  007C  0600               	xorwf	0,w
  4220  007D  1D03               	btfss	3,2
  4221  007E  288A               	goto	l2732
  4222  007F  162F               	bsf	strtod@flags^(0+128),4
  4223  0080                     L3:	
  4224  0080  3001               	movlw	1
  4225  0081  1283               	bcf	3,5	;RP0=0, select bank0
  4226  0082  1303               	bcf	3,6	;RP1=0, select bank0
  4227  0083  00E5               	movwf	??_strtod
  4228  0084  0865               	movf	??_strtod,w
  4229  0085  1683               	bsf	3,5	;RP0=1, select bank1
  4230  0086  1303               	bcf	3,6	;RP1=0, select bank1
  4231  0087  07B5               	addwf	strtod@s^(0+128),f
  4232  0088                     l2724:	
  4233  0088  1E2F               	btfss	strtod@flags^(0+128),4
  4234  0089  2878               	goto	l2726
  4235  008A                     l2732:	
  4236  008A  0835               	movf	strtod@s^(0+128),w
  4237  008B  0084               	movwf	4
  4238  008C  1383               	bcf	3,7	;select IRP bank0
  4239  008D  0800               	movf	0,w
  4240  008E  160A  118A  232F  120A  118A  	fcall	_isdigit
  4241  0093  1C03               	btfss	3,0
  4242  0094  2950               	goto	l2752
  4243  0095  1683               	bsf	3,5	;RP0=1, select bank1
  4244  0096  1303               	bcf	3,6	;RP1=0, select bank1
  4245  0097  14AF               	bsf	strtod@flags^(0+128),1
  4246  0098  3005               	movlw	5
  4247  0099  00AC               	movwf	_strtod$639^(0+128)
  4248  009A  3000               	movlw	0
  4249  009B  00AD               	movwf	(_strtod$639^(0+128)+1)
  4250  009C  082E               	movf	strtod@eexp^(0+128),w
  4251  009D  1283               	bcf	3,5	;RP0=0, select bank0
  4252  009E  1303               	bcf	3,6	;RP1=0, select bank0
  4253  009F  00E5               	movwf	??_strtod
  4254  00A0  01E6               	clrf	??_strtod+1
  4255  00A1  1BE5               	btfsc	??_strtod,7
  4256  00A2  03E6               	decf	??_strtod+1,f
  4257  00A3  1683               	bsf	3,5	;RP0=1, select bank1
  4258  00A4  1303               	bcf	3,6	;RP1=0, select bank1
  4259  00A5  082C               	movf	_strtod$639^(0+128),w
  4260  00A6  3E03               	addlw	3
  4261  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  4262  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  4263  00A9  00E7               	movwf	??_strtod+2
  4264  00AA  1683               	bsf	3,5	;RP0=1, select bank1
  4265  00AB  1303               	bcf	3,6	;RP1=0, select bank1
  4266  00AC  082D               	movf	(_strtod$639+1)^(0+128),w
  4267  00AD  1803               	skipnc
  4268  00AE  3E01               	addlw	1
  4269  00AF  3E00               	addlw	0
  4270  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  4271  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  4272  00B2  00E8               	movwf	??_strtod+3
  4273  00B3  0866               	movf	??_strtod+1,w
  4274  00B4  0668               	xorwf	??_strtod+3,w
  4275  00B5  1D03               	skipz
  4276  00B6  28B9               	goto	u3315
  4277  00B7  0865               	movf	??_strtod,w
  4278  00B8  0667               	xorwf	??_strtod+2,w
  4279  00B9                     u3315:	
  4280  00B9  1903               	skipnz
  4281  00BA  2943               	goto	l466
  4282  00BB  1683               	bsf	3,5	;RP0=1, select bank1
  4283  00BC  1303               	bcf	3,6	;RP1=0, select bank1
  4284  00BD  1E2F               	btfss	strtod@flags^(0+128),4
  4285  00BE  28C7               	goto	l471
  4286  00BF  30FF               	movlw	255
  4287  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  4288  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  4289  00C2  00E5               	movwf	??_strtod
  4290  00C3  0865               	movf	??_strtod,w
  4291  00C4  1683               	bsf	3,5	;RP0=1, select bank1
  4292  00C5  1303               	bcf	3,6	;RP1=0, select bank1
  4293  00C6  07B0               	addwf	strtod@expon^(0+128),f
  4294  00C7                     l471:	
  4295  00C7  3001               	movlw	1
  4296  00C8  1283               	bcf	3,5	;RP0=0, select bank0
  4297  00C9  1303               	bcf	3,6	;RP1=0, select bank0
  4298  00CA  00E5               	movwf	??_strtod
  4299  00CB  0865               	movf	??_strtod,w
  4300  00CC  1683               	bsf	3,5	;RP0=1, select bank1
  4301  00CD  1303               	bcf	3,6	;RP1=0, select bank1
  4302  00CE  07AE               	addwf	strtod@eexp^(0+128),f
  4303  00CF  3000               	movlw	0
  4304  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  4305  00D1  1303               	bcf	3,6	;RP1=0, select bank0
  4306  00D2  00A5               	movwf	___lmul@multiplier+3
  4307  00D3  3000               	movlw	0
  4308  00D4  00A4               	movwf	___lmul@multiplier+2
  4309  00D5  3000               	movlw	0
  4310  00D6  00A3               	movwf	___lmul@multiplier+1
  4311  00D7  300A               	movlw	10
  4312  00D8  00A2               	movwf	___lmul@multiplier
  4313  00D9  1683               	bsf	3,5	;RP0=1, select bank1
  4314  00DA  1303               	bcf	3,6	;RP1=0, select bank1
  4315  00DB  0834               	movf	(strtod@_u+3)^(0+128),w
  4316  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  4317  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  4318  00DE  00A9               	movwf	___lmul@multiplicand+3
  4319  00DF  1683               	bsf	3,5	;RP0=1, select bank1
  4320  00E0  1303               	bcf	3,6	;RP1=0, select bank1
  4321  00E1  0833               	movf	(strtod@_u+2)^(0+128),w
  4322  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  4323  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  4324  00E4  00A8               	movwf	___lmul@multiplicand+2
  4325  00E5  1683               	bsf	3,5	;RP0=1, select bank1
  4326  00E6  1303               	bcf	3,6	;RP1=0, select bank1
  4327  00E7  0832               	movf	(strtod@_u+1)^(0+128),w
  4328  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  4329  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  4330  00EA  00A7               	movwf	___lmul@multiplicand+1
  4331  00EB  1683               	bsf	3,5	;RP0=1, select bank1
  4332  00EC  1303               	bcf	3,6	;RP1=0, select bank1
  4333  00ED  0831               	movf	strtod@_u^(0+128),w
  4334  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  4335  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  4336  00F0  00A6               	movwf	___lmul@multiplicand
  4337  00F1  160A  118A  259F  120A  118A  	fcall	___lmul
  4338  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  4339  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  4340  00F8  0825               	movf	?___lmul+3,w
  4341  00F9  1683               	bsf	3,5	;RP0=1, select bank1
  4342  00FA  1303               	bcf	3,6	;RP1=0, select bank1
  4343  00FB  00B4               	movwf	(strtod@_u+3)^(0+128)
  4344  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  4345  00FD  1303               	bcf	3,6	;RP1=0, select bank0
  4346  00FE  0824               	movf	?___lmul+2,w
  4347  00FF  1683               	bsf	3,5	;RP0=1, select bank1
  4348  0100  1303               	bcf	3,6	;RP1=0, select bank1
  4349  0101  00B3               	movwf	(strtod@_u+2)^(0+128)
  4350  0102  1283               	bcf	3,5	;RP0=0, select bank0
  4351  0103  1303               	bcf	3,6	;RP1=0, select bank0
  4352  0104  0823               	movf	?___lmul+1,w
  4353  0105  1683               	bsf	3,5	;RP0=1, select bank1
  4354  0106  1303               	bcf	3,6	;RP1=0, select bank1
  4355  0107  00B2               	movwf	(strtod@_u+1)^(0+128)
  4356  0108  1283               	bcf	3,5	;RP0=0, select bank0
  4357  0109  1303               	bcf	3,6	;RP1=0, select bank0
  4358  010A  0822               	movf	?___lmul,w
  4359  010B  1683               	bsf	3,5	;RP0=1, select bank1
  4360  010C  1303               	bcf	3,6	;RP1=0, select bank1
  4361  010D  00B1               	movwf	strtod@_u^(0+128)
  4362  010E  0835               	movf	strtod@s^(0+128),w
  4363  010F  0084               	movwf	4
  4364  0110  1383               	bcf	3,7	;select IRP bank0
  4365  0111  0800               	movf	0,w
  4366  0112  3ED0               	addlw	208
  4367  0113  1283               	bcf	3,5	;RP0=0, select bank0
  4368  0114  1303               	bcf	3,6	;RP1=0, select bank0
  4369  0115  00E5               	movwf	??_strtod
  4370  0116  01E6               	clrf	??_strtod+1
  4371  0117  01E7               	clrf	??_strtod+2
  4372  0118  01E8               	clrf	??_strtod+3
  4373  0119  0865               	movf	??_strtod,w
  4374  011A  1683               	bsf	3,5	;RP0=1, select bank1
  4375  011B  1303               	bcf	3,6	;RP1=0, select bank1
  4376  011C  07B1               	addwf	strtod@_u^(0+128),f
  4377  011D  1283               	bcf	3,5	;RP0=0, select bank0
  4378  011E  1303               	bcf	3,6	;RP1=0, select bank0
  4379  011F  0866               	movf	??_strtod+1,w
  4380  0120  1103               	clrz
  4381  0121  1803               	skipnc
  4382  0122  3E01               	addlw	1
  4383  0123  1903               	skipnz
  4384  0124  2928               	goto	u3331
  4385  0125  1683               	bsf	3,5	;RP0=1, select bank1
  4386  0126  1303               	bcf	3,6	;RP1=0, select bank1
  4387  0127  07B2               	addwf	(strtod@_u+1)^(0+128),f
  4388  0128                     u3331:	
  4389  0128  1283               	bcf	3,5	;RP0=0, select bank0
  4390  0129  1303               	bcf	3,6	;RP1=0, select bank0
  4391  012A  0867               	movf	??_strtod+2,w
  4392  012B  1103               	clrz
  4393  012C  1803               	skipnc
  4394  012D  3E01               	addlw	1
  4395  012E  1903               	skipnz
  4396  012F  2933               	goto	u3332
  4397  0130  1683               	bsf	3,5	;RP0=1, select bank1
  4398  0131  1303               	bcf	3,6	;RP1=0, select bank1
  4399  0132  07B3               	addwf	(strtod@_u+2)^(0+128),f
  4400  0133                     u3332:	
  4401  0133  1283               	bcf	3,5	;RP0=0, select bank0
  4402  0134  1303               	bcf	3,6	;RP1=0, select bank0
  4403  0135  0868               	movf	??_strtod+3,w
  4404  0136  1103               	clrz
  4405  0137  1803               	skipnc
  4406  0138  3E01               	addlw	1
  4407  0139  1903               	skipnz
  4408  013A  293E               	goto	u3333
  4409  013B  1683               	bsf	3,5	;RP0=1, select bank1
  4410  013C  1303               	bcf	3,6	;RP1=0, select bank1
  4411  013D  07B4               	addwf	(strtod@_u+3)^(0+128),f
  4412  013E                     u3333:	
  4413  013E  1283               	bcf	3,5	;RP0=0, select bank0
  4414  013F  1303               	bcf	3,6	;RP1=0, select bank0
  4415  0140  1683               	bsf	3,5	;RP0=1, select bank1
  4416  0141  1303               	bcf	3,6	;RP1=0, select bank1
  4417  0142  2880               	goto	L3
  4418  0143                     l466:	
  4419  0143  1683               	bsf	3,5	;RP0=1, select bank1
  4420  0144  1303               	bcf	3,6	;RP1=0, select bank1
  4421  0145  1A2F               	btfsc	strtod@flags^(0+128),4
  4422  0146  2880               	goto	L3
  4423  0147  3001               	movlw	1
  4424  0148  1283               	bcf	3,5	;RP0=0, select bank0
  4425  0149  1303               	bcf	3,6	;RP1=0, select bank0
  4426  014A  00E5               	movwf	??_strtod
  4427  014B  0865               	movf	??_strtod,w
  4428  014C  1683               	bsf	3,5	;RP0=1, select bank1
  4429  014D  1303               	bcf	3,6	;RP1=0, select bank1
  4430  014E  07B0               	addwf	strtod@expon^(0+128),f
  4431  014F  2880               	goto	L3
  4432  0150                     l2752:	
  4433  0150  1683               	bsf	3,5	;RP0=1, select bank1
  4434  0151  1303               	bcf	3,6	;RP1=0, select bank1
  4435  0152  01AE               	clrf	strtod@eexp^(0+128)
  4436  0153  0835               	movf	strtod@s^(0+128),w
  4437  0154  0084               	movwf	4
  4438  0155  3065               	movlw	101
  4439  0156  1383               	bcf	3,7	;select IRP bank0
  4440  0157  0600               	xorwf	0,w
  4441  0158  1903               	btfsc	3,2
  4442  0159  2960               	goto	l2758
  4443  015A  0835               	movf	strtod@s^(0+128),w
  4444  015B  0084               	movwf	4
  4445  015C  3045               	movlw	69
  4446  015D  0600               	xorwf	0,w
  4447  015E  1D03               	btfss	3,2
  4448  015F  29FE               	goto	l2792
  4449  0160                     l2758:	
  4450  0160  3001               	movlw	1
  4451  0161  1283               	bcf	3,5	;RP0=0, select bank0
  4452  0162  1303               	bcf	3,6	;RP1=0, select bank0
  4453  0163  00E5               	movwf	??_strtod
  4454  0164  0865               	movf	??_strtod,w
  4455  0165  1683               	bsf	3,5	;RP0=1, select bank1
  4456  0166  1303               	bcf	3,6	;RP1=0, select bank1
  4457  0167  07B5               	addwf	strtod@s^(0+128),f
  4458  0168  0835               	movf	strtod@s^(0+128),w
  4459  0169  0084               	movwf	4
  4460  016A  302D               	movlw	45
  4461  016B  0600               	xorwf	0,w
  4462  016C  1D03               	btfss	3,2
  4463  016D  2970               	goto	l2764
  4464  016E  15AF               	bsf	strtod@flags^(0+128),3
  4465  016F  2976               	goto	l2768
  4466  0170                     l2764:	
  4467  0170  0835               	movf	strtod@s^(0+128),w
  4468  0171  0084               	movwf	4
  4469  0172  302B               	movlw	43
  4470  0173  0600               	xorwf	0,w
  4471  0174  1D03               	btfss	3,2
  4472  0175  297E               	goto	l2770
  4473  0176                     l2768:	
  4474  0176  3001               	movlw	1
  4475  0177  1283               	bcf	3,5	;RP0=0, select bank0
  4476  0178  1303               	bcf	3,6	;RP1=0, select bank0
  4477  0179  00E5               	movwf	??_strtod
  4478  017A  0865               	movf	??_strtod,w
  4479  017B  1683               	bsf	3,5	;RP0=1, select bank1
  4480  017C  1303               	bcf	3,6	;RP1=0, select bank1
  4481  017D  07B5               	addwf	strtod@s^(0+128),f
  4482  017E                     l2770:	
  4483  017E  0835               	movf	strtod@s^(0+128),w
  4484  017F  0084               	movwf	4
  4485  0180  3030               	movlw	48
  4486  0181  0600               	xorwf	0,w
  4487  0182  1903               	btfsc	3,2
  4488  0183  2976               	goto	l2768
  4489  0184  0835               	movf	strtod@s^(0+128),w
  4490  0185  0084               	movwf	4
  4491  0186  0800               	movf	0,w
  4492  0187  160A  118A  232F  120A  118A  	fcall	_isdigit
  4493  018C  1C03               	btfss	3,0
  4494  018D  29F8               	goto	l2788
  4495  018E  1683               	bsf	3,5	;RP0=1, select bank1
  4496  018F  1303               	bcf	3,6	;RP1=0, select bank1
  4497  0190  0835               	movf	strtod@s^(0+128),w
  4498  0191  0084               	movwf	4
  4499  0192  1383               	bcf	3,7	;select IRP bank0
  4500  0193  0800               	movf	0,w
  4501  0194  3ED0               	addlw	208
  4502  0195  1283               	bcf	3,5	;RP0=0, select bank0
  4503  0196  1303               	bcf	3,6	;RP1=0, select bank0
  4504  0197  00E5               	movwf	??_strtod
  4505  0198  0865               	movf	??_strtod,w
  4506  0199  1683               	bsf	3,5	;RP0=1, select bank1
  4507  019A  1303               	bcf	3,6	;RP1=0, select bank1
  4508  019B  00AE               	movwf	strtod@eexp^(0+128)
  4509  019C  3001               	movlw	1
  4510  019D  1283               	bcf	3,5	;RP0=0, select bank0
  4511  019E  1303               	bcf	3,6	;RP1=0, select bank0
  4512  019F  00E5               	movwf	??_strtod
  4513  01A0  0865               	movf	??_strtod,w
  4514  01A1  1683               	bsf	3,5	;RP0=1, select bank1
  4515  01A2  1303               	bcf	3,6	;RP1=0, select bank1
  4516  01A3  07B5               	addwf	strtod@s^(0+128),f
  4517  01A4  0835               	movf	strtod@s^(0+128),w
  4518  01A5  0084               	movwf	4
  4519  01A6  0800               	movf	0,w
  4520  01A7  160A  118A  232F  120A  118A  	fcall	_isdigit
  4521  01AC  1C03               	btfss	3,0
  4522  01AD  29F8               	goto	l2788
  4523  01AE  1683               	bsf	3,5	;RP0=1, select bank1
  4524  01AF  1303               	bcf	3,6	;RP1=0, select bank1
  4525  01B0  0835               	movf	strtod@s^(0+128),w
  4526  01B1  0084               	movwf	4
  4527  01B2  300A               	movlw	10
  4528  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  4529  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  4530  01B5  00E5               	movwf	??_strtod
  4531  01B6  0865               	movf	??_strtod,w
  4532  01B7  00A2               	movwf	___bmul@multiplicand
  4533  01B8  1683               	bsf	3,5	;RP0=1, select bank1
  4534  01B9  1303               	bcf	3,6	;RP1=0, select bank1
  4535  01BA  082E               	movf	strtod@eexp^(0+128),w
  4536  01BB  160A  118A  233F  120A  118A  	fcall	___bmul
  4537  01C0  1383               	bcf	3,7	;select IRP bank0
  4538  01C1  0700               	addwf	0,w
  4539  01C2  3ED0               	addlw	-48
  4540  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  4541  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  4542  01C5  00E6               	movwf	??_strtod+1
  4543  01C6  0866               	movf	??_strtod+1,w
  4544  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  4545  01C8  1303               	bcf	3,6	;RP1=0, select bank1
  4546  01C9  00AE               	movwf	strtod@eexp^(0+128)
  4547  01CA  3001               	movlw	1
  4548  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  4549  01CC  1303               	bcf	3,6	;RP1=0, select bank0
  4550  01CD  00E5               	movwf	??_strtod
  4551  01CE  0865               	movf	??_strtod,w
  4552  01CF  1683               	bsf	3,5	;RP0=1, select bank1
  4553  01D0  1303               	bcf	3,6	;RP1=0, select bank1
  4554  01D1  07B5               	addwf	strtod@s^(0+128),f
  4555  01D2  0835               	movf	strtod@s^(0+128),w
  4556  01D3  0084               	movwf	4
  4557  01D4  0800               	movf	0,w
  4558  01D5  160A  118A  232F  120A  118A  	fcall	_isdigit
  4559  01DA  1C03               	btfss	3,0
  4560  01DB  29F8               	goto	l2788
  4561  01DC  1683               	bsf	3,5	;RP0=1, select bank1
  4562  01DD  1303               	bcf	3,6	;RP1=0, select bank1
  4563  01DE  0835               	movf	strtod@s^(0+128),w
  4564  01DF  0084               	movwf	4
  4565  01E0  300A               	movlw	10
  4566  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  4567  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  4568  01E3  00E5               	movwf	??_strtod
  4569  01E4  0865               	movf	??_strtod,w
  4570  01E5  00A2               	movwf	___bmul@multiplicand
  4571  01E6  1683               	bsf	3,5	;RP0=1, select bank1
  4572  01E7  1303               	bcf	3,6	;RP1=0, select bank1
  4573  01E8  082E               	movf	strtod@eexp^(0+128),w
  4574  01E9  160A  118A  233F  120A  118A  	fcall	___bmul
  4575  01EE  1383               	bcf	3,7	;select IRP bank0
  4576  01EF  0700               	addwf	0,w
  4577  01F0  3ED0               	addlw	-48
  4578  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  4579  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  4580  01F3  00E6               	movwf	??_strtod+1
  4581  01F4  0866               	movf	??_strtod+1,w
  4582  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  4583  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  4584  01F7  00AE               	movwf	strtod@eexp^(0+128)
  4585  01F8                     l2788:	
  4586  01F8  1683               	bsf	3,5	;RP0=1, select bank1
  4587  01F9  1303               	bcf	3,6	;RP1=0, select bank1
  4588  01FA  1DAF               	btfss	strtod@flags^(0+128),3
  4589  01FB  29FE               	goto	l2792
  4590  01FC  09AE               	comf	strtod@eexp^(0+128),f
  4591  01FD  0AAE               	incf	strtod@eexp^(0+128),f
  4592  01FE                     l2792:	
  4593  01FE  082E               	movf	strtod@eexp^(0+128),w
  4594  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  4595  0200  1303               	bcf	3,6	;RP1=0, select bank0
  4596  0201  00E5               	movwf	??_strtod
  4597  0202  0865               	movf	??_strtod,w
  4598  0203  1683               	bsf	3,5	;RP0=1, select bank1
  4599  0204  1303               	bcf	3,6	;RP1=0, select bank1
  4600  0205  07B0               	addwf	strtod@expon^(0+128),f
  4601  0206  1283               	bcf	3,5	;RP0=0, select bank0
  4602  0207  1303               	bcf	3,6	;RP1=0, select bank0
  4603  0208  0862               	movf	strtod@res,w
  4604  0209  1903               	btfsc	3,2
  4605  020A  2A18               	goto	l2800
  4606  020B  1683               	bsf	3,5	;RP0=1, select bank1
  4607  020C  1303               	bcf	3,6	;RP1=0, select bank1
  4608  020D  1CAF               	btfss	strtod@flags^(0+128),1
  4609  020E  2A18               	goto	l2800
  4610  020F  0835               	movf	strtod@s^(0+128),w
  4611  0210  1283               	bcf	3,5	;RP0=0, select bank0
  4612  0211  1303               	bcf	3,6	;RP1=0, select bank0
  4613  0212  00E5               	movwf	??_strtod
  4614  0213  0862               	movf	strtod@res,w
  4615  0214  0084               	movwf	4
  4616  0215  0865               	movf	??_strtod,w
  4617  0216  1383               	bcf	3,7	;select IRP bank0
  4618  0217  0080               	movwf	0
  4619  0218                     l2800:	
  4620  0218  1683               	bsf	3,5	;RP0=1, select bank1
  4621  0219  1303               	bcf	3,6	;RP1=0, select bank1
  4622  021A  0834               	movf	(strtod@_u+3)^(0+128),w
  4623  021B  1283               	bcf	3,5	;RP0=0, select bank0
  4624  021C  1303               	bcf	3,6	;RP1=0, select bank0
  4625  021D  00AD               	movwf	___altoft@c+3
  4626  021E  1683               	bsf	3,5	;RP0=1, select bank1
  4627  021F  1303               	bcf	3,6	;RP1=0, select bank1
  4628  0220  0833               	movf	(strtod@_u+2)^(0+128),w
  4629  0221  1283               	bcf	3,5	;RP0=0, select bank0
  4630  0222  1303               	bcf	3,6	;RP1=0, select bank0
  4631  0223  00AC               	movwf	___altoft@c+2
  4632  0224  1683               	bsf	3,5	;RP0=1, select bank1
  4633  0225  1303               	bcf	3,6	;RP1=0, select bank1
  4634  0226  0832               	movf	(strtod@_u+1)^(0+128),w
  4635  0227  1283               	bcf	3,5	;RP0=0, select bank0
  4636  0228  1303               	bcf	3,6	;RP1=0, select bank0
  4637  0229  00AB               	movwf	___altoft@c+1
  4638  022A  1683               	bsf	3,5	;RP0=1, select bank1
  4639  022B  1303               	bcf	3,6	;RP1=0, select bank1
  4640  022C  0831               	movf	strtod@_u^(0+128),w
  4641  022D  1283               	bcf	3,5	;RP0=0, select bank0
  4642  022E  1303               	bcf	3,6	;RP1=0, select bank0
  4643  022F  00AA               	movwf	___altoft@c
  4644  0230  160A  118A  25E0  120A  118A  	fcall	___altoft
  4645  0235  1283               	bcf	3,5	;RP0=0, select bank0
  4646  0236  1303               	bcf	3,6	;RP1=0, select bank0
  4647  0237  082A               	movf	?___altoft,w
  4648  0238  1683               	bsf	3,5	;RP0=1, select bank1
  4649  0239  1303               	bcf	3,6	;RP1=0, select bank1
  4650  023A  00B1               	movwf	strtod@_u^(0+128)
  4651  023B  1283               	bcf	3,5	;RP0=0, select bank0
  4652  023C  1303               	bcf	3,6	;RP1=0, select bank0
  4653  023D  082B               	movf	?___altoft+1,w
  4654  023E  1683               	bsf	3,5	;RP0=1, select bank1
  4655  023F  1303               	bcf	3,6	;RP1=0, select bank1
  4656  0240  00B2               	movwf	(strtod@_u+1)^(0+128)
  4657  0241  1283               	bcf	3,5	;RP0=0, select bank0
  4658  0242  1303               	bcf	3,6	;RP1=0, select bank0
  4659  0243  082C               	movf	?___altoft+2,w
  4660  0244  1683               	bsf	3,5	;RP0=1, select bank1
  4661  0245  1303               	bcf	3,6	;RP1=0, select bank1
  4662  0246  00B3               	movwf	(strtod@_u+2)^(0+128)
  4663  0247  0833               	movf	(strtod@_u+2)^(0+128),w
  4664  0248  0432               	iorwf	(strtod@_u+1)^(0+128),w
  4665  0249  0431               	iorwf	strtod@_u^(0+128),w
  4666  024A  1D03               	skipz
  4667  024B  2A55               	goto	l488
  4668  024C  3000               	movlw	0
  4669  024D  1283               	bcf	3,5	;RP0=0, select bank0
  4670  024E  1303               	bcf	3,6	;RP1=0, select bank0
  4671  024F  00E2               	movwf	?_strtod
  4672  0250  3000               	movlw	0
  4673  0251  00E3               	movwf	?_strtod+1
  4674  0252  3000               	movlw	0
  4675  0253  00E4               	movwf	?_strtod+2
  4676  0254  0008               	return
  4677  0255                     l488:	
  4678  0255  1FB0               	btfss	strtod@expon^(0+128),7
  4679  0256  2B31               	goto	l2846
  4680  0257  09B0               	comf	strtod@expon^(0+128),f
  4681  0258  0AB0               	incf	strtod@expon^(0+128),f
  4682  0259                     l2814:	
  4683  0259  0830               	movf	strtod@expon^(0+128),w
  4684  025A  3A80               	xorlw	128
  4685  025B  3E76               	addlw	-138
  4686  025C  1C03               	btfss	3,0
  4687  025D  2AD1               	goto	l2820
  4688  025E  3003               	movlw	3
  4689  025F  1283               	bcf	3,5	;RP0=0, select bank0
  4690  0260  1303               	bcf	3,6	;RP1=0, select bank0
  4691  0261  00D2               	movwf	___ftdiv@f2
  4692  0262  3015               	movlw	21
  4693  0263  00D3               	movwf	___ftdiv@f2+1
  4694  0264  3050               	movlw	80
  4695  0265  00D4               	movwf	___ftdiv@f2+2
  4696  0266  1683               	bsf	3,5	;RP0=1, select bank1
  4697  0267  1303               	bcf	3,6	;RP1=0, select bank1
  4698  0268  0831               	movf	strtod@_u^(0+128),w
  4699  0269  1283               	bcf	3,5	;RP0=0, select bank0
  4700  026A  1303               	bcf	3,6	;RP1=0, select bank0
  4701  026B  00D5               	movwf	___ftdiv@f1
  4702  026C  1683               	bsf	3,5	;RP0=1, select bank1
  4703  026D  1303               	bcf	3,6	;RP1=0, select bank1
  4704  026E  0832               	movf	(strtod@_u+1)^(0+128),w
  4705  026F  1283               	bcf	3,5	;RP0=0, select bank0
  4706  0270  1303               	bcf	3,6	;RP1=0, select bank0
  4707  0271  00D6               	movwf	___ftdiv@f1+1
  4708  0272  1683               	bsf	3,5	;RP0=1, select bank1
  4709  0273  1303               	bcf	3,6	;RP1=0, select bank1
  4710  0274  0833               	movf	(strtod@_u+2)^(0+128),w
  4711  0275  1283               	bcf	3,5	;RP0=0, select bank0
  4712  0276  1303               	bcf	3,6	;RP1=0, select bank0
  4713  0277  00D7               	movwf	___ftdiv@f1+2
  4714  0278  120A  158A  21C4  120A  118A  	fcall	___ftdiv
  4715  027D  1283               	bcf	3,5	;RP0=0, select bank0
  4716  027E  1303               	bcf	3,6	;RP1=0, select bank0
  4717  027F  0852               	movf	?___ftdiv,w
  4718  0280  1683               	bsf	3,5	;RP0=1, select bank1
  4719  0281  1303               	bcf	3,6	;RP1=0, select bank1
  4720  0282  00B1               	movwf	strtod@_u^(0+128)
  4721  0283  1283               	bcf	3,5	;RP0=0, select bank0
  4722  0284  1303               	bcf	3,6	;RP1=0, select bank0
  4723  0285  0853               	movf	?___ftdiv+1,w
  4724  0286  1683               	bsf	3,5	;RP0=1, select bank1
  4725  0287  1303               	bcf	3,6	;RP1=0, select bank1
  4726  0288  00B2               	movwf	(strtod@_u+1)^(0+128)
  4727  0289  1283               	bcf	3,5	;RP0=0, select bank0
  4728  028A  1303               	bcf	3,6	;RP1=0, select bank0
  4729  028B  0854               	movf	?___ftdiv+2,w
  4730  028C  1683               	bsf	3,5	;RP0=1, select bank1
  4731  028D  1303               	bcf	3,6	;RP1=0, select bank1
  4732  028E  00B3               	movwf	(strtod@_u+2)^(0+128)
  4733  028F  30F6               	movlw	246
  4734  0290  1283               	bcf	3,5	;RP0=0, select bank0
  4735  0291  1303               	bcf	3,6	;RP1=0, select bank0
  4736  0292  00E5               	movwf	??_strtod
  4737  0293  0865               	movf	??_strtod,w
  4738  0294  1683               	bsf	3,5	;RP0=1, select bank1
  4739  0295  1303               	bcf	3,6	;RP1=0, select bank1
  4740  0296  07B0               	addwf	strtod@expon^(0+128),f
  4741  0297  2A59               	goto	l2814
  4742  0298                     l2816:	
  4743  0298  3000               	movlw	0
  4744  0299  1283               	bcf	3,5	;RP0=0, select bank0
  4745  029A  1303               	bcf	3,6	;RP1=0, select bank0
  4746  029B  00D2               	movwf	___ftdiv@f2
  4747  029C  3020               	movlw	32
  4748  029D  00D3               	movwf	___ftdiv@f2+1
  4749  029E  3041               	movlw	65
  4750  029F  00D4               	movwf	___ftdiv@f2+2
  4751  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  4752  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  4753  02A2  0831               	movf	strtod@_u^(0+128),w
  4754  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  4755  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  4756  02A5  00D5               	movwf	___ftdiv@f1
  4757  02A6  1683               	bsf	3,5	;RP0=1, select bank1
  4758  02A7  1303               	bcf	3,6	;RP1=0, select bank1
  4759  02A8  0832               	movf	(strtod@_u+1)^(0+128),w
  4760  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  4761  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  4762  02AB  00D6               	movwf	___ftdiv@f1+1
  4763  02AC  1683               	bsf	3,5	;RP0=1, select bank1
  4764  02AD  1303               	bcf	3,6	;RP1=0, select bank1
  4765  02AE  0833               	movf	(strtod@_u+2)^(0+128),w
  4766  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  4767  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  4768  02B1  00D7               	movwf	___ftdiv@f1+2
  4769  02B2  120A  158A  21C4  120A  118A  	fcall	___ftdiv
  4770  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  4771  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  4772  02B9  0852               	movf	?___ftdiv,w
  4773  02BA  1683               	bsf	3,5	;RP0=1, select bank1
  4774  02BB  1303               	bcf	3,6	;RP1=0, select bank1
  4775  02BC  00B1               	movwf	strtod@_u^(0+128)
  4776  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  4777  02BE  1303               	bcf	3,6	;RP1=0, select bank0
  4778  02BF  0853               	movf	?___ftdiv+1,w
  4779  02C0  1683               	bsf	3,5	;RP0=1, select bank1
  4780  02C1  1303               	bcf	3,6	;RP1=0, select bank1
  4781  02C2  00B2               	movwf	(strtod@_u+1)^(0+128)
  4782  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  4783  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  4784  02C5  0854               	movf	?___ftdiv+2,w
  4785  02C6  1683               	bsf	3,5	;RP0=1, select bank1
  4786  02C7  1303               	bcf	3,6	;RP1=0, select bank1
  4787  02C8  00B3               	movwf	(strtod@_u+2)^(0+128)
  4788  02C9  30FF               	movlw	255
  4789  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  4790  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  4791  02CC  00E5               	movwf	??_strtod
  4792  02CD  0865               	movf	??_strtod,w
  4793  02CE  1683               	bsf	3,5	;RP0=1, select bank1
  4794  02CF  1303               	bcf	3,6	;RP1=0, select bank1
  4795  02D0  07B0               	addwf	strtod@expon^(0+128),f
  4796  02D1                     l2820:	
  4797  02D1  0830               	movf	strtod@expon^(0+128),w
  4798  02D2  1D03               	btfss	3,2
  4799  02D3  2A98               	goto	l2816
  4800  02D4  3000               	movlw	0
  4801  02D5  00A0               	movwf	_strtod$640^(0+128)
  4802  02D6  3080               	movlw	128
  4803  02D7  00A1               	movwf	(_strtod$640+1)^(0+128)
  4804  02D8  3000               	movlw	0
  4805  02D9  00A2               	movwf	(_strtod$640+2)^(0+128)
  4806  02DA  0831               	movf	strtod@_u^(0+128),w
  4807  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  4808  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  4809  02DD  00D2               	movwf	___ftge@ff1
  4810  02DE  1683               	bsf	3,5	;RP0=1, select bank1
  4811  02DF  1303               	bcf	3,6	;RP1=0, select bank1
  4812  02E0  0832               	movf	(strtod@_u+1)^(0+128),w
  4813  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  4814  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  4815  02E3  00D3               	movwf	___ftge@ff1+1
  4816  02E4  1683               	bsf	3,5	;RP0=1, select bank1
  4817  02E5  1303               	bcf	3,6	;RP1=0, select bank1
  4818  02E6  0833               	movf	(strtod@_u+2)^(0+128),w
  4819  02E7  1283               	bcf	3,5	;RP0=0, select bank0
  4820  02E8  1303               	bcf	3,6	;RP1=0, select bank0
  4821  02E9  00D4               	movwf	___ftge@ff1+2
  4822  02EA  1683               	bsf	3,5	;RP0=1, select bank1
  4823  02EB  1303               	bcf	3,6	;RP1=0, select bank1
  4824  02EC  0820               	movf	_strtod$640^(0+128),w
  4825  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  4826  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  4827  02EF  00D5               	movwf	___ftge@ff2
  4828  02F0  1683               	bsf	3,5	;RP0=1, select bank1
  4829  02F1  1303               	bcf	3,6	;RP1=0, select bank1
  4830  02F2  0821               	movf	(_strtod$640+1)^(0+128),w
  4831  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  4832  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  4833  02F5  00D6               	movwf	___ftge@ff2+1
  4834  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  4835  02F7  1303               	bcf	3,6	;RP1=0, select bank1
  4836  02F8  0822               	movf	(_strtod$640+2)^(0+128),w
  4837  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  4838  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  4839  02FB  00D7               	movwf	___ftge@ff2+2
  4840  02FC  160A  118A  26CB  120A  118A  	fcall	___ftge
  4841  0301  1803               	btfsc	3,0
  4842  0302  2C10               	goto	l511
  4843  0303  1683               	bsf	3,5	;RP0=1, select bank1
  4844  0304  1303               	bcf	3,6	;RP1=0, select bank1
  4845  0305  1C2F               	btfss	strtod@flags^(0+128),0
  4846  0306  2B29               	goto	l2842
  4847  0307  3000               	movlw	0
  4848  0308  00A3               	movwf	_strtod$641^(0+128)
  4849  0309  3080               	movlw	128
  4850  030A  00A4               	movwf	(_strtod$641+1)^(0+128)
  4851  030B  3000               	movlw	0
  4852  030C  00A5               	movwf	(_strtod$641+2)^(0+128)
  4853  030D  0823               	movf	_strtod$641^(0+128),w
  4854  030E  1283               	bcf	3,5	;RP0=0, select bank0
  4855  030F  1303               	bcf	3,6	;RP1=0, select bank0
  4856  0310  00B2               	movwf	___ftneg@f1
  4857  0311  1683               	bsf	3,5	;RP0=1, select bank1
  4858  0312  1303               	bcf	3,6	;RP1=0, select bank1
  4859  0313  0824               	movf	(_strtod$641+1)^(0+128),w
  4860  0314  1283               	bcf	3,5	;RP0=0, select bank0
  4861  0315  1303               	bcf	3,6	;RP1=0, select bank0
  4862  0316  00B3               	movwf	___ftneg@f1+1
  4863  0317  1683               	bsf	3,5	;RP0=1, select bank1
  4864  0318  1303               	bcf	3,6	;RP1=0, select bank1
  4865  0319  0825               	movf	(_strtod$641+2)^(0+128),w
  4866  031A  1283               	bcf	3,5	;RP0=0, select bank0
  4867  031B  1303               	bcf	3,6	;RP1=0, select bank0
  4868  031C  00B4               	movwf	___ftneg@f1+2
  4869  031D  160A  118A  231A   	fcall	___ftneg
  4870  0320  1283               	bcf	3,5	;RP0=0, select bank0
  4871  0321  1303               	bcf	3,6	;RP1=0, select bank0
  4872  0322  0832               	movf	?___ftneg,w
  4873  0323  00E2               	movwf	?_strtod
  4874  0324  0833               	movf	?___ftneg+1,w
  4875  0325  00E3               	movwf	?_strtod+1
  4876  0326  0834               	movf	?___ftneg+2,w
  4877  0327  00E4               	movwf	?_strtod+2
  4878  0328  0008               	return
  4879  0329                     l2842:	
  4880  0329  3000               	movlw	0
  4881  032A  1283               	bcf	3,5	;RP0=0, select bank0
  4882  032B  00E2               	movwf	?_strtod
  4883  032C  3080               	movlw	128
  4884  032D  00E3               	movwf	?_strtod+1
  4885  032E  3000               	movlw	0
  4886  032F  00E4               	movwf	?_strtod+2
  4887  0330  0008               	return
  4888  0331                     l2846:	
  4889  0331  1683               	bsf	3,5	;RP0=1, select bank1
  4890  0332  1303               	bcf	3,6	;RP1=0, select bank1
  4891  0333  0830               	movf	strtod@expon^(0+128),w
  4892  0334  3A80               	xorlw	128
  4893  0335  3E7F               	addlw	-129
  4894  0336  1803               	btfsc	3,0
  4895  0337  2B72               	goto	l2854
  4896  0338  2C10               	goto	l511
  4897  0339                     l2850:	
  4898  0339  3003               	movlw	3
  4899  033A  1283               	bcf	3,5	;RP0=0, select bank0
  4900  033B  1303               	bcf	3,6	;RP1=0, select bank0
  4901  033C  00C2               	movwf	___ftmul@f1
  4902  033D  3015               	movlw	21
  4903  033E  00C3               	movwf	___ftmul@f1+1
  4904  033F  3050               	movlw	80
  4905  0340  00C4               	movwf	___ftmul@f1+2
  4906  0341  1683               	bsf	3,5	;RP0=1, select bank1
  4907  0342  1303               	bcf	3,6	;RP1=0, select bank1
  4908  0343  0831               	movf	strtod@_u^(0+128),w
  4909  0344  1283               	bcf	3,5	;RP0=0, select bank0
  4910  0345  1303               	bcf	3,6	;RP1=0, select bank0
  4911  0346  00C5               	movwf	___ftmul@f2
  4912  0347  1683               	bsf	3,5	;RP0=1, select bank1
  4913  0348  1303               	bcf	3,6	;RP1=0, select bank1
  4914  0349  0832               	movf	(strtod@_u+1)^(0+128),w
  4915  034A  1283               	bcf	3,5	;RP0=0, select bank0
  4916  034B  1303               	bcf	3,6	;RP1=0, select bank0
  4917  034C  00C6               	movwf	___ftmul@f2+1
  4918  034D  1683               	bsf	3,5	;RP0=1, select bank1
  4919  034E  1303               	bcf	3,6	;RP1=0, select bank1
  4920  034F  0833               	movf	(strtod@_u+2)^(0+128),w
  4921  0350  1283               	bcf	3,5	;RP0=0, select bank0
  4922  0351  1303               	bcf	3,6	;RP1=0, select bank0
  4923  0352  00C7               	movwf	___ftmul@f2+2
  4924  0353  120A  158A  233E  120A  118A  	fcall	___ftmul
  4925  0358  1283               	bcf	3,5	;RP0=0, select bank0
  4926  0359  1303               	bcf	3,6	;RP1=0, select bank0
  4927  035A  0842               	movf	?___ftmul,w
  4928  035B  1683               	bsf	3,5	;RP0=1, select bank1
  4929  035C  1303               	bcf	3,6	;RP1=0, select bank1
  4930  035D  00B1               	movwf	strtod@_u^(0+128)
  4931  035E  1283               	bcf	3,5	;RP0=0, select bank0
  4932  035F  1303               	bcf	3,6	;RP1=0, select bank0
  4933  0360  0843               	movf	?___ftmul+1,w
  4934  0361  1683               	bsf	3,5	;RP0=1, select bank1
  4935  0362  1303               	bcf	3,6	;RP1=0, select bank1
  4936  0363  00B2               	movwf	(strtod@_u+1)^(0+128)
  4937  0364  1283               	bcf	3,5	;RP0=0, select bank0
  4938  0365  1303               	bcf	3,6	;RP1=0, select bank0
  4939  0366  0844               	movf	?___ftmul+2,w
  4940  0367  1683               	bsf	3,5	;RP0=1, select bank1
  4941  0368  1303               	bcf	3,6	;RP1=0, select bank1
  4942  0369  00B3               	movwf	(strtod@_u+2)^(0+128)
  4943  036A  30F6               	movlw	246
  4944  036B  1283               	bcf	3,5	;RP0=0, select bank0
  4945  036C  1303               	bcf	3,6	;RP1=0, select bank0
  4946  036D  00E5               	movwf	??_strtod
  4947  036E  0865               	movf	??_strtod,w
  4948  036F  1683               	bsf	3,5	;RP0=1, select bank1
  4949  0370  1303               	bcf	3,6	;RP1=0, select bank1
  4950  0371  07B0               	addwf	strtod@expon^(0+128),f
  4951  0372                     l2854:	
  4952  0372  300A               	movlw	10
  4953  0373  0230               	subwf	strtod@expon^(0+128),w
  4954  0374  1C03               	btfss	3,0
  4955  0375  2BB0               	goto	l2860
  4956  0376  2B39               	goto	l2850
  4957  0377                     l2856:	
  4958  0377  3000               	movlw	0
  4959  0378  1283               	bcf	3,5	;RP0=0, select bank0
  4960  0379  1303               	bcf	3,6	;RP1=0, select bank0
  4961  037A  00C2               	movwf	___ftmul@f1
  4962  037B  3020               	movlw	32
  4963  037C  00C3               	movwf	___ftmul@f1+1
  4964  037D  3041               	movlw	65
  4965  037E  00C4               	movwf	___ftmul@f1+2
  4966  037F  1683               	bsf	3,5	;RP0=1, select bank1
  4967  0380  1303               	bcf	3,6	;RP1=0, select bank1
  4968  0381  0831               	movf	strtod@_u^(0+128),w
  4969  0382  1283               	bcf	3,5	;RP0=0, select bank0
  4970  0383  1303               	bcf	3,6	;RP1=0, select bank0
  4971  0384  00C5               	movwf	___ftmul@f2
  4972  0385  1683               	bsf	3,5	;RP0=1, select bank1
  4973  0386  1303               	bcf	3,6	;RP1=0, select bank1
  4974  0387  0832               	movf	(strtod@_u+1)^(0+128),w
  4975  0388  1283               	bcf	3,5	;RP0=0, select bank0
  4976  0389  1303               	bcf	3,6	;RP1=0, select bank0
  4977  038A  00C6               	movwf	___ftmul@f2+1
  4978  038B  1683               	bsf	3,5	;RP0=1, select bank1
  4979  038C  1303               	bcf	3,6	;RP1=0, select bank1
  4980  038D  0833               	movf	(strtod@_u+2)^(0+128),w
  4981  038E  1283               	bcf	3,5	;RP0=0, select bank0
  4982  038F  1303               	bcf	3,6	;RP1=0, select bank0
  4983  0390  00C7               	movwf	___ftmul@f2+2
  4984  0391  120A  158A  233E  120A  118A  	fcall	___ftmul
  4985  0396  1283               	bcf	3,5	;RP0=0, select bank0
  4986  0397  1303               	bcf	3,6	;RP1=0, select bank0
  4987  0398  0842               	movf	?___ftmul,w
  4988  0399  1683               	bsf	3,5	;RP0=1, select bank1
  4989  039A  1303               	bcf	3,6	;RP1=0, select bank1
  4990  039B  00B1               	movwf	strtod@_u^(0+128)
  4991  039C  1283               	bcf	3,5	;RP0=0, select bank0
  4992  039D  1303               	bcf	3,6	;RP1=0, select bank0
  4993  039E  0843               	movf	?___ftmul+1,w
  4994  039F  1683               	bsf	3,5	;RP0=1, select bank1
  4995  03A0  1303               	bcf	3,6	;RP1=0, select bank1
  4996  03A1  00B2               	movwf	(strtod@_u+1)^(0+128)
  4997  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  4998  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  4999  03A4  0844               	movf	?___ftmul+2,w
  5000  03A5  1683               	bsf	3,5	;RP0=1, select bank1
  5001  03A6  1303               	bcf	3,6	;RP1=0, select bank1
  5002  03A7  00B3               	movwf	(strtod@_u+2)^(0+128)
  5003  03A8  30FF               	movlw	255
  5004  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  5005  03AA  1303               	bcf	3,6	;RP1=0, select bank0
  5006  03AB  00E5               	movwf	??_strtod
  5007  03AC  0865               	movf	??_strtod,w
  5008  03AD  1683               	bsf	3,5	;RP0=1, select bank1
  5009  03AE  1303               	bcf	3,6	;RP1=0, select bank1
  5010  03AF  07B0               	addwf	strtod@expon^(0+128),f
  5011  03B0                     l2860:	
  5012  03B0  0830               	movf	strtod@expon^(0+128),w
  5013  03B1  1D03               	btfss	3,2
  5014  03B2  2B77               	goto	l2856
  5015  03B3  30FF               	movlw	255
  5016  03B4  00A6               	movwf	_strtod$642^(0+128)
  5017  03B5  307F               	movlw	127
  5018  03B6  00A7               	movwf	(_strtod$642+1)^(0+128)
  5019  03B7  307F               	movlw	127
  5020  03B8  00A8               	movwf	(_strtod$642+2)^(0+128)
  5021  03B9  0826               	movf	_strtod$642^(0+128),w
  5022  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  5023  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  5024  03BC  00D2               	movwf	___ftge@ff1
  5025  03BD  1683               	bsf	3,5	;RP0=1, select bank1
  5026  03BE  1303               	bcf	3,6	;RP1=0, select bank1
  5027  03BF  0827               	movf	(_strtod$642+1)^(0+128),w
  5028  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  5029  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  5030  03C2  00D3               	movwf	___ftge@ff1+1
  5031  03C3  1683               	bsf	3,5	;RP0=1, select bank1
  5032  03C4  1303               	bcf	3,6	;RP1=0, select bank1
  5033  03C5  0828               	movf	(_strtod$642+2)^(0+128),w
  5034  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  5035  03C7  1303               	bcf	3,6	;RP1=0, select bank0
  5036  03C8  00D4               	movwf	___ftge@ff1+2
  5037  03C9  1683               	bsf	3,5	;RP0=1, select bank1
  5038  03CA  1303               	bcf	3,6	;RP1=0, select bank1
  5039  03CB  0831               	movf	strtod@_u^(0+128),w
  5040  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  5041  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  5042  03CE  00D5               	movwf	___ftge@ff2
  5043  03CF  1683               	bsf	3,5	;RP0=1, select bank1
  5044  03D0  1303               	bcf	3,6	;RP1=0, select bank1
  5045  03D1  0832               	movf	(strtod@_u+1)^(0+128),w
  5046  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  5047  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  5048  03D4  00D6               	movwf	___ftge@ff2+1
  5049  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  5050  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  5051  03D7  0833               	movf	(strtod@_u+2)^(0+128),w
  5052  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  5053  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  5054  03DA  00D7               	movwf	___ftge@ff2+2
  5055  03DB  160A  118A  26CB  120A  118A  	fcall	___ftge
  5056  03E0  1803               	btfsc	3,0
  5057  03E1  2C10               	goto	l511
  5058  03E2  1683               	bsf	3,5	;RP0=1, select bank1
  5059  03E3  1303               	bcf	3,6	;RP1=0, select bank1
  5060  03E4  1C2F               	btfss	strtod@flags^(0+128),0
  5061  03E5  2C08               	goto	l2882
  5062  03E6  3000               	movlw	0
  5063  03E7  00A9               	movwf	_strtod$643^(0+128)
  5064  03E8  3080               	movlw	128
  5065  03E9  00AA               	movwf	(_strtod$643+1)^(0+128)
  5066  03EA  3000               	movlw	0
  5067  03EB  00AB               	movwf	(_strtod$643+2)^(0+128)
  5068  03EC  0829               	movf	_strtod$643^(0+128),w
  5069  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  5070  03EE  1303               	bcf	3,6	;RP1=0, select bank0
  5071  03EF  00B2               	movwf	___ftneg@f1
  5072  03F0  1683               	bsf	3,5	;RP0=1, select bank1
  5073  03F1  1303               	bcf	3,6	;RP1=0, select bank1
  5074  03F2  082A               	movf	(_strtod$643+1)^(0+128),w
  5075  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  5076  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  5077  03F5  00B3               	movwf	___ftneg@f1+1
  5078  03F6  1683               	bsf	3,5	;RP0=1, select bank1
  5079  03F7  1303               	bcf	3,6	;RP1=0, select bank1
  5080  03F8  082B               	movf	(_strtod$643+2)^(0+128),w
  5081  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  5082  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  5083  03FB  00B4               	movwf	___ftneg@f1+2
  5084  03FC  160A  118A  231A   	fcall	___ftneg
  5085  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  5086  0400  1303               	bcf	3,6	;RP1=0, select bank0
  5087  0401  0832               	movf	?___ftneg,w
  5088  0402  00E2               	movwf	?_strtod
  5089  0403  0833               	movf	?___ftneg+1,w
  5090  0404  00E3               	movwf	?_strtod+1
  5091  0405  0834               	movf	?___ftneg+2,w
  5092  0406  00E4               	movwf	?_strtod+2
  5093  0407  0008               	return
  5094  0408                     l2882:	
  5095  0408  3000               	movlw	0
  5096  0409  1283               	bcf	3,5	;RP0=0, select bank0
  5097  040A  00E2               	movwf	?_strtod
  5098  040B  3080               	movlw	128
  5099  040C  00E3               	movwf	?_strtod+1
  5100  040D  3000               	movlw	0
  5101  040E  00E4               	movwf	?_strtod+2
  5102  040F  0008               	return
  5103  0410                     l511:	
  5104  0410  1683               	bsf	3,5	;RP0=1, select bank1
  5105  0411  1303               	bcf	3,6	;RP1=0, select bank1
  5106  0412  1C2F               	btfss	strtod@flags^(0+128),0
  5107  0413  2C39               	goto	l2888
  5108  0414  0831               	movf	strtod@_u^(0+128),w
  5109  0415  1283               	bcf	3,5	;RP0=0, select bank0
  5110  0416  1303               	bcf	3,6	;RP1=0, select bank0
  5111  0417  00B2               	movwf	___ftneg@f1
  5112  0418  1683               	bsf	3,5	;RP0=1, select bank1
  5113  0419  1303               	bcf	3,6	;RP1=0, select bank1
  5114  041A  0832               	movf	(strtod@_u+1)^(0+128),w
  5115  041B  1283               	bcf	3,5	;RP0=0, select bank0
  5116  041C  1303               	bcf	3,6	;RP1=0, select bank0
  5117  041D  00B3               	movwf	___ftneg@f1+1
  5118  041E  1683               	bsf	3,5	;RP0=1, select bank1
  5119  041F  1303               	bcf	3,6	;RP1=0, select bank1
  5120  0420  0833               	movf	(strtod@_u+2)^(0+128),w
  5121  0421  1283               	bcf	3,5	;RP0=0, select bank0
  5122  0422  1303               	bcf	3,6	;RP1=0, select bank0
  5123  0423  00B4               	movwf	___ftneg@f1+2
  5124  0424  160A  118A  231A   	fcall	___ftneg
  5125  0427  1283               	bcf	3,5	;RP0=0, select bank0
  5126  0428  1303               	bcf	3,6	;RP1=0, select bank0
  5127  0429  0832               	movf	?___ftneg,w
  5128  042A  1683               	bsf	3,5	;RP0=1, select bank1
  5129  042B  1303               	bcf	3,6	;RP1=0, select bank1
  5130  042C  00B1               	movwf	strtod@_u^(0+128)
  5131  042D  1283               	bcf	3,5	;RP0=0, select bank0
  5132  042E  1303               	bcf	3,6	;RP1=0, select bank0
  5133  042F  0833               	movf	?___ftneg+1,w
  5134  0430  1683               	bsf	3,5	;RP0=1, select bank1
  5135  0431  1303               	bcf	3,6	;RP1=0, select bank1
  5136  0432  00B2               	movwf	(strtod@_u+1)^(0+128)
  5137  0433  1283               	bcf	3,5	;RP0=0, select bank0
  5138  0434  1303               	bcf	3,6	;RP1=0, select bank0
  5139  0435  0834               	movf	?___ftneg+2,w
  5140  0436  1683               	bsf	3,5	;RP0=1, select bank1
  5141  0437  1303               	bcf	3,6	;RP1=0, select bank1
  5142  0438  00B3               	movwf	(strtod@_u+2)^(0+128)
  5143  0439                     l2888:	
  5144  0439  0831               	movf	strtod@_u^(0+128),w
  5145  043A  1283               	bcf	3,5	;RP0=0, select bank0
  5146  043B  1303               	bcf	3,6	;RP1=0, select bank0
  5147  043C  00E2               	movwf	?_strtod
  5148  043D  1683               	bsf	3,5	;RP0=1, select bank1
  5149  043E  1303               	bcf	3,6	;RP1=0, select bank1
  5150  043F  0832               	movf	(strtod@_u+1)^(0+128),w
  5151  0440  1283               	bcf	3,5	;RP0=0, select bank0
  5152  0441  1303               	bcf	3,6	;RP1=0, select bank0
  5153  0442  00E3               	movwf	?_strtod+1
  5154  0443  1683               	bsf	3,5	;RP0=1, select bank1
  5155  0444  1303               	bcf	3,6	;RP1=0, select bank1
  5156  0445  0833               	movf	(strtod@_u+2)^(0+128),w
  5157  0446  1283               	bcf	3,5	;RP0=0, select bank0
  5158  0447  1303               	bcf	3,6	;RP1=0, select bank0
  5159  0448  00E4               	movwf	?_strtod+2
  5160  0449  0008               	return
  5161  044A                     __end_of_strtod:	
  5162                           
  5163                           	psect	text14
  5164  1352                     __ptext14:	
  5165 ;; *************** function _isspace *****************
  5166 ;; Defined at:
  5167 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isspace.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;  c               1    wreg     unsigned char 
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;  c               1    3[BANK0 ] unsigned char 
  5172 ;; Return value:  Size  Location     Type
  5173 ;;		None               void
  5174 ;; Registers used:
  5175 ;;		wreg, status,2, status,0
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5181 ;;      Params:         0       0       0       0       0
  5182 ;;      Locals:         0       2       0       0       0
  5183 ;;      Temps:          0       0       0       0       0
  5184 ;;      Totals:         0       2       0       0       0
  5185 ;;Total ram usage:        2 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    3
  5188 ;; This function calls:
  5189 ;;		Nothing
  5190 ;; This function is called by:
  5191 ;;		_strtod
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           
  5196                           ;psect for function _isspace
  5197  1352                     _isspace:	
  5198                           
  5199                           ;incstack = 0
  5200                           ; Regs used in _isspace: [wreg+status,2+status,0]
  5201                           ;isspace@c stored from wreg
  5202  1352  1283               	bcf	3,5	;RP0=0, select bank0
  5203  1353  1303               	bcf	3,6	;RP1=0, select bank0
  5204  1354  00A3               	movwf	isspace@c
  5205  1355  01A2               	clrf	_isspace$713
  5206  1356  0AA2               	incf	_isspace$713,f
  5207  1357  3020               	movlw	32
  5208  1358  0623               	xorwf	isspace@c,w
  5209  1359  1903               	btfsc	3,2
  5210  135A  2B64               	goto	l2304
  5211  135B  300E               	movlw	14
  5212  135C  0223               	subwf	isspace@c,w
  5213  135D  1803               	skipnc
  5214  135E  2B63               	goto	l2302
  5215  135F  3009               	movlw	9
  5216  1360  0223               	subwf	isspace@c,w
  5217  1361  1803               	skipnc
  5218  1362  2B64               	goto	l2304
  5219  1363                     l2302:	
  5220  1363  01A2               	clrf	_isspace$713
  5221  1364                     l2304:	
  5222  1364  0C22               	rrf	_isspace$713,w
  5223  1365  0008               	return
  5224  1366                     __end_of_isspace:	
  5225                           
  5226                           	psect	text15
  5227  132F                     __ptext15:	
  5228 ;; *************** function _isdigit *****************
  5229 ;; Defined at:
  5230 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;  c               1    wreg     unsigned char 
  5233 ;; Auto vars:     Size  Location     Type
  5234 ;;  c               1    3[BANK0 ] unsigned char 
  5235 ;; Return value:  Size  Location     Type
  5236 ;;		None               void
  5237 ;; Registers used:
  5238 ;;		wreg, status,2, status,0
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5244 ;;      Params:         0       0       0       0       0
  5245 ;;      Locals:         0       2       0       0       0
  5246 ;;      Temps:          0       0       0       0       0
  5247 ;;      Totals:         0       2       0       0       0
  5248 ;;Total ram usage:        2 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; Hardware stack levels required when called:    3
  5251 ;; This function calls:
  5252 ;;		Nothing
  5253 ;; This function is called by:
  5254 ;;		_strtod
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           
  5259                           ;psect for function _isdigit
  5260  132F                     _isdigit:	
  5261                           
  5262                           ;incstack = 0
  5263                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5264                           ;isdigit@c stored from wreg
  5265  132F  1283               	bcf	3,5	;RP0=0, select bank0
  5266  1330  1303               	bcf	3,6	;RP1=0, select bank0
  5267  1331  00A3               	movwf	isdigit@c
  5268  1332  01A2               	clrf	_isdigit$710
  5269  1333  303A               	movlw	58
  5270  1334  0223               	subwf	isdigit@c,w
  5271  1335  1803               	skipnc
  5272  1336  2B3D               	goto	l2316
  5273  1337  3030               	movlw	48
  5274  1338  0223               	subwf	isdigit@c,w
  5275  1339  1C03               	skipc
  5276  133A  2B3D               	goto	l2316
  5277  133B  01A2               	clrf	_isdigit$710
  5278  133C  0AA2               	incf	_isdigit$710,f
  5279  133D                     l2316:	
  5280  133D  0C22               	rrf	_isdigit$710,w
  5281  133E  0008               	return
  5282  133F                     __end_of_isdigit:	
  5283                           
  5284                           	psect	text16
  5285  159F                     __ptext16:	
  5286 ;; *************** function ___lmul *****************
  5287 ;; Defined at:
  5288 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;  multiplier      4    2[BANK0 ] unsigned long 
  5291 ;;  multiplicand    4    6[BANK0 ] unsigned long 
  5292 ;; Auto vars:     Size  Location     Type
  5293 ;;  product         4   11[BANK0 ] unsigned long 
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  4    2[BANK0 ] unsigned long 
  5296 ;; Registers used:
  5297 ;;		wreg, status,2, status,0
  5298 ;; Tracked objects:
  5299 ;;		On entry : 0/0
  5300 ;;		On exit  : 0/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5303 ;;      Params:         0       8       0       0       0
  5304 ;;      Locals:         0       4       0       0       0
  5305 ;;      Temps:          0       1       0       0       0
  5306 ;;      Totals:         0      13       0       0       0
  5307 ;;Total ram usage:       13 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:    3
  5310 ;; This function calls:
  5311 ;;		Nothing
  5312 ;; This function is called by:
  5313 ;;		_strtod
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           
  5318                           ;psect for function ___lmul
  5319  159F                     ___lmul:	
  5320                           
  5321                           ;incstack = 0
  5322                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5323  159F  3000               	movlw	0
  5324  15A0  1283               	bcf	3,5	;RP0=0, select bank0
  5325  15A1  1303               	bcf	3,6	;RP1=0, select bank0
  5326  15A2  00AE               	movwf	___lmul@product+3
  5327  15A3  3000               	movlw	0
  5328  15A4  00AD               	movwf	___lmul@product+2
  5329  15A5  3000               	movlw	0
  5330  15A6  00AC               	movwf	___lmul@product+1
  5331  15A7  3000               	movlw	0
  5332  15A8  00AB               	movwf	___lmul@product
  5333  15A9                     l2268:	
  5334  15A9  1C22               	btfss	___lmul@multiplier,0
  5335  15AA  2DBF               	goto	l2272
  5336  15AB  0826               	movf	___lmul@multiplicand,w
  5337  15AC  07AB               	addwf	___lmul@product,f
  5338  15AD  0827               	movf	___lmul@multiplicand+1,w
  5339  15AE  1103               	clrz
  5340  15AF  1803               	skipnc
  5341  15B0  3E01               	addlw	1
  5342  15B1  1D03               	btfss	3,2
  5343  15B2  07AC               	addwf	___lmul@product+1,f
  5344  15B3  0828               	movf	___lmul@multiplicand+2,w
  5345  15B4  1103               	clrz
  5346  15B5  1803               	skipnc
  5347  15B6  3E01               	addlw	1
  5348  15B7  1D03               	btfss	3,2
  5349  15B8  07AD               	addwf	___lmul@product+2,f
  5350  15B9  0829               	movf	___lmul@multiplicand+3,w
  5351  15BA  1103               	clrz
  5352  15BB  1803               	skipnc
  5353  15BC  3E01               	addlw	1
  5354  15BD  1D03               	btfss	3,2
  5355  15BE  07AE               	addwf	___lmul@product+3,f
  5356  15BF                     l2272:	
  5357  15BF  3001               	movlw	1
  5358  15C0  00AA               	movwf	??___lmul
  5359  15C1                     u2335:	
  5360  15C1  1003               	clrc
  5361  15C2  0DA6               	rlf	___lmul@multiplicand,f
  5362  15C3  0DA7               	rlf	___lmul@multiplicand+1,f
  5363  15C4  0DA8               	rlf	___lmul@multiplicand+2,f
  5364  15C5  0DA9               	rlf	___lmul@multiplicand+3,f
  5365  15C6  0BAA               	decfsz	??___lmul,f
  5366  15C7  2DC1               	goto	u2335
  5367  15C8  3001               	movlw	1
  5368  15C9                     u2345:	
  5369  15C9  1003               	clrc
  5370  15CA  0CA5               	rrf	___lmul@multiplier+3,f
  5371  15CB  0CA4               	rrf	___lmul@multiplier+2,f
  5372  15CC  0CA3               	rrf	___lmul@multiplier+1,f
  5373  15CD  0CA2               	rrf	___lmul@multiplier,f
  5374  15CE  3EFF               	addlw	-1
  5375  15CF  1D03               	skipz
  5376  15D0  2DC9               	goto	u2345
  5377  15D1  0825               	movf	___lmul@multiplier+3,w
  5378  15D2  0424               	iorwf	___lmul@multiplier+2,w
  5379  15D3  0423               	iorwf	___lmul@multiplier+1,w
  5380  15D4  0422               	iorwf	___lmul@multiplier,w
  5381  15D5  1D03               	skipz
  5382  15D6  2DA9               	goto	l2268
  5383  15D7  082E               	movf	___lmul@product+3,w
  5384  15D8  00A5               	movwf	?___lmul+3
  5385  15D9  082D               	movf	___lmul@product+2,w
  5386  15DA  00A4               	movwf	?___lmul+2
  5387  15DB  082C               	movf	___lmul@product+1,w
  5388  15DC  00A3               	movwf	?___lmul+1
  5389  15DD  082B               	movf	___lmul@product,w
  5390  15DE  00A2               	movwf	?___lmul
  5391  15DF  0008               	return
  5392  15E0                     __end_of___lmul:	
  5393                           
  5394                           	psect	text17
  5395  131A                     __ptext17:	
  5396 ;; *************** function ___ftneg *****************
  5397 ;; Defined at:
  5398 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  5399 ;; Parameters:    Size  Location     Type
  5400 ;;  f1              3   18[BANK0 ] float 
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;		None
  5403 ;; Return value:  Size  Location     Type
  5404 ;;                  3   18[BANK0 ] float 
  5405 ;; Registers used:
  5406 ;;		wreg
  5407 ;; Tracked objects:
  5408 ;;		On entry : 0/0
  5409 ;;		On exit  : 0/0
  5410 ;;		Unchanged: 0/0
  5411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5412 ;;      Params:         0       3       0       0       0
  5413 ;;      Locals:         0       0       0       0       0
  5414 ;;      Temps:          0       0       0       0       0
  5415 ;;      Totals:         0       3       0       0       0
  5416 ;;Total ram usage:        3 bytes
  5417 ;; Hardware stack levels used:    1
  5418 ;; Hardware stack levels required when called:    3
  5419 ;; This function calls:
  5420 ;;		Nothing
  5421 ;; This function is called by:
  5422 ;;		_floatToString
  5423 ;;		_strtod
  5424 ;;		_round
  5425 ;; This function uses a non-reentrant model
  5426 ;;
  5427                           
  5428                           
  5429                           ;psect for function ___ftneg
  5430  131A                     ___ftneg:	
  5431                           
  5432                           ;incstack = 0
  5433                           ; Regs used in ___ftneg: [wreg]
  5434  131A  1283               	bcf	3,5	;RP0=0, select bank0
  5435  131B  1303               	bcf	3,6	;RP1=0, select bank0
  5436  131C  0834               	movf	___ftneg@f1+2,w
  5437  131D  0433               	iorwf	___ftneg@f1+1,w
  5438  131E  0432               	iorwf	___ftneg@f1,w
  5439  131F  1903               	skipnz
  5440  1320  0008               	return
  5441  1321  3080               	movlw	128
  5442  1322  06B4               	xorwf	___ftneg@f1+2,f
  5443  1323  0008               	return
  5444  1324                     __end_of___ftneg:	
  5445                           
  5446                           	psect	text18
  5447  0B3E                     __ptext18:	
  5448 ;; *************** function ___ftmul *****************
  5449 ;; Defined at:
  5450 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  f1              3   34[BANK0 ] float 
  5453 ;;  f2              3   37[BANK0 ] float 
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;  f3_as_produc    3   45[BANK0 ] unsigned um
  5456 ;;  sign            1   49[BANK0 ] unsigned char 
  5457 ;;  cntr            1   48[BANK0 ] unsigned char 
  5458 ;;  exp             1   44[BANK0 ] unsigned char 
  5459 ;; Return value:  Size  Location     Type
  5460 ;;                  3   34[BANK0 ] float 
  5461 ;; Registers used:
  5462 ;;		wreg, status,2, status,0, pclath, cstack
  5463 ;; Tracked objects:
  5464 ;;		On entry : 0/0
  5465 ;;		On exit  : 0/0
  5466 ;;		Unchanged: 0/0
  5467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5468 ;;      Params:         0       6       0       0       0
  5469 ;;      Locals:         0       6       0       0       0
  5470 ;;      Temps:          0       4       0       0       0
  5471 ;;      Totals:         0      16       0       0       0
  5472 ;;Total ram usage:       16 bytes
  5473 ;; Hardware stack levels used:    1
  5474 ;; Hardware stack levels required when called:    4
  5475 ;; This function calls:
  5476 ;;		___ftpack
  5477 ;; This function is called by:
  5478 ;;		_floatToString
  5479 ;;		_main
  5480 ;;		_strtod
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           
  5485                           ;psect for function ___ftmul
  5486  0B3E                     ___ftmul:	
  5487                           
  5488                           ;incstack = 0
  5489                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5490  0B3E  1283               	bcf	3,5	;RP0=0, select bank0
  5491  0B3F  1303               	bcf	3,6	;RP1=0, select bank0
  5492  0B40  0842               	movf	___ftmul@f1,w
  5493  0B41  00C8               	movwf	??___ftmul
  5494  0B42  0843               	movf	___ftmul@f1+1,w
  5495  0B43  00C9               	movwf	??___ftmul+1
  5496  0B44  0844               	movf	___ftmul@f1+2,w
  5497  0B45  00CA               	movwf	??___ftmul+2
  5498  0B46  1003               	clrc
  5499  0B47  0D49               	rlf	??___ftmul+1,w
  5500  0B48  0D4A               	rlf	??___ftmul+2,w
  5501  0B49  00CB               	movwf	??___ftmul+3
  5502  0B4A  084B               	movf	??___ftmul+3,w
  5503  0B4B  00CC               	movwf	___ftmul@exp
  5504  0B4C  084C               	movf	___ftmul@exp,w
  5505  0B4D  1D03               	btfss	3,2
  5506  0B4E  2B56               	goto	l2458
  5507  0B4F  3000               	movlw	0
  5508  0B50  00C2               	movwf	?___ftmul
  5509  0B51  3000               	movlw	0
  5510  0B52  00C3               	movwf	?___ftmul+1
  5511  0B53  3000               	movlw	0
  5512  0B54  00C4               	movwf	?___ftmul+2
  5513  0B55  0008               	return
  5514  0B56                     l2458:	
  5515  0B56  0845               	movf	___ftmul@f2,w
  5516  0B57  00C8               	movwf	??___ftmul
  5517  0B58  0846               	movf	___ftmul@f2+1,w
  5518  0B59  00C9               	movwf	??___ftmul+1
  5519  0B5A  0847               	movf	___ftmul@f2+2,w
  5520  0B5B  00CA               	movwf	??___ftmul+2
  5521  0B5C  1003               	clrc
  5522  0B5D  0D49               	rlf	??___ftmul+1,w
  5523  0B5E  0D4A               	rlf	??___ftmul+2,w
  5524  0B5F  00CB               	movwf	??___ftmul+3
  5525  0B60  084B               	movf	??___ftmul+3,w
  5526  0B61  00D1               	movwf	___ftmul@sign
  5527  0B62  0851               	movf	___ftmul@sign,w
  5528  0B63  1D03               	btfss	3,2
  5529  0B64  2B6C               	goto	l2464
  5530  0B65  3000               	movlw	0
  5531  0B66  00C2               	movwf	?___ftmul
  5532  0B67  3000               	movlw	0
  5533  0B68  00C3               	movwf	?___ftmul+1
  5534  0B69  3000               	movlw	0
  5535  0B6A  00C4               	movwf	?___ftmul+2
  5536  0B6B  0008               	return
  5537  0B6C                     l2464:	
  5538  0B6C  0851               	movf	___ftmul@sign,w
  5539  0B6D  3E7B               	addlw	123
  5540  0B6E  00C8               	movwf	??___ftmul
  5541  0B6F  0848               	movf	??___ftmul,w
  5542  0B70  07CC               	addwf	___ftmul@exp,f
  5543  0B71  0842               	movf	___ftmul@f1,w
  5544  0B72  00C8               	movwf	??___ftmul
  5545  0B73  0843               	movf	___ftmul@f1+1,w
  5546  0B74  00C9               	movwf	??___ftmul+1
  5547  0B75  0844               	movf	___ftmul@f1+2,w
  5548  0B76  00CA               	movwf	??___ftmul+2
  5549  0B77  3010               	movlw	16
  5550  0B78                     u2825:	
  5551  0B78  1003               	clrc
  5552  0B79  0CCA               	rrf	??___ftmul+2,f
  5553  0B7A  0CC9               	rrf	??___ftmul+1,f
  5554  0B7B  0CC8               	rrf	??___ftmul,f
  5555  0B7C  3EFF               	addlw	-1
  5556  0B7D  1D03               	skipz
  5557  0B7E  2B78               	goto	u2825
  5558  0B7F  0848               	movf	??___ftmul,w
  5559  0B80  00CB               	movwf	??___ftmul+3
  5560  0B81  084B               	movf	??___ftmul+3,w
  5561  0B82  00D1               	movwf	___ftmul@sign
  5562  0B83  0845               	movf	___ftmul@f2,w
  5563  0B84  00C8               	movwf	??___ftmul
  5564  0B85  0846               	movf	___ftmul@f2+1,w
  5565  0B86  00C9               	movwf	??___ftmul+1
  5566  0B87  0847               	movf	___ftmul@f2+2,w
  5567  0B88  00CA               	movwf	??___ftmul+2
  5568  0B89  3010               	movlw	16
  5569  0B8A                     u2835:	
  5570  0B8A  1003               	clrc
  5571  0B8B  0CCA               	rrf	??___ftmul+2,f
  5572  0B8C  0CC9               	rrf	??___ftmul+1,f
  5573  0B8D  0CC8               	rrf	??___ftmul,f
  5574  0B8E  3EFF               	addlw	-1
  5575  0B8F  1D03               	skipz
  5576  0B90  2B8A               	goto	u2835
  5577  0B91  0848               	movf	??___ftmul,w
  5578  0B92  00CB               	movwf	??___ftmul+3
  5579  0B93  084B               	movf	??___ftmul+3,w
  5580  0B94  06D1               	xorwf	___ftmul@sign,f
  5581  0B95  3080               	movlw	128
  5582  0B96  00C8               	movwf	??___ftmul
  5583  0B97  0848               	movf	??___ftmul,w
  5584  0B98  05D1               	andwf	___ftmul@sign,f
  5585  0B99  17C3               	bsf	___ftmul@f1+1,7
  5586  0B9A  17C6               	bsf	___ftmul@f2+1,7
  5587  0B9B  30FF               	movlw	255
  5588  0B9C  05C5               	andwf	___ftmul@f2,f
  5589  0B9D  30FF               	movlw	255
  5590  0B9E  05C6               	andwf	___ftmul@f2+1,f
  5591  0B9F  3000               	movlw	0
  5592  0BA0  05C7               	andwf	___ftmul@f2+2,f
  5593  0BA1  3000               	movlw	0
  5594  0BA2  00CD               	movwf	___ftmul@f3_as_product
  5595  0BA3  3000               	movlw	0
  5596  0BA4  00CE               	movwf	___ftmul@f3_as_product+1
  5597  0BA5  3000               	movlw	0
  5598  0BA6  00CF               	movwf	___ftmul@f3_as_product+2
  5599  0BA7  3007               	movlw	7
  5600  0BA8  00C8               	movwf	??___ftmul
  5601  0BA9  0848               	movf	??___ftmul,w
  5602  0BAA  00D0               	movwf	___ftmul@cntr
  5603  0BAB                     l2476:	
  5604  0BAB  1C42               	btfss	___ftmul@f1,0
  5605  0BAC  2BBB               	goto	l2480
  5606  0BAD  0845               	movf	___ftmul@f2,w
  5607  0BAE  07CD               	addwf	___ftmul@f3_as_product,f
  5608  0BAF  0846               	movf	___ftmul@f2+1,w
  5609  0BB0  1103               	clrz
  5610  0BB1  1803               	skipnc
  5611  0BB2  0A46               	incf	___ftmul@f2+1,w
  5612  0BB3  1D03               	btfss	3,2
  5613  0BB4  07CE               	addwf	___ftmul@f3_as_product+1,f
  5614  0BB5  0847               	movf	___ftmul@f2+2,w
  5615  0BB6  1103               	clrz
  5616  0BB7  1803               	skipnc
  5617  0BB8  0A47               	incf	___ftmul@f2+2,w
  5618  0BB9  1D03               	btfss	3,2
  5619  0BBA  07CF               	addwf	___ftmul@f3_as_product+2,f
  5620  0BBB                     l2480:	
  5621  0BBB  3001               	movlw	1
  5622  0BBC                     u2865:	
  5623  0BBC  1003               	clrc
  5624  0BBD  0CC4               	rrf	___ftmul@f1+2,f
  5625  0BBE  0CC3               	rrf	___ftmul@f1+1,f
  5626  0BBF  0CC2               	rrf	___ftmul@f1,f
  5627  0BC0  3EFF               	addlw	-1
  5628  0BC1  1D03               	skipz
  5629  0BC2  2BBC               	goto	u2865
  5630  0BC3  3001               	movlw	1
  5631  0BC4                     u2875:	
  5632  0BC4  1003               	clrc
  5633  0BC5  0DC5               	rlf	___ftmul@f2,f
  5634  0BC6  0DC6               	rlf	___ftmul@f2+1,f
  5635  0BC7  0DC7               	rlf	___ftmul@f2+2,f
  5636  0BC8  3EFF               	addlw	-1
  5637  0BC9  1D03               	skipz
  5638  0BCA  2BC4               	goto	u2875
  5639  0BCB  3001               	movlw	1
  5640  0BCC  02D0               	subwf	___ftmul@cntr,f
  5641  0BCD  1D03               	btfss	3,2
  5642  0BCE  2BAB               	goto	l2476
  5643  0BCF  3009               	movlw	9
  5644  0BD0  00C8               	movwf	??___ftmul
  5645  0BD1  0848               	movf	??___ftmul,w
  5646  0BD2  00D0               	movwf	___ftmul@cntr
  5647  0BD3                     l2488:	
  5648  0BD3  1C42               	btfss	___ftmul@f1,0
  5649  0BD4  2BE3               	goto	l2492
  5650  0BD5  0845               	movf	___ftmul@f2,w
  5651  0BD6  07CD               	addwf	___ftmul@f3_as_product,f
  5652  0BD7  0846               	movf	___ftmul@f2+1,w
  5653  0BD8  1103               	clrz
  5654  0BD9  1803               	skipnc
  5655  0BDA  0A46               	incf	___ftmul@f2+1,w
  5656  0BDB  1D03               	btfss	3,2
  5657  0BDC  07CE               	addwf	___ftmul@f3_as_product+1,f
  5658  0BDD  0847               	movf	___ftmul@f2+2,w
  5659  0BDE  1103               	clrz
  5660  0BDF  1803               	skipnc
  5661  0BE0  0A47               	incf	___ftmul@f2+2,w
  5662  0BE1  1D03               	btfss	3,2
  5663  0BE2  07CF               	addwf	___ftmul@f3_as_product+2,f
  5664  0BE3                     l2492:	
  5665  0BE3  3001               	movlw	1
  5666  0BE4                     u2915:	
  5667  0BE4  1003               	clrc
  5668  0BE5  0CC4               	rrf	___ftmul@f1+2,f
  5669  0BE6  0CC3               	rrf	___ftmul@f1+1,f
  5670  0BE7  0CC2               	rrf	___ftmul@f1,f
  5671  0BE8  3EFF               	addlw	-1
  5672  0BE9  1D03               	skipz
  5673  0BEA  2BE4               	goto	u2915
  5674  0BEB  3001               	movlw	1
  5675  0BEC                     u2925:	
  5676  0BEC  1003               	clrc
  5677  0BED  0CCF               	rrf	___ftmul@f3_as_product+2,f
  5678  0BEE  0CCE               	rrf	___ftmul@f3_as_product+1,f
  5679  0BEF  0CCD               	rrf	___ftmul@f3_as_product,f
  5680  0BF0  3EFF               	addlw	-1
  5681  0BF1  1D03               	skipz
  5682  0BF2  2BEC               	goto	u2925
  5683  0BF3  3001               	movlw	1
  5684  0BF4  02D0               	subwf	___ftmul@cntr,f
  5685  0BF5  1D03               	btfss	3,2
  5686  0BF6  2BD3               	goto	l2488
  5687  0BF7  084D               	movf	___ftmul@f3_as_product,w
  5688  0BF8  00A2               	movwf	___ftpack@arg
  5689  0BF9  084E               	movf	___ftmul@f3_as_product+1,w
  5690  0BFA  00A3               	movwf	___ftpack@arg+1
  5691  0BFB  084F               	movf	___ftmul@f3_as_product+2,w
  5692  0BFC  00A4               	movwf	___ftpack@arg+2
  5693  0BFD  084C               	movf	___ftmul@exp,w
  5694  0BFE  00C8               	movwf	??___ftmul
  5695  0BFF  0848               	movf	??___ftmul,w
  5696  0C00  00A5               	movwf	___ftpack@exp
  5697  0C01  0851               	movf	___ftmul@sign,w
  5698  0C02  00C9               	movwf	??___ftmul+1
  5699  0C03  0849               	movf	??___ftmul+1,w
  5700  0C04  00A6               	movwf	___ftpack@sign
  5701  0C05  160A  118A  2792   	fcall	___ftpack
  5702  0C08  1283               	bcf	3,5	;RP0=0, select bank0
  5703  0C09  1303               	bcf	3,6	;RP1=0, select bank0
  5704  0C0A  0822               	movf	?___ftpack,w
  5705  0C0B  00C2               	movwf	?___ftmul
  5706  0C0C  0823               	movf	?___ftpack+1,w
  5707  0C0D  00C3               	movwf	?___ftmul+1
  5708  0C0E  0824               	movf	?___ftpack+2,w
  5709  0C0F  00C4               	movwf	?___ftmul+2
  5710  0C10  0008               	return
  5711  0C11                     __end_of___ftmul:	
  5712                           
  5713                           	psect	text19
  5714  16CB                     __ptext19:	
  5715 ;; *************** function ___ftge *****************
  5716 ;; Defined at:
  5717 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;  ff1             3   50[BANK0 ] float 
  5720 ;;  ff2             3   53[BANK0 ] float 
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;		None
  5723 ;; Return value:  Size  Location     Type
  5724 ;;		None               void
  5725 ;; Registers used:
  5726 ;;		wreg, status,2, status,0
  5727 ;; Tracked objects:
  5728 ;;		On entry : 0/0
  5729 ;;		On exit  : 0/0
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5732 ;;      Params:         0       6       0       0       0
  5733 ;;      Locals:         0       0       0       0       0
  5734 ;;      Temps:          0       6       0       0       0
  5735 ;;      Totals:         0      12       0       0       0
  5736 ;;Total ram usage:       12 bytes
  5737 ;; Hardware stack levels used:    1
  5738 ;; Hardware stack levels required when called:    3
  5739 ;; This function calls:
  5740 ;;		Nothing
  5741 ;; This function is called by:
  5742 ;;		_main
  5743 ;;		_strtod
  5744 ;; This function uses a non-reentrant model
  5745 ;;
  5746                           
  5747                           
  5748                           ;psect for function ___ftge
  5749  16CB                     ___ftge:	
  5750                           
  5751                           ;incstack = 0
  5752                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5753  16CB  1283               	bcf	3,5	;RP0=0, select bank0
  5754  16CC  1303               	bcf	3,6	;RP1=0, select bank0
  5755  16CD  1FD4               	btfss	___ftge@ff1+2,7
  5756  16CE  2EF4               	goto	l2436
  5757  16CF  3000               	movlw	0
  5758  16D0  00D8               	movwf	??___ftge
  5759  16D1  3000               	movlw	0
  5760  16D2  00D9               	movwf	??___ftge+1
  5761  16D3  3080               	movlw	128
  5762  16D4  00DA               	movwf	??___ftge+2
  5763  16D5  0952               	comf	___ftge@ff1,w
  5764  16D6  00DB               	movwf	??___ftge+3
  5765  16D7  0953               	comf	___ftge@ff1+1,w
  5766  16D8  00DC               	movwf	??___ftge+4
  5767  16D9  0954               	comf	___ftge@ff1+2,w
  5768  16DA  00DD               	movwf	??___ftge+5
  5769  16DB  0ADB               	incf	??___ftge+3,f
  5770  16DC  1903               	skipnz
  5771  16DD  0ADC               	incf	??___ftge+4,f
  5772  16DE  1903               	skipnz
  5773  16DF  0ADD               	incf	??___ftge+5,f
  5774  16E0  085B               	movf	??___ftge+3,w
  5775  16E1  07D8               	addwf	??___ftge,f
  5776  16E2  085C               	movf	??___ftge+4,w
  5777  16E3  1803               	skipnc
  5778  16E4  0F5C               	incfsz	??___ftge+4,w
  5779  16E5  2EE7               	goto	u2761
  5780  16E6  2EE8               	goto	u2762
  5781  16E7                     u2761:	
  5782  16E7  07D9               	addwf	??___ftge+1,f
  5783  16E8                     u2762:	
  5784  16E8  085D               	movf	??___ftge+5,w
  5785  16E9  1803               	skipnc
  5786  16EA  0F5D               	incfsz	??___ftge+5,w
  5787  16EB  2EED               	goto	u2763
  5788  16EC  2EEE               	goto	u2764
  5789  16ED                     u2763:	
  5790  16ED  07DA               	addwf	??___ftge+2,f
  5791  16EE                     u2764:	
  5792  16EE  0858               	movf	??___ftge,w
  5793  16EF  00D2               	movwf	___ftge@ff1
  5794  16F0  0859               	movf	??___ftge+1,w
  5795  16F1  00D3               	movwf	___ftge@ff1+1
  5796  16F2  085A               	movf	??___ftge+2,w
  5797  16F3  00D4               	movwf	___ftge@ff1+2
  5798  16F4                     l2436:	
  5799  16F4  1FD7               	btfss	___ftge@ff2+2,7
  5800  16F5  2F1B               	goto	l2440
  5801  16F6  3000               	movlw	0
  5802  16F7  00D8               	movwf	??___ftge
  5803  16F8  3000               	movlw	0
  5804  16F9  00D9               	movwf	??___ftge+1
  5805  16FA  3080               	movlw	128
  5806  16FB  00DA               	movwf	??___ftge+2
  5807  16FC  0955               	comf	___ftge@ff2,w
  5808  16FD  00DB               	movwf	??___ftge+3
  5809  16FE  0956               	comf	___ftge@ff2+1,w
  5810  16FF  00DC               	movwf	??___ftge+4
  5811  1700  0957               	comf	___ftge@ff2+2,w
  5812  1701  00DD               	movwf	??___ftge+5
  5813  1702  0ADB               	incf	??___ftge+3,f
  5814  1703  1903               	skipnz
  5815  1704  0ADC               	incf	??___ftge+4,f
  5816  1705  1903               	skipnz
  5817  1706  0ADD               	incf	??___ftge+5,f
  5818  1707  085B               	movf	??___ftge+3,w
  5819  1708  07D8               	addwf	??___ftge,f
  5820  1709  085C               	movf	??___ftge+4,w
  5821  170A  1803               	skipnc
  5822  170B  0F5C               	incfsz	??___ftge+4,w
  5823  170C  2F0E               	goto	u2781
  5824  170D  2F0F               	goto	u2782
  5825  170E                     u2781:	
  5826  170E  07D9               	addwf	??___ftge+1,f
  5827  170F                     u2782:	
  5828  170F  085D               	movf	??___ftge+5,w
  5829  1710  1803               	skipnc
  5830  1711  0F5D               	incfsz	??___ftge+5,w
  5831  1712  2F14               	goto	u2783
  5832  1713  2F15               	goto	u2784
  5833  1714                     u2783:	
  5834  1714  07DA               	addwf	??___ftge+2,f
  5835  1715                     u2784:	
  5836  1715  0858               	movf	??___ftge,w
  5837  1716  00D5               	movwf	___ftge@ff2
  5838  1717  0859               	movf	??___ftge+1,w
  5839  1718  00D6               	movwf	___ftge@ff2+1
  5840  1719  085A               	movf	??___ftge+2,w
  5841  171A  00D7               	movwf	___ftge@ff2+2
  5842  171B                     l2440:	
  5843  171B  3080               	movlw	128
  5844  171C  06D4               	xorwf	___ftge@ff1+2,f
  5845  171D  3080               	movlw	128
  5846  171E  06D7               	xorwf	___ftge@ff2+2,f
  5847  171F  0857               	movf	___ftge@ff2+2,w
  5848  1720  0254               	subwf	___ftge@ff1+2,w
  5849  1721  1D03               	skipz
  5850  1722  0008               	return
  5851  1723  0856               	movf	___ftge@ff2+1,w
  5852  1724  0253               	subwf	___ftge@ff1+1,w
  5853  1725  1D03               	skipz
  5854  1726  0008               	return
  5855  1727  0855               	movf	___ftge@ff2,w
  5856  1728  0252               	subwf	___ftge@ff1,w
  5857  1729  0008               	return
  5858  172A                     __end_of___ftge:	
  5859                           
  5860                           	psect	text20
  5861  09C4                     __ptext20:	
  5862 ;; *************** function ___ftdiv *****************
  5863 ;; Defined at:
  5864 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  5865 ;; Parameters:    Size  Location     Type
  5866 ;;  f2              3   50[BANK0 ] float 
  5867 ;;  f1              3   53[BANK0 ] float 
  5868 ;; Auto vars:     Size  Location     Type
  5869 ;;  f3              3   61[BANK0 ] float 
  5870 ;;  sign            1   65[BANK0 ] unsigned char 
  5871 ;;  exp             1   64[BANK0 ] unsigned char 
  5872 ;;  cntr            1   60[BANK0 ] unsigned char 
  5873 ;; Return value:  Size  Location     Type
  5874 ;;                  3   50[BANK0 ] float 
  5875 ;; Registers used:
  5876 ;;		wreg, status,2, status,0, pclath, cstack
  5877 ;; Tracked objects:
  5878 ;;		On entry : 0/0
  5879 ;;		On exit  : 0/0
  5880 ;;		Unchanged: 0/0
  5881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5882 ;;      Params:         0       6       0       0       0
  5883 ;;      Locals:         0       6       0       0       0
  5884 ;;      Temps:          0       4       0       0       0
  5885 ;;      Totals:         0      16       0       0       0
  5886 ;;Total ram usage:       16 bytes
  5887 ;; Hardware stack levels used:    1
  5888 ;; Hardware stack levels required when called:    4
  5889 ;; This function calls:
  5890 ;;		___ftpack
  5891 ;; This function is called by:
  5892 ;;		_main
  5893 ;;		_strtod
  5894 ;; This function uses a non-reentrant model
  5895 ;;
  5896                           
  5897                           
  5898                           ;psect for function ___ftdiv
  5899  09C4                     ___ftdiv:	
  5900                           
  5901                           ;incstack = 0
  5902                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5903  09C4  1283               	bcf	3,5	;RP0=0, select bank0
  5904  09C5  1303               	bcf	3,6	;RP1=0, select bank0
  5905  09C6  0855               	movf	___ftdiv@f1,w
  5906  09C7  00D8               	movwf	??___ftdiv
  5907  09C8  0856               	movf	___ftdiv@f1+1,w
  5908  09C9  00D9               	movwf	??___ftdiv+1
  5909  09CA  0857               	movf	___ftdiv@f1+2,w
  5910  09CB  00DA               	movwf	??___ftdiv+2
  5911  09CC  1003               	clrc
  5912  09CD  0D59               	rlf	??___ftdiv+1,w
  5913  09CE  0D5A               	rlf	??___ftdiv+2,w
  5914  09CF  00DB               	movwf	??___ftdiv+3
  5915  09D0  085B               	movf	??___ftdiv+3,w
  5916  09D1  00E0               	movwf	___ftdiv@exp
  5917  09D2  0860               	movf	___ftdiv@exp,w
  5918  09D3  1D03               	btfss	3,2
  5919  09D4  29DC               	goto	l2396
  5920  09D5  3000               	movlw	0
  5921  09D6  00D2               	movwf	?___ftdiv
  5922  09D7  3000               	movlw	0
  5923  09D8  00D3               	movwf	?___ftdiv+1
  5924  09D9  3000               	movlw	0
  5925  09DA  00D4               	movwf	?___ftdiv+2
  5926  09DB  0008               	return
  5927  09DC                     l2396:	
  5928  09DC  0852               	movf	___ftdiv@f2,w
  5929  09DD  00D8               	movwf	??___ftdiv
  5930  09DE  0853               	movf	___ftdiv@f2+1,w
  5931  09DF  00D9               	movwf	??___ftdiv+1
  5932  09E0  0854               	movf	___ftdiv@f2+2,w
  5933  09E1  00DA               	movwf	??___ftdiv+2
  5934  09E2  1003               	clrc
  5935  09E3  0D59               	rlf	??___ftdiv+1,w
  5936  09E4  0D5A               	rlf	??___ftdiv+2,w
  5937  09E5  00DB               	movwf	??___ftdiv+3
  5938  09E6  085B               	movf	??___ftdiv+3,w
  5939  09E7  00E1               	movwf	___ftdiv@sign
  5940  09E8  0861               	movf	___ftdiv@sign,w
  5941  09E9  1D03               	btfss	3,2
  5942  09EA  29F2               	goto	l2402
  5943  09EB  3000               	movlw	0
  5944  09EC  00D2               	movwf	?___ftdiv
  5945  09ED  3000               	movlw	0
  5946  09EE  00D3               	movwf	?___ftdiv+1
  5947  09EF  3000               	movlw	0
  5948  09F0  00D4               	movwf	?___ftdiv+2
  5949  09F1  0008               	return
  5950  09F2                     l2402:	
  5951  09F2  3000               	movlw	0
  5952  09F3  00DD               	movwf	___ftdiv@f3
  5953  09F4  3000               	movlw	0
  5954  09F5  00DE               	movwf	___ftdiv@f3+1
  5955  09F6  3000               	movlw	0
  5956  09F7  00DF               	movwf	___ftdiv@f3+2
  5957  09F8  3089               	movlw	137
  5958  09F9  0761               	addwf	___ftdiv@sign,w
  5959  09FA  00D8               	movwf	??___ftdiv
  5960  09FB  0858               	movf	??___ftdiv,w
  5961  09FC  02E0               	subwf	___ftdiv@exp,f
  5962  09FD  0855               	movf	___ftdiv@f1,w
  5963  09FE  00D8               	movwf	??___ftdiv
  5964  09FF  0856               	movf	___ftdiv@f1+1,w
  5965  0A00  00D9               	movwf	??___ftdiv+1
  5966  0A01  0857               	movf	___ftdiv@f1+2,w
  5967  0A02  00DA               	movwf	??___ftdiv+2
  5968  0A03  3010               	movlw	16
  5969  0A04                     u2695:	
  5970  0A04  1003               	clrc
  5971  0A05  0CDA               	rrf	??___ftdiv+2,f
  5972  0A06  0CD9               	rrf	??___ftdiv+1,f
  5973  0A07  0CD8               	rrf	??___ftdiv,f
  5974  0A08  3EFF               	addlw	-1
  5975  0A09  1D03               	skipz
  5976  0A0A  2A04               	goto	u2695
  5977  0A0B  0858               	movf	??___ftdiv,w
  5978  0A0C  00DB               	movwf	??___ftdiv+3
  5979  0A0D  085B               	movf	??___ftdiv+3,w
  5980  0A0E  00E1               	movwf	___ftdiv@sign
  5981  0A0F  0852               	movf	___ftdiv@f2,w
  5982  0A10  00D8               	movwf	??___ftdiv
  5983  0A11  0853               	movf	___ftdiv@f2+1,w
  5984  0A12  00D9               	movwf	??___ftdiv+1
  5985  0A13  0854               	movf	___ftdiv@f2+2,w
  5986  0A14  00DA               	movwf	??___ftdiv+2
  5987  0A15  3010               	movlw	16
  5988  0A16                     u2705:	
  5989  0A16  1003               	clrc
  5990  0A17  0CDA               	rrf	??___ftdiv+2,f
  5991  0A18  0CD9               	rrf	??___ftdiv+1,f
  5992  0A19  0CD8               	rrf	??___ftdiv,f
  5993  0A1A  3EFF               	addlw	-1
  5994  0A1B  1D03               	skipz
  5995  0A1C  2A16               	goto	u2705
  5996  0A1D  0858               	movf	??___ftdiv,w
  5997  0A1E  00DB               	movwf	??___ftdiv+3
  5998  0A1F  085B               	movf	??___ftdiv+3,w
  5999  0A20  06E1               	xorwf	___ftdiv@sign,f
  6000  0A21  3080               	movlw	128
  6001  0A22  00D8               	movwf	??___ftdiv
  6002  0A23  0858               	movf	??___ftdiv,w
  6003  0A24  05E1               	andwf	___ftdiv@sign,f
  6004  0A25  17D6               	bsf	___ftdiv@f1+1,7
  6005  0A26  30FF               	movlw	255
  6006  0A27  05D5               	andwf	___ftdiv@f1,f
  6007  0A28  30FF               	movlw	255
  6008  0A29  05D6               	andwf	___ftdiv@f1+1,f
  6009  0A2A  3000               	movlw	0
  6010  0A2B  05D7               	andwf	___ftdiv@f1+2,f
  6011  0A2C  17D3               	bsf	___ftdiv@f2+1,7
  6012  0A2D  30FF               	movlw	255
  6013  0A2E  05D2               	andwf	___ftdiv@f2,f
  6014  0A2F  30FF               	movlw	255
  6015  0A30  05D3               	andwf	___ftdiv@f2+1,f
  6016  0A31  3000               	movlw	0
  6017  0A32  05D4               	andwf	___ftdiv@f2+2,f
  6018  0A33  3018               	movlw	24
  6019  0A34  00D8               	movwf	??___ftdiv
  6020  0A35  0858               	movf	??___ftdiv,w
  6021  0A36  00DC               	movwf	___ftdiv@cntr
  6022  0A37                     l2416:	
  6023  0A37  3001               	movlw	1
  6024  0A38                     u2715:	
  6025  0A38  1003               	clrc
  6026  0A39  0DDD               	rlf	___ftdiv@f3,f
  6027  0A3A  0DDE               	rlf	___ftdiv@f3+1,f
  6028  0A3B  0DDF               	rlf	___ftdiv@f3+2,f
  6029  0A3C  3EFF               	addlw	-1
  6030  0A3D  1D03               	skipz
  6031  0A3E  2A38               	goto	u2715
  6032  0A3F  0854               	movf	___ftdiv@f2+2,w
  6033  0A40  0257               	subwf	___ftdiv@f1+2,w
  6034  0A41  1D03               	skipz
  6035  0A42  2A49               	goto	u2725
  6036  0A43  0853               	movf	___ftdiv@f2+1,w
  6037  0A44  0256               	subwf	___ftdiv@f1+1,w
  6038  0A45  1D03               	skipz
  6039  0A46  2A49               	goto	u2725
  6040  0A47  0852               	movf	___ftdiv@f2,w
  6041  0A48  0255               	subwf	___ftdiv@f1,w
  6042  0A49                     u2725:	
  6043  0A49  1C03               	skipc
  6044  0A4A  2A56               	goto	l2424
  6045  0A4B  0852               	movf	___ftdiv@f2,w
  6046  0A4C  02D5               	subwf	___ftdiv@f1,f
  6047  0A4D  0853               	movf	___ftdiv@f2+1,w
  6048  0A4E  1C03               	skipc
  6049  0A4F  0F53               	incfsz	___ftdiv@f2+1,w
  6050  0A50  02D6               	subwf	___ftdiv@f1+1,f
  6051  0A51  0854               	movf	___ftdiv@f2+2,w
  6052  0A52  1C03               	skipc
  6053  0A53  0A54               	incf	___ftdiv@f2+2,w
  6054  0A54  02D7               	subwf	___ftdiv@f1+2,f
  6055  0A55  145D               	bsf	___ftdiv@f3,0
  6056  0A56                     l2424:	
  6057  0A56  3001               	movlw	1
  6058  0A57                     u2735:	
  6059  0A57  1003               	clrc
  6060  0A58  0DD5               	rlf	___ftdiv@f1,f
  6061  0A59  0DD6               	rlf	___ftdiv@f1+1,f
  6062  0A5A  0DD7               	rlf	___ftdiv@f1+2,f
  6063  0A5B  3EFF               	addlw	-1
  6064  0A5C  1D03               	skipz
  6065  0A5D  2A57               	goto	u2735
  6066  0A5E  3001               	movlw	1
  6067  0A5F  02DC               	subwf	___ftdiv@cntr,f
  6068  0A60  1D03               	btfss	3,2
  6069  0A61  2A37               	goto	l2416
  6070  0A62  085D               	movf	___ftdiv@f3,w
  6071  0A63  00A2               	movwf	___ftpack@arg
  6072  0A64  085E               	movf	___ftdiv@f3+1,w
  6073  0A65  00A3               	movwf	___ftpack@arg+1
  6074  0A66  085F               	movf	___ftdiv@f3+2,w
  6075  0A67  00A4               	movwf	___ftpack@arg+2
  6076  0A68  0860               	movf	___ftdiv@exp,w
  6077  0A69  00D8               	movwf	??___ftdiv
  6078  0A6A  0858               	movf	??___ftdiv,w
  6079  0A6B  00A5               	movwf	___ftpack@exp
  6080  0A6C  0861               	movf	___ftdiv@sign,w
  6081  0A6D  00D9               	movwf	??___ftdiv+1
  6082  0A6E  0859               	movf	??___ftdiv+1,w
  6083  0A6F  00A6               	movwf	___ftpack@sign
  6084  0A70  160A  118A  2792   	fcall	___ftpack
  6085  0A73  1283               	bcf	3,5	;RP0=0, select bank0
  6086  0A74  1303               	bcf	3,6	;RP1=0, select bank0
  6087  0A75  0822               	movf	?___ftpack,w
  6088  0A76  00D2               	movwf	?___ftdiv
  6089  0A77  0823               	movf	?___ftpack+1,w
  6090  0A78  00D3               	movwf	?___ftdiv+1
  6091  0A79  0824               	movf	?___ftpack+2,w
  6092  0A7A  00D4               	movwf	?___ftdiv+2
  6093  0A7B  0008               	return
  6094  0A7C                     __end_of___ftdiv:	
  6095                           
  6096                           	psect	text21
  6097  133F                     __ptext21:	
  6098 ;; *************** function ___bmul *****************
  6099 ;; Defined at:
  6100 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  6101 ;; Parameters:    Size  Location     Type
  6102 ;;  multiplier      1    wreg     unsigned char 
  6103 ;;  multiplicand    1    2[BANK0 ] unsigned char 
  6104 ;; Auto vars:     Size  Location     Type
  6105 ;;  multiplier      1    5[BANK0 ] unsigned char 
  6106 ;;  product         1    4[BANK0 ] unsigned char 
  6107 ;; Return value:  Size  Location     Type
  6108 ;;                  1    wreg      unsigned char 
  6109 ;; Registers used:
  6110 ;;		wreg, status,2, status,0
  6111 ;; Tracked objects:
  6112 ;;		On entry : 0/0
  6113 ;;		On exit  : 0/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6116 ;;      Params:         0       1       0       0       0
  6117 ;;      Locals:         0       2       0       0       0
  6118 ;;      Temps:          0       1       0       0       0
  6119 ;;      Totals:         0       4       0       0       0
  6120 ;;Total ram usage:        4 bytes
  6121 ;; Hardware stack levels used:    1
  6122 ;; Hardware stack levels required when called:    3
  6123 ;; This function calls:
  6124 ;;		Nothing
  6125 ;; This function is called by:
  6126 ;;		_strtod
  6127 ;; This function uses a non-reentrant model
  6128 ;;
  6129                           
  6130                           
  6131                           ;psect for function ___bmul
  6132  133F                     ___bmul:	
  6133                           
  6134                           ;incstack = 0
  6135                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6136                           ;___bmul@multiplier stored from wreg
  6137  133F  1283               	bcf	3,5	;RP0=0, select bank0
  6138  1340  1303               	bcf	3,6	;RP1=0, select bank0
  6139  1341  00A5               	movwf	___bmul@multiplier
  6140  1342  01A4               	clrf	___bmul@product
  6141  1343                     l2282:	
  6142  1343  1C25               	btfss	___bmul@multiplier,0
  6143  1344  2B49               	goto	l2286
  6144  1345  0822               	movf	___bmul@multiplicand,w
  6145  1346  00A3               	movwf	??___bmul
  6146  1347  0823               	movf	??___bmul,w
  6147  1348  07A4               	addwf	___bmul@product,f
  6148  1349                     l2286:	
  6149  1349  1003               	clrc
  6150  134A  0DA2               	rlf	___bmul@multiplicand,f
  6151  134B  1003               	clrc
  6152  134C  0CA5               	rrf	___bmul@multiplier,f
  6153  134D  0825               	movf	___bmul@multiplier,w
  6154  134E  1D03               	btfss	3,2
  6155  134F  2B43               	goto	l2282
  6156  1350  0824               	movf	___bmul@product,w
  6157  1351  0008               	return
  6158  1352                     __end_of___bmul:	
  6159                           
  6160                           	psect	text22
  6161  15E0                     __ptext22:	
  6162 ;; *************** function ___altoft *****************
  6163 ;; Defined at:
  6164 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\altoft.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;  c               4   10[BANK0 ] long 
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;  sign            1   17[BANK0 ] unsigned char 
  6169 ;;  exp             1   16[BANK0 ] unsigned char 
  6170 ;; Return value:  Size  Location     Type
  6171 ;;                  3   10[BANK0 ] float 
  6172 ;; Registers used:
  6173 ;;		wreg, status,2, status,0, pclath, cstack
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 0/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6179 ;;      Params:         0       4       0       0       0
  6180 ;;      Locals:         0       2       0       0       0
  6181 ;;      Temps:          0       2       0       0       0
  6182 ;;      Totals:         0       8       0       0       0
  6183 ;;Total ram usage:        8 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:    4
  6186 ;; This function calls:
  6187 ;;		___ftpack
  6188 ;; This function is called by:
  6189 ;;		_strtod
  6190 ;;		_trunc
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           
  6195                           ;psect for function ___altoft
  6196  15E0                     ___altoft:	
  6197                           
  6198                           ;incstack = 0
  6199                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  6200  15E0  1283               	bcf	3,5	;RP0=0, select bank0
  6201  15E1  1303               	bcf	3,6	;RP1=0, select bank0
  6202  15E2  01B1               	clrf	___altoft@sign
  6203  15E3  308E               	movlw	142
  6204  15E4  00AE               	movwf	??___altoft
  6205  15E5  082E               	movf	??___altoft,w
  6206  15E6  00B0               	movwf	___altoft@exp
  6207  15E7  1FAD               	btfss	___altoft@c+3,7
  6208  15E8  2DF6               	goto	l2192
  6209  15E9  09AA               	comf	___altoft@c,f
  6210  15EA  09AB               	comf	___altoft@c+1,f
  6211  15EB  09AC               	comf	___altoft@c+2,f
  6212  15EC  09AD               	comf	___altoft@c+3,f
  6213  15ED  0AAA               	incf	___altoft@c,f
  6214  15EE  1903               	skipnz
  6215  15EF  0AAB               	incf	___altoft@c+1,f
  6216  15F0  1903               	skipnz
  6217  15F1  0AAC               	incf	___altoft@c+2,f
  6218  15F2  1903               	skipnz
  6219  15F3  0AAD               	incf	___altoft@c+3,f
  6220  15F4  01B1               	clrf	___altoft@sign
  6221  15F5  0AB1               	incf	___altoft@sign,f
  6222  15F6                     l2192:	
  6223  15F6  30FF               	movlw	255
  6224  15F7  052D               	andwf	___altoft@c+3,w
  6225  15F8  1903               	btfsc	3,2
  6226  15F9  2E08               	goto	l2194
  6227  15FA  3001               	movlw	1
  6228  15FB                     u2185:	
  6229  15FB  1003               	clrc
  6230  15FC  0CAD               	rrf	___altoft@c+3,f
  6231  15FD  0CAC               	rrf	___altoft@c+2,f
  6232  15FE  0CAB               	rrf	___altoft@c+1,f
  6233  15FF  0CAA               	rrf	___altoft@c,f
  6234  1600  3EFF               	addlw	-1
  6235  1601  1D03               	skipz
  6236  1602  2DFB               	goto	u2185
  6237  1603  3001               	movlw	1
  6238  1604  00AE               	movwf	??___altoft
  6239  1605  082E               	movf	??___altoft,w
  6240  1606  07B0               	addwf	___altoft@exp,f
  6241  1607  2DF6               	goto	l2192
  6242  1608                     l2194:	
  6243  1608  082A               	movf	___altoft@c,w
  6244  1609  00A2               	movwf	___ftpack@arg
  6245  160A  082B               	movf	___altoft@c+1,w
  6246  160B  00A3               	movwf	___ftpack@arg+1
  6247  160C  082C               	movf	___altoft@c+2,w
  6248  160D  00A4               	movwf	___ftpack@arg+2
  6249  160E  0830               	movf	___altoft@exp,w
  6250  160F  00AE               	movwf	??___altoft
  6251  1610  082E               	movf	??___altoft,w
  6252  1611  00A5               	movwf	___ftpack@exp
  6253  1612  0831               	movf	___altoft@sign,w
  6254  1613  00AF               	movwf	??___altoft+1
  6255  1614  082F               	movf	??___altoft+1,w
  6256  1615  00A6               	movwf	___ftpack@sign
  6257  1616  160A  118A  2792   	fcall	___ftpack
  6258  1619  1283               	bcf	3,5	;RP0=0, select bank0
  6259  161A  1303               	bcf	3,6	;RP1=0, select bank0
  6260  161B  0822               	movf	?___ftpack,w
  6261  161C  00AA               	movwf	?___altoft
  6262  161D  0823               	movf	?___ftpack+1,w
  6263  161E  00AB               	movwf	?___altoft+1
  6264  161F  0824               	movf	?___ftpack+2,w
  6265  1620  00AC               	movwf	?___altoft+2
  6266  1621  0008               	return
  6267  1622                     __end_of___altoft:	
  6268                           
  6269                           	psect	text23
  6270  1792                     __ptext23:	
  6271 ;; *************** function ___ftpack *****************
  6272 ;; Defined at:
  6273 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;  arg             3    2[BANK0 ] unsigned um
  6276 ;;  exp             1    5[BANK0 ] unsigned char 
  6277 ;;  sign            1    6[BANK0 ] unsigned char 
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;		None
  6280 ;; Return value:  Size  Location     Type
  6281 ;;                  3    2[BANK0 ] float 
  6282 ;; Registers used:
  6283 ;;		wreg, status,2, status,0
  6284 ;; Tracked objects:
  6285 ;;		On entry : 0/0
  6286 ;;		On exit  : 0/0
  6287 ;;		Unchanged: 0/0
  6288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6289 ;;      Params:         0       5       0       0       0
  6290 ;;      Locals:         0       0       0       0       0
  6291 ;;      Temps:          0       3       0       0       0
  6292 ;;      Totals:         0       8       0       0       0
  6293 ;;Total ram usage:        8 bytes
  6294 ;; Hardware stack levels used:    1
  6295 ;; Hardware stack levels required when called:    3
  6296 ;; This function calls:
  6297 ;;		Nothing
  6298 ;; This function is called by:
  6299 ;;		___altoft
  6300 ;;		___awtoft
  6301 ;;		___ftadd
  6302 ;;		___ftdiv
  6303 ;;		___ftmul
  6304 ;; This function uses a non-reentrant model
  6305 ;;
  6306                           
  6307                           
  6308                           ;psect for function ___ftpack
  6309  1792                     ___ftpack:	
  6310                           
  6311                           ;incstack = 0
  6312                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6313  1792  1283               	bcf	3,5	;RP0=0, select bank0
  6314  1793  1303               	bcf	3,6	;RP1=0, select bank0
  6315  1794  0825               	movf	___ftpack@exp,w
  6316  1795  1903               	btfsc	3,2
  6317  1796  2F9C               	goto	l2144
  6318  1797  0824               	movf	___ftpack@arg+2,w
  6319  1798  0423               	iorwf	___ftpack@arg+1,w
  6320  1799  0422               	iorwf	___ftpack@arg,w
  6321  179A  1D03               	skipz
  6322  179B  2FAF               	goto	l2150
  6323  179C                     l2144:	
  6324  179C  3000               	movlw	0
  6325  179D  00A2               	movwf	?___ftpack
  6326  179E  3000               	movlw	0
  6327  179F  00A3               	movwf	?___ftpack+1
  6328  17A0  3000               	movlw	0
  6329  17A1  00A4               	movwf	?___ftpack+2
  6330  17A2  0008               	return
  6331  17A3                     l2148:	
  6332  17A3  3001               	movlw	1
  6333  17A4  00A7               	movwf	??___ftpack
  6334  17A5  0827               	movf	??___ftpack,w
  6335  17A6  07A5               	addwf	___ftpack@exp,f
  6336  17A7  3001               	movlw	1
  6337  17A8                     u2035:	
  6338  17A8  1003               	clrc
  6339  17A9  0CA4               	rrf	___ftpack@arg+2,f
  6340  17AA  0CA3               	rrf	___ftpack@arg+1,f
  6341  17AB  0CA2               	rrf	___ftpack@arg,f
  6342  17AC  3EFF               	addlw	-1
  6343  17AD  1D03               	skipz
  6344  17AE  2FA8               	goto	u2035
  6345  17AF                     l2150:	
  6346  17AF  30FE               	movlw	254
  6347  17B0  0524               	andwf	___ftpack@arg+2,w
  6348  17B1  1903               	btfsc	3,2
  6349  17B2  2FCA               	goto	l584
  6350  17B3  2FA3               	goto	l2148
  6351  17B4                     l2152:	
  6352  17B4  3001               	movlw	1
  6353  17B5  00A7               	movwf	??___ftpack
  6354  17B6  0827               	movf	??___ftpack,w
  6355  17B7  07A5               	addwf	___ftpack@exp,f
  6356  17B8  3001               	movlw	1
  6357  17B9  07A2               	addwf	___ftpack@arg,f
  6358  17BA  3000               	movlw	0
  6359  17BB  1803               	skipnc
  6360  17BC  3001               	movlw	1
  6361  17BD  07A3               	addwf	___ftpack@arg+1,f
  6362  17BE  3000               	movlw	0
  6363  17BF  1803               	skipnc
  6364  17C0  3001               	movlw	1
  6365  17C1  07A4               	addwf	___ftpack@arg+2,f
  6366  17C2  3001               	movlw	1
  6367  17C3                     u2055:	
  6368  17C3  1003               	clrc
  6369  17C4  0CA4               	rrf	___ftpack@arg+2,f
  6370  17C5  0CA3               	rrf	___ftpack@arg+1,f
  6371  17C6  0CA2               	rrf	___ftpack@arg,f
  6372  17C7  3EFF               	addlw	-1
  6373  17C8  1D03               	skipz
  6374  17C9  2FC3               	goto	u2055
  6375  17CA                     l584:	
  6376  17CA  30FF               	movlw	255
  6377  17CB  0524               	andwf	___ftpack@arg+2,w
  6378  17CC  1903               	btfsc	3,2
  6379  17CD  2FD9               	goto	l2160
  6380  17CE  2FB4               	goto	l2152
  6381  17CF                     l2158:	
  6382  17CF  3001               	movlw	1
  6383  17D0  02A5               	subwf	___ftpack@exp,f
  6384  17D1  3001               	movlw	1
  6385  17D2                     u2075:	
  6386  17D2  1003               	clrc
  6387  17D3  0DA2               	rlf	___ftpack@arg,f
  6388  17D4  0DA3               	rlf	___ftpack@arg+1,f
  6389  17D5  0DA4               	rlf	___ftpack@arg+2,f
  6390  17D6  3EFF               	addlw	-1
  6391  17D7  1D03               	skipz
  6392  17D8  2FD2               	goto	u2075
  6393  17D9                     l2160:	
  6394  17D9  1BA3               	btfsc	___ftpack@arg+1,7
  6395  17DA  2FDF               	goto	l591
  6396  17DB  3002               	movlw	2
  6397  17DC  0225               	subwf	___ftpack@exp,w
  6398  17DD  1803               	skipnc
  6399  17DE  2FCF               	goto	l2158
  6400  17DF                     l591:	
  6401  17DF  1825               	btfsc	___ftpack@exp,0
  6402  17E0  2FE7               	goto	l592
  6403  17E1  30FF               	movlw	255
  6404  17E2  05A2               	andwf	___ftpack@arg,f
  6405  17E3  307F               	movlw	127
  6406  17E4  05A3               	andwf	___ftpack@arg+1,f
  6407  17E5  30FF               	movlw	255
  6408  17E6  05A4               	andwf	___ftpack@arg+2,f
  6409  17E7                     l592:	
  6410  17E7  1003               	clrc
  6411  17E8  0CA5               	rrf	___ftpack@exp,f
  6412  17E9  0825               	movf	___ftpack@exp,w
  6413  17EA  00A7               	movwf	??___ftpack
  6414  17EB  01A8               	clrf	??___ftpack+1
  6415  17EC  01A9               	clrf	??___ftpack+2
  6416  17ED  3010               	movlw	16
  6417  17EE                     u2115:	
  6418  17EE  1003               	clrc
  6419  17EF  0DA7               	rlf	??___ftpack,f
  6420  17F0  0DA8               	rlf	??___ftpack+1,f
  6421  17F1  0DA9               	rlf	??___ftpack+2,f
  6422  17F2  3EFF               	addlw	-1
  6423  17F3  1D03               	skipz
  6424  17F4  2FEE               	goto	u2115
  6425  17F5  0827               	movf	??___ftpack,w
  6426  17F6  04A2               	iorwf	___ftpack@arg,f
  6427  17F7  0828               	movf	??___ftpack+1,w
  6428  17F8  04A3               	iorwf	___ftpack@arg+1,f
  6429  17F9  0829               	movf	??___ftpack+2,w
  6430  17FA  04A4               	iorwf	___ftpack@arg+2,f
  6431  17FB  0826               	movf	___ftpack@sign,w
  6432  17FC  1903               	btfsc	3,2
  6433  17FD  0008               	return
  6434  17FE  17A4               	bsf	___ftpack@arg+2,7
  6435  17FF  0008               	return
  6436  1800                     __end_of___ftpack:	
  6437                           
  6438                           	psect	text24
  6439  07B0                     __ptext24:	
  6440 ;; *************** function _Setup *****************
  6441 ;; Defined at:
  6442 ;;		line 230 in file "main.c"
  6443 ;; Parameters:    Size  Location     Type
  6444 ;;		None
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;		None
  6447 ;; Return value:  Size  Location     Type
  6448 ;;                  1    wreg      void 
  6449 ;; Registers used:
  6450 ;;		wreg, status,2, status,0, pclath, cstack
  6451 ;; Tracked objects:
  6452 ;;		On entry : 0/0
  6453 ;;		On exit  : 0/0
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6456 ;;      Params:         0       0       0       0       0
  6457 ;;      Locals:         0       0       0       0       0
  6458 ;;      Temps:          0       2       0       0       0
  6459 ;;      Totals:         0       2       0       0       0
  6460 ;;Total ram usage:        2 bytes
  6461 ;; Hardware stack levels used:    1
  6462 ;; Hardware stack levels required when called:    6
  6463 ;; This function calls:
  6464 ;;		_Lcd_Clear
  6465 ;;		_Lcd_Init
  6466 ;;		_Lcd_Set_Cursor
  6467 ;; This function is called by:
  6468 ;;		_main
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           
  6473                           ;psect for function _Setup
  6474  07B0                     _Setup:	
  6475                           
  6476                           ;main.c: 232: ADCON1bits.PCFG3=0;
  6477                           
  6478                           ;incstack = 0
  6479                           ; Regs used in _Setup: [wreg+status,2+status,0+pclath+cstack]
  6480  07B0  1683               	bsf	3,5	;RP0=1, select bank1
  6481  07B1  1303               	bcf	3,6	;RP1=0, select bank1
  6482  07B2  119F               	bcf	31,3	;volatile
  6483                           
  6484                           ;main.c: 233: ADCON1bits.PCFG2=1;
  6485  07B3  151F               	bsf	31,2	;volatile
  6486                           
  6487                           ;main.c: 234: ADCON1bits.PCFG1=1;
  6488  07B4  149F               	bsf	31,1	;volatile
  6489                           
  6490                           ;main.c: 235: TRISB=0b11110001;
  6491  07B5  30F1               	movlw	241
  6492  07B6  0086               	movwf	6	;volatile
  6493                           
  6494                           ;main.c: 236: TRISC=0b00001111;
  6495  07B7  300F               	movlw	15
  6496  07B8  0087               	movwf	7	;volatile
  6497                           
  6498                           ;main.c: 237: TRISD=0b00000000;
  6499  07B9  0188               	clrf	8	;volatile
  6500                           
  6501                           ;main.c: 238: TRISAbits.TRISA5=1;
  6502  07BA  1685               	bsf	5,5	;volatile
  6503                           
  6504                           ;main.c: 239: TRISEbits.TRISE0=1;
  6505  07BB  1409               	bsf	9,0	;volatile
  6506                           
  6507                           ;main.c: 240: TRISEbits.TRISE1=1;
  6508  07BC  1489               	bsf	9,1	;volatile
  6509                           
  6510                           ;main.c: 241: TRISEbits.TRISE2=1;
  6511  07BD  1509               	bsf	9,2	;volatile
  6512                           
  6513                           ;main.c: 242: PORTB=0x00;
  6514  07BE  1283               	bcf	3,5	;RP0=0, select bank0
  6515  07BF  1303               	bcf	3,6	;RP1=0, select bank0
  6516  07C0  0186               	clrf	6	;volatile
  6517                           
  6518                           ;main.c: 243: PORTDbits.RD5=1;
  6519  07C1  1688               	bsf	8,5	;volatile
  6520                           
  6521                           ;main.c: 244: PORTDbits.RD6=0;
  6522  07C2  1308               	bcf	8,6	;volatile
  6523                           
  6524                           ;main.c: 245: PORTDbits.RD7=1;
  6525  07C3  1788               	bsf	8,7	;volatile
  6526                           
  6527                           ;main.c: 246: OPTION_REGbits.nRBPU=0;
  6528  07C4  1683               	bsf	3,5	;RP0=1, select bank1
  6529  07C5  1303               	bcf	3,6	;RP1=0, select bank1
  6530  07C6  1381               	bcf	1,7	;volatile
  6531                           
  6532                           ;main.c: 247: OPTION_REGbits.INTEDG=0;
  6533  07C7  1301               	bcf	1,6	;volatile
  6534                           
  6535                           ;main.c: 248: OPTION_REGbits.T0CS=0;
  6536  07C8  1281               	bcf	1,5	;volatile
  6537                           
  6538                           ;main.c: 249: OPTION_REGbits.PSA=0;
  6539  07C9  1181               	bcf	1,3	;volatile
  6540                           
  6541                           ;main.c: 250: OPTION_REGbits.PS=0b011;
  6542  07CA  0801               	movf	1,w	;volatile
  6543  07CB  39F8               	andlw	-8
  6544  07CC  3803               	iorlw	3
  6545  07CD  0081               	movwf	1	;volatile
  6546                           
  6547                           ;main.c: 251: INTCONbits.RBIE=1;
  6548  07CE  158B               	bsf	11,3	;volatile
  6549                           
  6550                           ;main.c: 252: INTCONbits.TMR0IE=0;
  6551  07CF  128B               	bcf	11,5	;volatile
  6552                           
  6553                           ;main.c: 253: INTCONbits.INTE=1;
  6554  07D0  160B               	bsf	11,4	;volatile
  6555                           
  6556                           ;main.c: 254: PIE1bits.TMR1IE=1;
  6557  07D1  140C               	bsf	12,0	;volatile
  6558                           
  6559                           ;main.c: 255: INTCONbits.PEIE=1;
  6560  07D2  170B               	bsf	11,6	;volatile
  6561                           
  6562                           ;main.c: 256: Lcd_Init();
  6563  07D3  120A  158A  20C3  120A  118A  	fcall	_Lcd_Init
  6564                           
  6565                           ;main.c: 257: Lcd_Clear();
  6566  07D8  160A  118A  2324  120A  118A  	fcall	_Lcd_Clear
  6567                           
  6568                           ;main.c: 258: Lcd_Set_Cursor(1,1);
  6569  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  6570  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  6571  07DF  01A6               	clrf	Lcd_Set_Cursor@b
  6572  07E0  0AA6               	incf	Lcd_Set_Cursor@b,f
  6573  07E1  3001               	movlw	1
  6574  07E2  160A  118A  2622  120A  118A  	fcall	_Lcd_Set_Cursor
  6575                           
  6576                           ;main.c: 259: RD4=1;
  6577  07E7  1283               	bcf	3,5	;RP0=0, select bank0
  6578  07E8  1303               	bcf	3,6	;RP1=0, select bank0
  6579  07E9  1608               	bsf	8,4	;volatile
  6580                           
  6581                           ;main.c: 260: RC6=1;
  6582  07EA  1707               	bsf	7,6	;volatile
  6583                           
  6584                           ;main.c: 261: INTCONbits.INTF=0;
  6585  07EB  108B               	bcf	11,1	;volatile
  6586                           
  6587                           ;main.c: 262: INTCONbits.RBIF=0;
  6588  07EC  100B               	bcf	11,0	;volatile
  6589                           
  6590                           ;main.c: 263: INTCONbits.TMR0IF=0;
  6591  07ED  110B               	bcf	11,2	;volatile
  6592                           
  6593                           ;main.c: 264: PIR1bits.TMR1IF=0;
  6594  07EE  100C               	bcf	12,0	;volatile
  6595                           
  6596                           ;main.c: 265: _delay((unsigned long)((100)*(4000000/4000.0)));
  6597  07EF  3082               	movlw	130
  6598  07F0  1283               	bcf	3,5	;RP0=0, select bank0
  6599  07F1  1303               	bcf	3,6	;RP1=0, select bank0
  6600  07F2  00AE               	movwf	??_Setup+1
  6601  07F3  30DD               	movlw	221
  6602  07F4  00AD               	movwf	??_Setup
  6603  07F5                     u4157:	
  6604  07F5  0BAD               	decfsz	??_Setup,f
  6605  07F6  2FF5               	goto	u4157
  6606  07F7  0BAE               	decfsz	??_Setup+1,f
  6607  07F8  2FF5               	goto	u4157
  6608                           
  6609                           ;main.c: 266: INTCONbits.GIE=1;
  6610  07F9  178B               	bsf	11,7	;volatile
  6611                           
  6612                           ;main.c: 267: modo=0;
  6613  07FA  1283               	bcf	3,5	;RP0=0, select bank0
  6614  07FB  1303               	bcf	3,6	;RP1=0, select bank0
  6615  07FC  01ED               	clrf	_modo
  6616  07FD  0008               	return
  6617  07FE                     __end_of_Setup:	
  6618                           
  6619                           	psect	text25
  6620  1622                     __ptext25:	
  6621 ;; *************** function _Lcd_Set_Cursor *****************
  6622 ;; Defined at:
  6623 ;;		line 41 in file "lcd.h"
  6624 ;; Parameters:    Size  Location     Type
  6625 ;;  a               1    wreg     unsigned char 
  6626 ;;  b               1    6[BANK0 ] unsigned char 
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;  a               1    9[BANK0 ] unsigned char 
  6629 ;;  temp            1   12[BANK0 ] unsigned char 
  6630 ;;  y               1   11[BANK0 ] unsigned char 
  6631 ;;  z               1   10[BANK0 ] unsigned char 
  6632 ;; Return value:  Size  Location     Type
  6633 ;;                  1    wreg      void 
  6634 ;; Registers used:
  6635 ;;		wreg, status,2, status,0, pclath, cstack
  6636 ;; Tracked objects:
  6637 ;;		On entry : 0/0
  6638 ;;		On exit  : 0/0
  6639 ;;		Unchanged: 0/0
  6640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6641 ;;      Params:         0       1       0       0       0
  6642 ;;      Locals:         0       4       0       0       0
  6643 ;;      Temps:          0       2       0       0       0
  6644 ;;      Totals:         0       7       0       0       0
  6645 ;;Total ram usage:        7 bytes
  6646 ;; Hardware stack levels used:    1
  6647 ;; Hardware stack levels required when called:    5
  6648 ;; This function calls:
  6649 ;;		_Lcd_Cmd
  6650 ;; This function is called by:
  6651 ;;		_Setup
  6652 ;;		_main
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           
  6657                           ;psect for function _Lcd_Set_Cursor
  6658  1622                     _Lcd_Set_Cursor:	
  6659                           
  6660                           ;incstack = 0
  6661                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  6662                           ;Lcd_Set_Cursor@a stored from wreg
  6663  1622  1283               	bcf	3,5	;RP0=0, select bank0
  6664  1623  1303               	bcf	3,6	;RP1=0, select bank0
  6665  1624  00A9               	movwf	Lcd_Set_Cursor@a
  6666                           
  6667                           ;lcd.h: 43: char temp,z,y;
  6668                           ;lcd.h: 44: if(a == 1)
  6669  1625  0329               	decf	Lcd_Set_Cursor@a,w
  6670  1626  1D03               	btfss	3,2
  6671  1627  2E4B               	goto	l2588
  6672                           
  6673                           ;lcd.h: 45: {
  6674                           ;lcd.h: 46: temp = 0x80 + b - 1;
  6675  1628  0826               	movf	Lcd_Set_Cursor@b,w
  6676  1629  3E7F               	addlw	127
  6677  162A  00A7               	movwf	??_Lcd_Set_Cursor
  6678  162B  0827               	movf	??_Lcd_Set_Cursor,w
  6679  162C  00AC               	movwf	Lcd_Set_Cursor@temp
  6680                           
  6681                           ;lcd.h: 47: z = temp>>4;
  6682  162D  082C               	movf	Lcd_Set_Cursor@temp,w
  6683  162E  00A7               	movwf	??_Lcd_Set_Cursor
  6684  162F  3004               	movlw	4
  6685  1630                     u3115:	
  6686  1630  1003               	clrc
  6687  1631  0CA7               	rrf	??_Lcd_Set_Cursor,f
  6688  1632  3EFF               	addlw	-1
  6689  1633  1D03               	skipz
  6690  1634  2E30               	goto	u3115
  6691  1635  0827               	movf	??_Lcd_Set_Cursor,w
  6692  1636  00A8               	movwf	??_Lcd_Set_Cursor+1
  6693  1637  0828               	movf	??_Lcd_Set_Cursor+1,w
  6694  1638  00AA               	movwf	Lcd_Set_Cursor@z
  6695                           
  6696                           ;lcd.h: 48: y = temp & 0x0F;
  6697  1639  082C               	movf	Lcd_Set_Cursor@temp,w
  6698  163A  390F               	andlw	15
  6699  163B  00A7               	movwf	??_Lcd_Set_Cursor
  6700  163C  0827               	movf	??_Lcd_Set_Cursor,w
  6701  163D  00AB               	movwf	Lcd_Set_Cursor@y
  6702                           
  6703                           ;lcd.h: 49: Lcd_Cmd(z);
  6704  163E  082A               	movf	Lcd_Set_Cursor@z,w
  6705  163F  160A  118A  2399  160A  118A  	fcall	_Lcd_Cmd
  6706                           
  6707                           ;lcd.h: 50: Lcd_Cmd(y);
  6708  1644  1283               	bcf	3,5	;RP0=0, select bank0
  6709  1645  1303               	bcf	3,6	;RP1=0, select bank0
  6710  1646  082B               	movf	Lcd_Set_Cursor@y,w
  6711  1647  160A  118A  2399   	fcall	_Lcd_Cmd
  6712                           
  6713                           ;lcd.h: 51: }
  6714  164A  0008               	return
  6715  164B                     l2588:	
  6716                           
  6717                           ;lcd.h: 52: else if(a == 2)
  6718  164B  3002               	movlw	2
  6719  164C  1283               	bcf	3,5	;RP0=0, select bank0
  6720  164D  1303               	bcf	3,6	;RP1=0, select bank0
  6721  164E  0629               	xorwf	Lcd_Set_Cursor@a,w
  6722  164F  1D03               	btfss	3,2
  6723  1650  0008               	return
  6724                           
  6725                           ;lcd.h: 53: {
  6726                           ;lcd.h: 54: temp = 0xC0 + b - 1;
  6727  1651  0826               	movf	Lcd_Set_Cursor@b,w
  6728  1652  3EBF               	addlw	191
  6729  1653  00A7               	movwf	??_Lcd_Set_Cursor
  6730  1654  0827               	movf	??_Lcd_Set_Cursor,w
  6731  1655  00AC               	movwf	Lcd_Set_Cursor@temp
  6732                           
  6733                           ;lcd.h: 55: z = temp>>4;
  6734  1656  082C               	movf	Lcd_Set_Cursor@temp,w
  6735  1657  00A7               	movwf	??_Lcd_Set_Cursor
  6736  1658  3004               	movlw	4
  6737  1659                     u3135:	
  6738  1659  1003               	clrc
  6739  165A  0CA7               	rrf	??_Lcd_Set_Cursor,f
  6740  165B  3EFF               	addlw	-1
  6741  165C  1D03               	skipz
  6742  165D  2E59               	goto	u3135
  6743  165E  0827               	movf	??_Lcd_Set_Cursor,w
  6744  165F  00A8               	movwf	??_Lcd_Set_Cursor+1
  6745  1660  0828               	movf	??_Lcd_Set_Cursor+1,w
  6746  1661  00AA               	movwf	Lcd_Set_Cursor@z
  6747                           
  6748                           ;lcd.h: 56: y = temp & 0x0F;
  6749  1662  082C               	movf	Lcd_Set_Cursor@temp,w
  6750  1663  390F               	andlw	15
  6751  1664  00A7               	movwf	??_Lcd_Set_Cursor
  6752  1665  0827               	movf	??_Lcd_Set_Cursor,w
  6753  1666  00AB               	movwf	Lcd_Set_Cursor@y
  6754                           
  6755                           ;lcd.h: 57: Lcd_Cmd(z);
  6756  1667  082A               	movf	Lcd_Set_Cursor@z,w
  6757  1668  160A  118A  2399  160A  118A  	fcall	_Lcd_Cmd
  6758                           
  6759                           ;lcd.h: 58: Lcd_Cmd(y);
  6760  166D  1283               	bcf	3,5	;RP0=0, select bank0
  6761  166E  1303               	bcf	3,6	;RP1=0, select bank0
  6762  166F  082B               	movf	Lcd_Set_Cursor@y,w
  6763  1670  160A  118A  2399   	fcall	_Lcd_Cmd
  6764  1673  0008               	return
  6765  1674                     __end_of_Lcd_Set_Cursor:	
  6766                           
  6767                           	psect	text26
  6768  08C3                     __ptext26:	
  6769 ;; *************** function _Lcd_Init *****************
  6770 ;; Defined at:
  6771 ;;		line 62 in file "lcd.h"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;		None
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;		None
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  1    wreg      void 
  6778 ;; Registers used:
  6779 ;;		wreg, status,2, status,0, pclath, cstack
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6785 ;;      Params:         0       0       0       0       0
  6786 ;;      Locals:         0       0       0       0       0
  6787 ;;      Temps:          0       2       0       0       0
  6788 ;;      Totals:         0       2       0       0       0
  6789 ;;Total ram usage:        2 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    5
  6792 ;; This function calls:
  6793 ;;		_Lcd_Cmd
  6794 ;;		_Lcd_Port
  6795 ;; This function is called by:
  6796 ;;		_Setup
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           
  6801                           ;psect for function _Lcd_Init
  6802  08C3                     _Lcd_Init:	
  6803                           
  6804                           ;lcd.h: 64: Lcd_Port(0x00);
  6805                           
  6806                           ;incstack = 0
  6807                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  6808  08C3  3000               	movlw	0
  6809  08C4  160A  118A  2366  120A  158A  	fcall	_Lcd_Port
  6810                           
  6811                           ;lcd.h: 65: _delay((unsigned long)((20)*(4000000/4000.0)));
  6812  08C9  301A               	movlw	26
  6813  08CA  1283               	bcf	3,5	;RP0=0, select bank0
  6814  08CB  1303               	bcf	3,6	;RP1=0, select bank0
  6815  08CC  00A7               	movwf	??_Lcd_Init+1
  6816  08CD  30F7               	movlw	247
  6817  08CE  00A6               	movwf	??_Lcd_Init
  6818  08CF                     u4167:	
  6819  08CF  0BA6               	decfsz	??_Lcd_Init,f
  6820  08D0  28CF               	goto	u4167
  6821  08D1  0BA7               	decfsz	??_Lcd_Init+1,f
  6822  08D2  28CF               	goto	u4167
  6823  08D3  28D4               	nop2
  6824                           
  6825                           ;lcd.h: 66: Lcd_Cmd(0x03);
  6826  08D4  3003               	movlw	3
  6827  08D5  160A  118A  2399  120A  158A  	fcall	_Lcd_Cmd
  6828                           
  6829                           ;lcd.h: 67: _delay((unsigned long)((5)*(4000000/4000.0)));
  6830  08DA  3007               	movlw	7
  6831  08DB  1283               	bcf	3,5	;RP0=0, select bank0
  6832  08DC  1303               	bcf	3,6	;RP1=0, select bank0
  6833  08DD  00A7               	movwf	??_Lcd_Init+1
  6834  08DE  307C               	movlw	124
  6835  08DF  00A6               	movwf	??_Lcd_Init
  6836  08E0                     u4177:	
  6837  08E0  0BA6               	decfsz	??_Lcd_Init,f
  6838  08E1  28E0               	goto	u4177
  6839  08E2  0BA7               	decfsz	??_Lcd_Init+1,f
  6840  08E3  28E0               	goto	u4177
  6841  08E4  0000               	nop
  6842                           
  6843                           ;lcd.h: 68: Lcd_Cmd(0x03);
  6844  08E5  3003               	movlw	3
  6845  08E6  160A  118A  2399  120A  158A  	fcall	_Lcd_Cmd
  6846                           
  6847                           ;lcd.h: 69: _delay((unsigned long)((11)*(4000000/4000.0)));
  6848  08EB  300F               	movlw	15
  6849  08EC  1283               	bcf	3,5	;RP0=0, select bank0
  6850  08ED  1303               	bcf	3,6	;RP1=0, select bank0
  6851  08EE  00A7               	movwf	??_Lcd_Init+1
  6852  08EF  3047               	movlw	71
  6853  08F0  00A6               	movwf	??_Lcd_Init
  6854  08F1                     u4187:	
  6855  08F1  0BA6               	decfsz	??_Lcd_Init,f
  6856  08F2  28F1               	goto	u4187
  6857  08F3  0BA7               	decfsz	??_Lcd_Init+1,f
  6858  08F4  28F1               	goto	u4187
  6859                           
  6860                           ;lcd.h: 70: Lcd_Cmd(0x03);
  6861  08F5  3003               	movlw	3
  6862  08F6  160A  118A  2399  120A  158A  	fcall	_Lcd_Cmd
  6863                           
  6864                           ;lcd.h: 72: Lcd_Cmd(0x02);
  6865  08FB  3002               	movlw	2
  6866  08FC  160A  118A  2399  120A  158A  	fcall	_Lcd_Cmd
  6867                           
  6868                           ;lcd.h: 73: Lcd_Cmd(0x02);
  6869  0901  3002               	movlw	2
  6870  0902  160A  118A  2399  120A  158A  	fcall	_Lcd_Cmd
  6871                           
  6872                           ;lcd.h: 74: Lcd_Cmd(0x08);
  6873  0907  3008               	movlw	8
  6874  0908  160A  118A  2399  120A  158A  	fcall	_Lcd_Cmd
  6875                           
  6876                           ;lcd.h: 75: Lcd_Cmd(0x00);
  6877  090D  3000               	movlw	0
  6878  090E  160A  118A  2399  120A  158A  	fcall	_Lcd_Cmd
  6879                           
  6880                           ;lcd.h: 76: Lcd_Cmd(0x0C);
  6881  0913  300C               	movlw	12
  6882  0914  160A  118A  2399  120A  158A  	fcall	_Lcd_Cmd
  6883                           
  6884                           ;lcd.h: 77: Lcd_Cmd(0x00);
  6885  0919  3000               	movlw	0
  6886  091A  160A  118A  2399  120A  158A  	fcall	_Lcd_Cmd
  6887                           
  6888                           ;lcd.h: 78: Lcd_Cmd(0x06);
  6889  091F  3006               	movlw	6
  6890  0920  160A  118A  2399   	fcall	_Lcd_Cmd
  6891  0923  0008               	return
  6892  0924                     __end_of_Lcd_Init:	
  6893                           
  6894                           	psect	text27
  6895  1324                     __ptext27:	
  6896 ;; *************** function _Lcd_Clear *****************
  6897 ;; Defined at:
  6898 ;;		line 35 in file "lcd.h"
  6899 ;; Parameters:    Size  Location     Type
  6900 ;;		None
  6901 ;; Auto vars:     Size  Location     Type
  6902 ;;		None
  6903 ;; Return value:  Size  Location     Type
  6904 ;;                  2   86[None  ] int 
  6905 ;; Registers used:
  6906 ;;		wreg, status,2, status,0, pclath, cstack
  6907 ;; Tracked objects:
  6908 ;;		On entry : 0/0
  6909 ;;		On exit  : 0/0
  6910 ;;		Unchanged: 0/0
  6911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6912 ;;      Params:         0       0       0       0       0
  6913 ;;      Locals:         0       0       0       0       0
  6914 ;;      Temps:          0       0       0       0       0
  6915 ;;      Totals:         0       0       0       0       0
  6916 ;;Total ram usage:        0 bytes
  6917 ;; Hardware stack levels used:    1
  6918 ;; Hardware stack levels required when called:    5
  6919 ;; This function calls:
  6920 ;;		_Lcd_Cmd
  6921 ;; This function is called by:
  6922 ;;		_Setup
  6923 ;; This function uses a non-reentrant model
  6924 ;;
  6925                           
  6926                           
  6927                           ;psect for function _Lcd_Clear
  6928  1324                     _Lcd_Clear:	
  6929                           
  6930                           ;lcd.h: 37: Lcd_Cmd(0);
  6931                           
  6932                           ;incstack = 0
  6933                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  6934  1324  3000               	movlw	0
  6935  1325  160A  118A  2399  160A  118A  	fcall	_Lcd_Cmd
  6936                           
  6937                           ;lcd.h: 38: Lcd_Cmd(1);
  6938  132A  3001               	movlw	1
  6939  132B  160A  118A  2399   	fcall	_Lcd_Cmd
  6940  132E  0008               	return
  6941  132F                     __end_of_Lcd_Clear:	
  6942                           
  6943                           	psect	text28
  6944  1399                     __ptext28:	
  6945 ;; *************** function _Lcd_Cmd *****************
  6946 ;; Defined at:
  6947 ;;		line 26 in file "lcd.h"
  6948 ;; Parameters:    Size  Location     Type
  6949 ;;  a               1    wreg     unsigned char 
  6950 ;; Auto vars:     Size  Location     Type
  6951 ;;  a               1    5[BANK0 ] unsigned char 
  6952 ;; Return value:  Size  Location     Type
  6953 ;;                  1    wreg      void 
  6954 ;; Registers used:
  6955 ;;		wreg, status,2, status,0, pclath, cstack
  6956 ;; Tracked objects:
  6957 ;;		On entry : 0/0
  6958 ;;		On exit  : 0/0
  6959 ;;		Unchanged: 0/0
  6960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6961 ;;      Params:         0       0       0       0       0
  6962 ;;      Locals:         0       1       0       0       0
  6963 ;;      Temps:          0       2       0       0       0
  6964 ;;      Totals:         0       3       0       0       0
  6965 ;;Total ram usage:        3 bytes
  6966 ;; Hardware stack levels used:    1
  6967 ;; Hardware stack levels required when called:    4
  6968 ;; This function calls:
  6969 ;;		_Lcd_Port
  6970 ;; This function is called by:
  6971 ;;		_Lcd_Clear
  6972 ;;		_Lcd_Set_Cursor
  6973 ;;		_Lcd_Init
  6974 ;;		_Lcd_Shift_Right
  6975 ;;		_Lcd_Shift_Left
  6976 ;; This function uses a non-reentrant model
  6977 ;;
  6978                           
  6979                           
  6980                           ;psect for function _Lcd_Cmd
  6981  1399                     _Lcd_Cmd:	
  6982                           
  6983                           ;incstack = 0
  6984                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  6985                           ;Lcd_Cmd@a stored from wreg
  6986  1399  1283               	bcf	3,5	;RP0=0, select bank0
  6987  139A  1303               	bcf	3,6	;RP1=0, select bank0
  6988  139B  00A5               	movwf	Lcd_Cmd@a
  6989                           
  6990                           ;lcd.h: 28: RC4 = 0;
  6991  139C  1207               	bcf	7,4	;volatile
  6992                           
  6993                           ;lcd.h: 29: Lcd_Port(a);
  6994  139D  0825               	movf	Lcd_Cmd@a,w
  6995  139E  160A  118A  2366  160A  118A  	fcall	_Lcd_Port
  6996                           
  6997                           ;lcd.h: 30: RC5 = 1;
  6998  13A3  1283               	bcf	3,5	;RP0=0, select bank0
  6999  13A4  1303               	bcf	3,6	;RP1=0, select bank0
  7000  13A5  1687               	bsf	7,5	;volatile
  7001                           
  7002                           ;lcd.h: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
  7003  13A6  3006               	movlw	6
  7004  13A7  1283               	bcf	3,5	;RP0=0, select bank0
  7005  13A8  1303               	bcf	3,6	;RP1=0, select bank0
  7006  13A9  00A4               	movwf	??_Lcd_Cmd+1
  7007  13AA  302F               	movlw	47
  7008  13AB  00A3               	movwf	??_Lcd_Cmd
  7009  13AC                     u4197:	
  7010  13AC  0BA3               	decfsz	??_Lcd_Cmd,f
  7011  13AD  2BAC               	goto	u4197
  7012  13AE  0BA4               	decfsz	??_Lcd_Cmd+1,f
  7013  13AF  2BAC               	goto	u4197
  7014  13B0  2BB1               	nop2
  7015                           
  7016                           ;lcd.h: 32: RC5 = 0;
  7017  13B1  1283               	bcf	3,5	;RP0=0, select bank0
  7018  13B2  1303               	bcf	3,6	;RP1=0, select bank0
  7019  13B3  1287               	bcf	7,5	;volatile
  7020  13B4  0008               	return
  7021  13B5                     __end_of_Lcd_Cmd:	
  7022                           
  7023                           	psect	text29
  7024  1674                     __ptext29:	
  7025 ;; *************** function _Navkey *****************
  7026 ;; Defined at:
  7027 ;;		line 186 in file "main.c"
  7028 ;; Parameters:    Size  Location     Type
  7029 ;;		None
  7030 ;; Auto vars:     Size  Location     Type
  7031 ;;		None
  7032 ;; Return value:  Size  Location     Type
  7033 ;;                  1    wreg      void 
  7034 ;; Registers used:
  7035 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7036 ;; Tracked objects:
  7037 ;;		On entry : 0/0
  7038 ;;		On exit  : 0/0
  7039 ;;		Unchanged: 0/0
  7040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7041 ;;      Params:         0       0       0       0       0
  7042 ;;      Locals:         0       0       0       0       0
  7043 ;;      Temps:          0       1       0       0       0
  7044 ;;      Totals:         0       1       0       0       0
  7045 ;;Total ram usage:        1 bytes
  7046 ;; Hardware stack levels used:    1
  7047 ;; Hardware stack levels required when called:    4
  7048 ;; This function calls:
  7049 ;;		_strcpy
  7050 ;; This function is called by:
  7051 ;;		_main
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           
  7056                           ;psect for function _Navkey
  7057  1674                     _Navkey:	
  7058                           
  7059                           ;main.c: 198: if(RD4)
  7060                           
  7061                           ;incstack = 0
  7062                           ; Regs used in _Navkey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7063  1674  1283               	bcf	3,5	;RP0=0, select bank0
  7064  1675  1303               	bcf	3,6	;RP1=0, select bank0
  7065  1676  1E08               	btfss	8,4	;volatile
  7066  1677  0008               	return
  7067                           
  7068                           ;main.c: 199: {
  7069                           ;main.c: 200: if((!RA5)&&(modo==3))
  7070  1678  1A85               	btfsc	5,5	;volatile
  7071  1679  2E92               	goto	l169
  7072  167A  3003               	movlw	3
  7073  167B  066D               	xorwf	_modo,w
  7074  167C  1D03               	btfss	3,2
  7075  167D  2E92               	goto	l169
  7076  167E                     l170:	
  7077                           ;main.c: 201: {
  7078                           ;main.c: 202: while(!RA5){}
  7079                           
  7080  167E  1E85               	btfss	5,5	;volatile
  7081  167F  2E7E               	goto	l170
  7082                           
  7083                           ;main.c: 203: if(seleccion==1)
  7084  1680  036C               	decf	_seleccion,w
  7085  1681  1D03               	btfss	3,2
  7086  1682  2E8E               	goto	l2950
  7087                           
  7088                           ;main.c: 204: {
  7089                           ;main.c: 205: strcpy(num,"");
  7090  1683  30EA               	movlw	(low (_num| 0))& (0+255)
  7091  1684  00A2               	movwf	strcpy@to
  7092  1685  3000               	movlw	0
  7093  1686  00A3               	movwf	strcpy@to+1
  7094  1687  3077               	movlw	(low (((STR_24+6)-__stringbase)| (0+32768)))& (0+255)
  7095  1688  00A4               	movwf	strcpy@from
  7096  1689  3080               	movlw	128
  7097  168A  00A5               	movwf	strcpy@from+1
  7098  168B  160A  118A  23B5   	fcall	_strcpy
  7099  168E                     l2950:	
  7100                           
  7101                           ;main.c: 206: }
  7102                           ;main.c: 207: seleccion=0;
  7103  168E  1283               	bcf	3,5	;RP0=0, select bank0
  7104  168F  1303               	bcf	3,6	;RP1=0, select bank0
  7105  1690  01EC               	clrf	_seleccion
  7106                           
  7107                           ;main.c: 208: }
  7108  1691  0008               	return
  7109  1692                     l169:	
  7110                           
  7111                           ;main.c: 209: else if((!RE2)&&(modo==3))
  7112  1692  1909               	btfsc	9,2	;volatile
  7113  1693  2EAD               	goto	l175
  7114  1694  3003               	movlw	3
  7115  1695  066D               	xorwf	_modo,w
  7116  1696  1D03               	btfss	3,2
  7117  1697  2EAD               	goto	l175
  7118  1698                     l176:	
  7119                           ;main.c: 210: {
  7120                           ;main.c: 211: while(!RE2){}
  7121                           
  7122  1698  1D09               	btfss	9,2	;volatile
  7123  1699  2E98               	goto	l176
  7124                           
  7125                           ;main.c: 212: if(seleccion==0)
  7126  169A  086C               	movf	_seleccion,w
  7127  169B  1D03               	btfss	3,2
  7128  169C  2EA8               	goto	l2960
  7129                           
  7130                           ;main.c: 213: {
  7131                           ;main.c: 214: strcpy(num,"");
  7132  169D  30EA               	movlw	(low (_num| 0))& (0+255)
  7133  169E  00A2               	movwf	strcpy@to
  7134  169F  3000               	movlw	0
  7135  16A0  00A3               	movwf	strcpy@to+1
  7136  16A1  3077               	movlw	(low (((STR_24+6)-__stringbase)| (0+32768)))& (0+255)
  7137  16A2  00A4               	movwf	strcpy@from
  7138  16A3  3080               	movlw	128
  7139  16A4  00A5               	movwf	strcpy@from+1
  7140  16A5  160A  118A  23B5   	fcall	_strcpy
  7141  16A8                     l2960:	
  7142                           
  7143                           ;main.c: 215: }
  7144                           ;main.c: 216: seleccion=1;
  7145  16A8  1283               	bcf	3,5	;RP0=0, select bank0
  7146  16A9  1303               	bcf	3,6	;RP1=0, select bank0
  7147  16AA  01EC               	clrf	_seleccion
  7148  16AB  0AEC               	incf	_seleccion,f
  7149                           
  7150                           ;main.c: 217: }
  7151  16AC  0008               	return
  7152  16AD                     l175:	
  7153                           
  7154                           ;main.c: 218: else if(!RE0)
  7155  16AD  1809               	btfsc	9,0	;volatile
  7156  16AE  2EBF               	goto	l181
  7157  16AF                     l182:	
  7158                           ;main.c: 219: {
  7159                           ;main.c: 220: while(!RE0){}
  7160                           
  7161  16AF  1C09               	btfss	9,0	;volatile
  7162  16B0  2EAF               	goto	l182
  7163                           
  7164                           ;main.c: 221: (modo<3)? modo++:modo=3;
  7165  16B1  3003               	movlw	3
  7166  16B2  026D               	subwf	_modo,w
  7167  16B3  1803               	skipnc
  7168  16B4  2EBA               	goto	l2968
  7169  16B5  3001               	movlw	1
  7170  16B6  00A9               	movwf	??_Navkey
  7171  16B7  0829               	movf	??_Navkey,w
  7172  16B8  07ED               	addwf	_modo,f
  7173  16B9  0008               	return
  7174  16BA                     l2968:	
  7175  16BA  3003               	movlw	3
  7176  16BB  00A9               	movwf	??_Navkey
  7177  16BC  0829               	movf	??_Navkey,w
  7178  16BD  00ED               	movwf	_modo
  7179                           
  7180                           ;main.c: 222: }
  7181  16BE  0008               	return
  7182  16BF                     l181:	
  7183                           
  7184                           ;main.c: 223: else if(!RE1)
  7185  16BF  1889               	btfsc	9,1	;volatile
  7186  16C0  0008               	return
  7187  16C1                     l191:	
  7188                           ;main.c: 224: {
  7189                           ;main.c: 225: while(!RE1){}
  7190                           
  7191  16C1  1C89               	btfss	9,1	;volatile
  7192  16C2  2EC1               	goto	l191
  7193                           
  7194                           ;main.c: 226: (modo>0)? modo--:modo=0;
  7195  16C3  086D               	movf	_modo,w
  7196  16C4  1903               	btfsc	3,2
  7197  16C5  2EC9               	goto	l2976
  7198  16C6  3001               	movlw	1
  7199  16C7  02ED               	subwf	_modo,f
  7200  16C8  0008               	return
  7201  16C9                     l2976:	
  7202  16C9  01ED               	clrf	_modo
  7203  16CA  0008               	return
  7204  16CB                     __end_of_Navkey:	
  7205                           
  7206                           	psect	text30
  7207  13B5                     __ptext30:	
  7208 ;; *************** function _strcpy *****************
  7209 ;; Defined at:
  7210 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcpy.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;  to              2    2[BANK0 ] PTR unsigned char 
  7213 ;;		 -> s(16), num(4), 
  7214 ;;  from            2    4[BANK0 ] PTR const unsigned char 
  7215 ;;		 -> STR_21(1), STR_18(1), STR_15(1), STR_14(1), 
  7216 ;;		 -> STR_13(1), floatToString@string(16), 
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;  cp              2    7[BANK0 ] PTR unsigned char 
  7219 ;;		 -> s(16), num(4), 
  7220 ;; Return value:  Size  Location     Type
  7221 ;;                  2    2[BANK0 ] PTR unsigned char 
  7222 ;; Registers used:
  7223 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  7224 ;; Tracked objects:
  7225 ;;		On entry : 0/0
  7226 ;;		On exit  : 0/0
  7227 ;;		Unchanged: 0/0
  7228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7229 ;;      Params:         0       4       0       0       0
  7230 ;;      Locals:         0       2       0       0       0
  7231 ;;      Temps:          0       1       0       0       0
  7232 ;;      Totals:         0       7       0       0       0
  7233 ;;Total ram usage:        7 bytes
  7234 ;; Hardware stack levels used:    1
  7235 ;; Hardware stack levels required when called:    3
  7236 ;; This function calls:
  7237 ;;		Nothing
  7238 ;; This function is called by:
  7239 ;;		_floatToString
  7240 ;;		_Navkey
  7241 ;;		_main
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           
  7246                           ;psect for function _strcpy
  7247  13B5                     _strcpy:	
  7248                           
  7249                           ;incstack = 0
  7250                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  7251  13B5  1283               	bcf	3,5	;RP0=0, select bank0
  7252  13B6  1303               	bcf	3,6	;RP1=0, select bank0
  7253  13B7  0822               	movf	strcpy@to,w
  7254  13B8  00A7               	movwf	strcpy@cp
  7255  13B9  0823               	movf	strcpy@to+1,w
  7256  13BA  00A8               	movwf	strcpy@cp+1
  7257  13BB                     l2696:	
  7258  13BB  0825               	movf	strcpy@from+1,w
  7259  13BC  00FF               	movwf	127
  7260  13BD  0824               	movf	strcpy@from,w
  7261  13BE  0084               	movwf	4
  7262  13BF  120A  158A  2000  160A  118A  	fcall	stringtab
  7263  13C4  00A6               	movwf	??_strcpy
  7264  13C5  0827               	movf	strcpy@cp,w
  7265  13C6  0084               	movwf	4
  7266  13C7  1783               	bsf	3,7
  7267  13C8  1C28               	btfss	strcpy@cp+1,0
  7268  13C9  1383               	bcf	3,7
  7269  13CA  0826               	movf	??_strcpy,w
  7270  13CB  0080               	movwf	0
  7271  13CC  0800               	movf	0,w
  7272  13CD  1903               	btfsc	3,2
  7273  13CE  0008               	return
  7274  13CF  3001               	movlw	1
  7275  13D0  07A7               	addwf	strcpy@cp,f
  7276  13D1  1803               	skipnc
  7277  13D2  0AA8               	incf	strcpy@cp+1,f
  7278  13D3  3001               	movlw	1
  7279  13D4  07A4               	addwf	strcpy@from,f
  7280  13D5  1803               	skipnc
  7281  13D6  0AA5               	incf	strcpy@from+1,f
  7282  13D7  2BBB               	goto	l2696
  7283  13D8                     __end_of_strcpy:	
  7284                           ;	Return value of _strcpy is never used
  7285                           
  7286                           
  7287                           	psect	text31
  7288  155E                     __ptext31:	
  7289 ;; *************** function _Lcd_Write_String *****************
  7290 ;; Defined at:
  7291 ;;		line 97 in file "lcd.h"
  7292 ;; Parameters:    Size  Location     Type
  7293 ;;  a               2    7[BANK0 ] PTR unsigned char 
  7294 ;;		 -> STR_28(7), STR_27(7), STR_26(7), STR_25(7), 
  7295 ;;		 -> STR_24(7), STR_23(17), STR_22(17), STR_20(17), 
  7296 ;;		 -> STR_19(17), STR_17(17), STR_16(17), s(16), 
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;  i               2   12[BANK0 ] int 
  7299 ;; Return value:  Size  Location     Type
  7300 ;;                  1    wreg      void 
  7301 ;; Registers used:
  7302 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7303 ;; Tracked objects:
  7304 ;;		On entry : 0/0
  7305 ;;		On exit  : 0/0
  7306 ;;		Unchanged: 0/0
  7307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7308 ;;      Params:         0       2       0       0       0
  7309 ;;      Locals:         0       2       0       0       0
  7310 ;;      Temps:          0       3       0       0       0
  7311 ;;      Totals:         0       7       0       0       0
  7312 ;;Total ram usage:        7 bytes
  7313 ;; Hardware stack levels used:    1
  7314 ;; Hardware stack levels required when called:    5
  7315 ;; This function calls:
  7316 ;;		_Lcd_Write_Char
  7317 ;; This function is called by:
  7318 ;;		_main
  7319 ;; This function uses a non-reentrant model
  7320 ;;
  7321                           
  7322                           
  7323                           ;psect for function _Lcd_Write_String
  7324  155E                     _Lcd_Write_String:	
  7325                           
  7326                           ;lcd.h: 99: int i;
  7327                           ;lcd.h: 100: for(i=0;a[i]!='\0';i++)
  7328                           
  7329                           ;incstack = 0
  7330                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7331  155E  1283               	bcf	3,5	;RP0=0, select bank0
  7332  155F  1303               	bcf	3,6	;RP1=0, select bank0
  7333  1560  01AC               	clrf	Lcd_Write_String@i
  7334  1561  01AD               	clrf	Lcd_Write_String@i+1
  7335  1562                     l2910:	
  7336  1562  082C               	movf	Lcd_Write_String@i,w
  7337  1563  0727               	addwf	Lcd_Write_String@a,w
  7338  1564  00AA               	movwf	??_Lcd_Write_String+1
  7339  1565  0828               	movf	Lcd_Write_String@a+1,w
  7340  1566  00A9               	movwf	??_Lcd_Write_String
  7341  1567  1803               	skipnc
  7342  1568  0AA9               	incf	??_Lcd_Write_String,f
  7343  1569  1BAC               	btfsc	Lcd_Write_String@i,7
  7344  156A  03A9               	decf	??_Lcd_Write_String,f
  7345  156B  1283               	bcf	3,5	;RP0=0, select bank0
  7346  156C  1303               	bcf	3,6	;RP1=0, select bank0
  7347  156D  0829               	movf	??_Lcd_Write_String,w
  7348  156E  00AB               	movwf	??_Lcd_Write_String+2
  7349  156F  082B               	movf	??_Lcd_Write_String+2,w
  7350  1570  00FF               	movwf	127
  7351  1571  082A               	movf	??_Lcd_Write_String+1,w
  7352  1572  0084               	movwf	4
  7353  1573  120A  158A  2000  160A  118A  	fcall	stringtab
  7354  1578  3A00               	xorlw	0
  7355  1579  1903               	btfsc	3,2
  7356  157A  0008               	return
  7357                           
  7358                           ;lcd.h: 101: Lcd_Write_Char(a[i]);
  7359  157B  082C               	movf	Lcd_Write_String@i,w
  7360  157C  0727               	addwf	Lcd_Write_String@a,w
  7361  157D  00AA               	movwf	??_Lcd_Write_String+1
  7362  157E  0828               	movf	Lcd_Write_String@a+1,w
  7363  157F  00A9               	movwf	??_Lcd_Write_String
  7364  1580  1803               	skipnc
  7365  1581  0AA9               	incf	??_Lcd_Write_String,f
  7366  1582  1BAC               	btfsc	Lcd_Write_String@i,7
  7367  1583  03A9               	decf	??_Lcd_Write_String,f
  7368  1584  1283               	bcf	3,5	;RP0=0, select bank0
  7369  1585  1303               	bcf	3,6	;RP1=0, select bank0
  7370  1586  0829               	movf	??_Lcd_Write_String,w
  7371  1587  00AB               	movwf	??_Lcd_Write_String+2
  7372  1588  082B               	movf	??_Lcd_Write_String+2,w
  7373  1589  00FF               	movwf	127
  7374  158A  082A               	movf	??_Lcd_Write_String+1,w
  7375  158B  0084               	movwf	4
  7376  158C  120A  158A  2000  160A  118A  	fcall	stringtab
  7377  1591  160A  118A  24E3  160A  118A  	fcall	_Lcd_Write_Char
  7378  1596  3001               	movlw	1
  7379  1597  1283               	bcf	3,5	;RP0=0, select bank0
  7380  1598  1303               	bcf	3,6	;RP1=0, select bank0
  7381  1599  07AC               	addwf	Lcd_Write_String@i,f
  7382  159A  1803               	skipnc
  7383  159B  0AAD               	incf	Lcd_Write_String@i+1,f
  7384  159C  3000               	movlw	0
  7385  159D  07AD               	addwf	Lcd_Write_String@i+1,f
  7386  159E  2D62               	goto	l2910
  7387  159F                     __end_of_Lcd_Write_String:	
  7388                           
  7389                           	psect	text32
  7390  14E3                     __ptext32:	
  7391 ;; *************** function _Lcd_Write_Char *****************
  7392 ;; Defined at:
  7393 ;;		line 81 in file "lcd.h"
  7394 ;; Parameters:    Size  Location     Type
  7395 ;;  a               1    wreg     unsigned char 
  7396 ;; Auto vars:     Size  Location     Type
  7397 ;;  a               1    6[BANK0 ] unsigned char 
  7398 ;;  y               1    5[BANK0 ] unsigned char 
  7399 ;;  temp            1    4[BANK0 ] unsigned char 
  7400 ;; Return value:  Size  Location     Type
  7401 ;;                  1    wreg      void 
  7402 ;; Registers used:
  7403 ;;		wreg, status,2, status,0, pclath, cstack
  7404 ;; Tracked objects:
  7405 ;;		On entry : 0/0
  7406 ;;		On exit  : 0/0
  7407 ;;		Unchanged: 0/0
  7408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7409 ;;      Params:         0       0       0       0       0
  7410 ;;      Locals:         0       3       0       0       0
  7411 ;;      Temps:          0       1       0       0       0
  7412 ;;      Totals:         0       4       0       0       0
  7413 ;;Total ram usage:        4 bytes
  7414 ;; Hardware stack levels used:    1
  7415 ;; Hardware stack levels required when called:    4
  7416 ;; This function calls:
  7417 ;;		_Lcd_Port
  7418 ;; This function is called by:
  7419 ;;		_Lcd_Write_String
  7420 ;;		_main
  7421 ;; This function uses a non-reentrant model
  7422 ;;
  7423                           
  7424                           
  7425                           ;psect for function _Lcd_Write_Char
  7426  14E3                     _Lcd_Write_Char:	
  7427                           
  7428                           ;incstack = 0
  7429                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  7430                           ;Lcd_Write_Char@a stored from wreg
  7431  14E3  1283               	bcf	3,5	;RP0=0, select bank0
  7432  14E4  1303               	bcf	3,6	;RP1=0, select bank0
  7433  14E5  00A6               	movwf	Lcd_Write_Char@a
  7434                           
  7435                           ;lcd.h: 83: char temp,y;
  7436                           ;lcd.h: 84: temp = a&0x0F;
  7437  14E6  0826               	movf	Lcd_Write_Char@a,w
  7438  14E7  390F               	andlw	15
  7439  14E8  00A3               	movwf	??_Lcd_Write_Char
  7440  14E9  0823               	movf	??_Lcd_Write_Char,w
  7441  14EA  00A4               	movwf	Lcd_Write_Char@temp
  7442                           
  7443                           ;lcd.h: 85: y = a&0xF0;
  7444  14EB  0826               	movf	Lcd_Write_Char@a,w
  7445  14EC  39F0               	andlw	240
  7446  14ED  00A3               	movwf	??_Lcd_Write_Char
  7447  14EE  0823               	movf	??_Lcd_Write_Char,w
  7448  14EF  00A5               	movwf	Lcd_Write_Char@y
  7449                           
  7450                           ;lcd.h: 86: RC4 = 1;
  7451  14F0  1607               	bsf	7,4	;volatile
  7452                           
  7453                           ;lcd.h: 87: Lcd_Port(y>>4);
  7454  14F1  0825               	movf	Lcd_Write_Char@y,w
  7455  14F2  00A3               	movwf	??_Lcd_Write_Char
  7456  14F3  3004               	movlw	4
  7457  14F4                     u3145:	
  7458  14F4  1003               	clrc
  7459  14F5  0CA3               	rrf	??_Lcd_Write_Char,f
  7460  14F6  3EFF               	addlw	-1
  7461  14F7  1D03               	skipz
  7462  14F8  2CF4               	goto	u3145
  7463  14F9  0823               	movf	??_Lcd_Write_Char,w
  7464  14FA  160A  118A  2366  160A  118A  	fcall	_Lcd_Port
  7465                           
  7466                           ;lcd.h: 88: RC5 = 1;
  7467  14FF  1283               	bcf	3,5	;RP0=0, select bank0
  7468  1500  1303               	bcf	3,6	;RP1=0, select bank0
  7469  1501  1687               	bsf	7,5	;volatile
  7470                           
  7471                           ;lcd.h: 89: _delay((unsigned long)((40)*(4000000/4000000.0)));
  7472  1502  300C               	movlw	12
  7473  1503  1283               	bcf	3,5	;RP0=0, select bank0
  7474  1504  1303               	bcf	3,6	;RP1=0, select bank0
  7475  1505  00A3               	movwf	??_Lcd_Write_Char
  7476  1506                     u4207:	
  7477  1506  0BA3               	decfsz	??_Lcd_Write_Char,f
  7478  1507  2D06               	goto	u4207
  7479  1508  0000               	nop
  7480                           
  7481                           ;lcd.h: 90: RC5 = 0;
  7482  1509  1283               	bcf	3,5	;RP0=0, select bank0
  7483  150A  1303               	bcf	3,6	;RP1=0, select bank0
  7484  150B  1287               	bcf	7,5	;volatile
  7485                           
  7486                           ;lcd.h: 91: Lcd_Port(temp);
  7487  150C  0824               	movf	Lcd_Write_Char@temp,w
  7488  150D  160A  118A  2366  160A  118A  	fcall	_Lcd_Port
  7489                           
  7490                           ;lcd.h: 92: RC5 = 1;
  7491  1512  1283               	bcf	3,5	;RP0=0, select bank0
  7492  1513  1303               	bcf	3,6	;RP1=0, select bank0
  7493  1514  1687               	bsf	7,5	;volatile
  7494                           
  7495                           ;lcd.h: 93: _delay((unsigned long)((40)*(4000000/4000000.0)));
  7496  1515  300C               	movlw	12
  7497  1516  1283               	bcf	3,5	;RP0=0, select bank0
  7498  1517  1303               	bcf	3,6	;RP1=0, select bank0
  7499  1518  00A3               	movwf	??_Lcd_Write_Char
  7500  1519                     u4217:	
  7501  1519  0BA3               	decfsz	??_Lcd_Write_Char,f
  7502  151A  2D19               	goto	u4217
  7503  151B  0000               	nop
  7504                           
  7505                           ;lcd.h: 94: RC5 = 0;
  7506  151C  1283               	bcf	3,5	;RP0=0, select bank0
  7507  151D  1303               	bcf	3,6	;RP1=0, select bank0
  7508  151E  1287               	bcf	7,5	;volatile
  7509  151F  0008               	return
  7510  1520                     __end_of_Lcd_Write_Char:	
  7511                           
  7512                           	psect	text33
  7513  1366                     __ptext33:	
  7514 ;; *************** function _Lcd_Port *****************
  7515 ;; Defined at:
  7516 ;;		line 4 in file "lcd.h"
  7517 ;; Parameters:    Size  Location     Type
  7518 ;;  a               1    wreg     unsigned char 
  7519 ;; Auto vars:     Size  Location     Type
  7520 ;;  a               1    2[BANK0 ] unsigned char 
  7521 ;; Return value:  Size  Location     Type
  7522 ;;                  1    wreg      void 
  7523 ;; Registers used:
  7524 ;;		wreg
  7525 ;; Tracked objects:
  7526 ;;		On entry : 0/0
  7527 ;;		On exit  : 0/0
  7528 ;;		Unchanged: 0/0
  7529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7530 ;;      Params:         0       0       0       0       0
  7531 ;;      Locals:         0       1       0       0       0
  7532 ;;      Temps:          0       0       0       0       0
  7533 ;;      Totals:         0       1       0       0       0
  7534 ;;Total ram usage:        1 bytes
  7535 ;; Hardware stack levels used:    1
  7536 ;; Hardware stack levels required when called:    3
  7537 ;; This function calls:
  7538 ;;		Nothing
  7539 ;; This function is called by:
  7540 ;;		_Lcd_Cmd
  7541 ;;		_Lcd_Init
  7542 ;;		_Lcd_Write_Char
  7543 ;; This function uses a non-reentrant model
  7544 ;;
  7545                           
  7546                           
  7547                           ;psect for function _Lcd_Port
  7548  1366                     _Lcd_Port:	
  7549                           
  7550                           ;incstack = 0
  7551                           ; Regs used in _Lcd_Port: [wreg]
  7552                           ;Lcd_Port@a stored from wreg
  7553  1366  1283               	bcf	3,5	;RP0=0, select bank0
  7554  1367  1303               	bcf	3,6	;RP1=0, select bank0
  7555  1368  00A2               	movwf	Lcd_Port@a
  7556                           
  7557                           ;lcd.h: 6: if(a & 1)
  7558  1369  1C22               	btfss	Lcd_Port@a,0
  7559  136A  2B6D               	goto	l73
  7560                           
  7561                           ;lcd.h: 7: RD0 = 1;
  7562  136B  1408               	bsf	8,0	;volatile
  7563  136C  2B6E               	goto	l74
  7564  136D                     l73:	
  7565                           
  7566                           ;lcd.h: 8: else
  7567                           ;lcd.h: 9: RD0 = 0;
  7568  136D  1008               	bcf	8,0	;volatile
  7569  136E                     l74:	
  7570                           
  7571                           ;lcd.h: 11: if(a & 2)
  7572  136E  1CA2               	btfss	Lcd_Port@a,1
  7573  136F  2B72               	goto	l75
  7574                           
  7575                           ;lcd.h: 12: RD1 = 1;
  7576  1370  1488               	bsf	8,1	;volatile
  7577  1371  2B73               	goto	l76
  7578  1372                     l75:	
  7579                           
  7580                           ;lcd.h: 13: else
  7581                           ;lcd.h: 14: RD1 = 0;
  7582  1372  1088               	bcf	8,1	;volatile
  7583  1373                     l76:	
  7584                           
  7585                           ;lcd.h: 16: if(a & 4)
  7586  1373  1D22               	btfss	Lcd_Port@a,2
  7587  1374  2B77               	goto	l77
  7588                           
  7589                           ;lcd.h: 17: RD3 = 1;
  7590  1375  1588               	bsf	8,3	;volatile
  7591  1376  2B78               	goto	l78
  7592  1377                     l77:	
  7593                           
  7594                           ;lcd.h: 18: else
  7595                           ;lcd.h: 19: RD3 = 0;
  7596  1377  1188               	bcf	8,3	;volatile
  7597  1378                     l78:	
  7598                           
  7599                           ;lcd.h: 21: if(a & 8)
  7600  1378  1DA2               	btfss	Lcd_Port@a,3
  7601  1379  2B7C               	goto	l79
  7602                           
  7603                           ;lcd.h: 22: RD2 = 1;
  7604  137A  1508               	bsf	8,2	;volatile
  7605  137B  0008               	return
  7606  137C                     l79:	
  7607                           
  7608                           ;lcd.h: 23: else
  7609                           ;lcd.h: 24: RD2 = 0;
  7610  137C  1108               	bcf	8,2	;volatile
  7611  137D  0008               	return
  7612  137E                     __end_of_Lcd_Port:	
  7613                           
  7614                           	psect	text34
  7615  0ED9                     __ptext34:	
  7616 ;; *************** function _ISR *****************
  7617 ;; Defined at:
  7618 ;;		line 53 in file "main.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;		None
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;  i               2    0[BANK0 ] int 
  7623 ;; Return value:  Size  Location     Type
  7624 ;;                  1    wreg      void 
  7625 ;; Registers used:
  7626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7627 ;; Tracked objects:
  7628 ;;		On entry : 0/0
  7629 ;;		On exit  : 0/0
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7632 ;;      Params:         0       0       0       0       0
  7633 ;;      Locals:         0       2       0       0       0
  7634 ;;      Temps:          5       0       0       0       0
  7635 ;;      Totals:         5       2       0       0       0
  7636 ;;Total ram usage:        7 bytes
  7637 ;; Hardware stack levels used:    1
  7638 ;; Hardware stack levels required when called:    2
  7639 ;; This function calls:
  7640 ;;		_strcat
  7641 ;;		i1_strlen
  7642 ;; This function is called by:
  7643 ;;		Interrupt level 1
  7644 ;; This function uses a non-reentrant model
  7645 ;;
  7646                           
  7647                           
  7648                           ;psect for function _ISR
  7649  0ED9                     _ISR:	
  7650                           
  7651                           ;main.c: 56: if(INTCONbits.INTF)
  7652  0ED9  1C8B               	btfss	11,1	;volatile
  7653  0EDA  2EFD               	goto	i1l134
  7654  0EDB                     i1l135:	
  7655                           ;main.c: 57: {
  7656                           ;main.c: 58: while(!PORTBbits.RB0){}
  7657                           
  7658  0EDB  1C06               	btfss	6,0	;volatile
  7659  0EDC  2EDB               	goto	i1l135
  7660                           
  7661                           ;main.c: 59: RD4=~RD4;
  7662  0EDD  3010               	movlw	16
  7663  0EDE  0688               	xorwf	8,f
  7664                           
  7665                           ;main.c: 60: tiempo=0;
  7666  0EDF  1683               	bsf	3,5	;RP0=1, select bank1
  7667  0EE0  1303               	bcf	3,6	;RP1=0, select bank1
  7668  0EE1  01E6               	clrf	_tiempo^(0+128)
  7669  0EE2  01E7               	clrf	(_tiempo+1)^(0+128)
  7670                           
  7671                           ;main.c: 61: T1CONbits.TMR1ON=~RD4;
  7672  0EE3  3000               	movlw	0
  7673  0EE4  1283               	bcf	3,5	;RP0=0, select bank0
  7674  0EE5  1303               	bcf	3,6	;RP1=0, select bank0
  7675  0EE6  1A08               	btfsc	8,4	;volatile
  7676  0EE7  3001               	movlw	1
  7677  0EE8  3AFF               	xorlw	255
  7678  0EE9  00F8               	movwf	??_ISR
  7679  0EEA  0810               	movf	16,w	;volatile
  7680  0EEB  0678               	xorwf	??_ISR,w
  7681  0EEC  39FE               	andlw	-2
  7682  0EED  0678               	xorwf	??_ISR,w
  7683  0EEE  0090               	movwf	16	;volatile
  7684                           
  7685                           ;main.c: 62: INTCONbits.TMR0IE=~RD4;
  7686  0EEF  3000               	movlw	0
  7687  0EF0  1A08               	btfsc	8,4	;volatile
  7688  0EF1  3001               	movlw	1
  7689  0EF2  3AFF               	xorlw	255
  7690  0EF3  00F8               	movwf	??_ISR
  7691  0EF4  0EF8               	swapf	??_ISR,f
  7692  0EF5  0DF8               	rlf	??_ISR,f
  7693  0EF6  080B               	movf	11,w	;volatile
  7694  0EF7  0678               	xorwf	??_ISR,w
  7695  0EF8  39DF               	andlw	-33
  7696  0EF9  0678               	xorwf	??_ISR,w
  7697  0EFA  008B               	movwf	11	;volatile
  7698                           
  7699                           ;main.c: 63: INTCONbits.INTF=0;
  7700  0EFB  108B               	bcf	11,1	;volatile
  7701                           
  7702                           ;main.c: 64: }
  7703  0EFC  2FF5               	goto	i1l148
  7704  0EFD                     i1l134:	
  7705                           
  7706                           ;main.c: 65: else if(INTCONbits.TMR0IF)
  7707  0EFD  1D0B               	btfss	11,2	;volatile
  7708  0EFE  2F04               	goto	i1l139
  7709                           
  7710                           ;main.c: 66: {
  7711                           ;main.c: 67: RC7=~RC7;
  7712  0EFF  3080               	movlw	128
  7713  0F00  0687               	xorwf	7,f
  7714                           
  7715                           ;main.c: 68: TMR0=timer;
  7716  0F01  087D               	movf	_timer,w
  7717  0F02  0081               	movwf	1	;volatile
  7718  0F03  2FF4               	goto	i1l3238
  7719  0F04                     i1l139:	
  7720                           ;main.c: 70: }
  7721                           
  7722                           ;main.c: 69: INTCONbits.TMR0IF=0;
  7723                           
  7724                           
  7725                           ;main.c: 71: else if(PIR1bits.TMR1IF)
  7726  0F04  1C0C               	btfss	12,0	;volatile
  7727  0F05  2F12               	goto	i1l141
  7728                           
  7729                           ;main.c: 72: {
  7730                           ;main.c: 73: tiempo++;
  7731  0F06  3001               	movlw	1
  7732  0F07  1683               	bsf	3,5	;RP0=1, select bank1
  7733  0F08  1303               	bcf	3,6	;RP1=0, select bank1
  7734  0F09  07E6               	addwf	_tiempo^(0+128),f
  7735  0F0A  1803               	skipnc
  7736  0F0B  0AE7               	incf	(_tiempo+1)^(0+128),f
  7737  0F0C  3000               	movlw	0
  7738  0F0D  07E7               	addwf	(_tiempo+1)^(0+128),f
  7739                           
  7740                           ;main.c: 74: PIR1bits.TMR1IF=0;
  7741  0F0E  1283               	bcf	3,5	;RP0=0, select bank0
  7742  0F0F  1303               	bcf	3,6	;RP1=0, select bank0
  7743  0F10  100C               	bcf	12,0	;volatile
  7744                           
  7745                           ;main.c: 75: }
  7746  0F11  2FF5               	goto	i1l148
  7747  0F12                     i1l141:	
  7748                           
  7749                           ;main.c: 76: else if(INTCONbits.RBIF)
  7750  0F12  1C0B               	btfss	11,0	;volatile
  7751  0F13  2FEE               	goto	i1l3228
  7752                           
  7753                           ;main.c: 77: {
  7754                           ;main.c: 78: PORTB=PORTB;
  7755  0F14  0806               	movf	6,w	;volatile
  7756  0F15  0086               	movwf	6	;volatile
  7757                           
  7758                           ;main.c: 79: PORTB=0x00;
  7759  0F16  0186               	clrf	6	;volatile
  7760                           
  7761                           ;main.c: 80: for(int i=2;i<=8;i*=2)
  7762  0F17  3002               	movlw	2
  7763  0F18  00A0               	movwf	ISR@i
  7764  0F19  3000               	movlw	0
  7765  0F1A  00A1               	movwf	ISR@i+1
  7766  0F1B  0821               	movf	ISR@i+1,w
  7767  0F1C  3A80               	xorlw	128
  7768  0F1D  00FF               	movwf	127
  7769  0F1E  3080               	movlw	128
  7770  0F1F  027F               	subwf	127,w
  7771  0F20  1D03               	skipz
  7772  0F21  2F24               	goto	u386_25
  7773  0F22  3009               	movlw	9
  7774  0F23  0220               	subwf	ISR@i,w
  7775  0F24                     u386_25:	
  7776  0F24  1803               	btfsc	3,0
  7777  0F25  2FE9               	goto	i1l3224
  7778  0F26                     i1l3094:	
  7779                           
  7780                           ;main.c: 81: {
  7781                           ;main.c: 82: PORTB=~i;
  7782  0F26  1283               	bcf	3,5	;RP0=0, select bank0
  7783  0F27  1303               	bcf	3,6	;RP1=0, select bank0
  7784  0F28  0920               	comf	ISR@i,w
  7785  0F29  0086               	movwf	6	;volatile
  7786                           
  7787                           ;main.c: 83: switch(PORTB)
  7788  0F2A  2FB1               	goto	i1l3218
  7789  0F2B                     i1l3096:	
  7790                           ;main.c: 84: {
  7791                           ;main.c: 85: case 0b11101101:
  7792                           
  7793                           
  7794                           ;main.c: 86: strcat(num,"1");
  7795  0F2B  309E               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  7796  0F2C  00F8               	movwf	??_ISR
  7797  0F2D  0878               	movf	??_ISR,w
  7798  0F2E  00F0               	movwf	strcat@from
  7799  0F2F  30EA               	movlw	(low (_num| 0))& (0+255)
  7800  0F30  160A  118A  2423  120A  158A  	fcall	_strcat
  7801  0F35  2FE9               	goto	i1l3224
  7802  0F36                     i1l3106:	
  7803                           ;main.c: 91: case 0b11101011:
  7804                           
  7805                           ;main.c: 90: break;
  7806                           
  7807                           ;main.c: 89: return;
  7808                           
  7809                           ;main.c: 88: INTCONbits.RBIF=0;
  7810                           
  7811                           ;main.c: 87: PORTB=0x00;
  7812                           
  7813                           
  7814                           ;main.c: 92: strcat(num,"2");
  7815  0F36  30A0               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  7816  0F37  00F8               	movwf	??_ISR
  7817  0F38  0878               	movf	??_ISR,w
  7818  0F39  00F0               	movwf	strcat@from
  7819  0F3A  30EA               	movlw	(low (_num| 0))& (0+255)
  7820  0F3B  160A  118A  2423  120A  158A  	fcall	_strcat
  7821  0F40  2FE9               	goto	i1l3224
  7822  0F41                     i1l3116:	
  7823                           ;main.c: 97: case 0b11100111:
  7824                           
  7825                           ;main.c: 96: break;
  7826                           
  7827                           ;main.c: 95: return;
  7828                           
  7829                           ;main.c: 94: INTCONbits.RBIF=0;
  7830                           
  7831                           ;main.c: 93: PORTB=0x00;
  7832                           
  7833                           
  7834                           ;main.c: 98: strcat(num,"3");
  7835  0F41  30A2               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  7836  0F42  00F8               	movwf	??_ISR
  7837  0F43  0878               	movf	??_ISR,w
  7838  0F44  00F0               	movwf	strcat@from
  7839  0F45  30EA               	movlw	(low (_num| 0))& (0+255)
  7840  0F46  160A  118A  2423  120A  158A  	fcall	_strcat
  7841  0F4B  2FE9               	goto	i1l3224
  7842  0F4C                     i1l3126:	
  7843                           ;main.c: 103: case 0b11011101:
  7844                           
  7845                           ;main.c: 102: break;
  7846                           
  7847                           ;main.c: 101: return;
  7848                           
  7849                           ;main.c: 100: INTCONbits.RBIF=0;
  7850                           
  7851                           ;main.c: 99: PORTB=0x00;
  7852                           
  7853                           
  7854                           ;main.c: 104: strcat(num,"4");
  7855  0F4C  30A4               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  7856  0F4D  00F8               	movwf	??_ISR
  7857  0F4E  0878               	movf	??_ISR,w
  7858  0F4F  00F0               	movwf	strcat@from
  7859  0F50  30EA               	movlw	(low (_num| 0))& (0+255)
  7860  0F51  160A  118A  2423  120A  158A  	fcall	_strcat
  7861  0F56  2FE9               	goto	i1l3224
  7862  0F57                     i1l3136:	
  7863                           ;main.c: 109: case 0b11011011:
  7864                           
  7865                           ;main.c: 108: break;
  7866                           
  7867                           ;main.c: 107: return;
  7868                           
  7869                           ;main.c: 106: INTCONbits.RBIF=0;
  7870                           
  7871                           ;main.c: 105: PORTB=0x00;
  7872                           
  7873                           
  7874                           ;main.c: 110: strcat(num,"5");
  7875  0F57  30A6               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  7876  0F58  00F8               	movwf	??_ISR
  7877  0F59  0878               	movf	??_ISR,w
  7878  0F5A  00F0               	movwf	strcat@from
  7879  0F5B  30EA               	movlw	(low (_num| 0))& (0+255)
  7880  0F5C  160A  118A  2423  120A  158A  	fcall	_strcat
  7881  0F61  2FE9               	goto	i1l3224
  7882  0F62                     i1l3146:	
  7883                           ;main.c: 115: case 0b11010111:
  7884                           
  7885                           ;main.c: 114: break;
  7886                           
  7887                           ;main.c: 113: return;
  7888                           
  7889                           ;main.c: 112: INTCONbits.RBIF=0;
  7890                           
  7891                           ;main.c: 111: PORTB=0x00;
  7892                           
  7893                           
  7894                           ;main.c: 116: strcat(num,"6");
  7895  0F62  30A8               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  7896  0F63  00F8               	movwf	??_ISR
  7897  0F64  0878               	movf	??_ISR,w
  7898  0F65  00F0               	movwf	strcat@from
  7899  0F66  30EA               	movlw	(low (_num| 0))& (0+255)
  7900  0F67  160A  118A  2423  120A  158A  	fcall	_strcat
  7901  0F6C  2FE9               	goto	i1l3224
  7902  0F6D                     i1l3156:	
  7903                           ;main.c: 121: case 0b10111101:
  7904                           
  7905                           ;main.c: 120: break;
  7906                           
  7907                           ;main.c: 119: return;
  7908                           
  7909                           ;main.c: 118: INTCONbits.RBIF=0;
  7910                           
  7911                           ;main.c: 117: PORTB=0x00;
  7912                           
  7913                           
  7914                           ;main.c: 122: strcat(num,"7");
  7915  0F6D  30AA               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  7916  0F6E  00F8               	movwf	??_ISR
  7917  0F6F  0878               	movf	??_ISR,w
  7918  0F70  00F0               	movwf	strcat@from
  7919  0F71  30EA               	movlw	(low (_num| 0))& (0+255)
  7920  0F72  160A  118A  2423  120A  158A  	fcall	_strcat
  7921  0F77  2FE9               	goto	i1l3224
  7922  0F78                     i1l3166:	
  7923                           ;main.c: 127: case 0b10111011:
  7924                           
  7925                           ;main.c: 126: break;
  7926                           
  7927                           ;main.c: 125: return;
  7928                           
  7929                           ;main.c: 124: INTCONbits.RBIF=0;
  7930                           
  7931                           ;main.c: 123: PORTB=0x00;
  7932                           
  7933                           
  7934                           ;main.c: 128: strcat(num,"8");
  7935  0F78  30AC               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  7936  0F79  00F8               	movwf	??_ISR
  7937  0F7A  0878               	movf	??_ISR,w
  7938  0F7B  00F0               	movwf	strcat@from
  7939  0F7C  30EA               	movlw	(low (_num| 0))& (0+255)
  7940  0F7D  160A  118A  2423  120A  158A  	fcall	_strcat
  7941  0F82  2FE9               	goto	i1l3224
  7942  0F83                     i1l3176:	
  7943                           ;main.c: 133: case 0b10110111:
  7944                           
  7945                           ;main.c: 132: break;
  7946                           
  7947                           ;main.c: 131: return;
  7948                           
  7949                           ;main.c: 130: INTCONbits.RBIF=0;
  7950                           
  7951                           ;main.c: 129: PORTB=0x00;
  7952                           
  7953                           
  7954                           ;main.c: 134: strcat(num,"9");
  7955  0F83  30AE               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  7956  0F84  00F8               	movwf	??_ISR
  7957  0F85  0878               	movf	??_ISR,w
  7958  0F86  00F0               	movwf	strcat@from
  7959  0F87  30EA               	movlw	(low (_num| 0))& (0+255)
  7960  0F88  160A  118A  2423  120A  158A  	fcall	_strcat
  7961  0F8D  2FE9               	goto	i1l3224
  7962  0F8E                     i1l3186:	
  7963                           ;main.c: 139: case 0b01111101:
  7964                           
  7965                           ;main.c: 138: break;
  7966                           
  7967                           ;main.c: 137: return;
  7968                           
  7969                           ;main.c: 136: INTCONbits.RBIF=0;
  7970                           
  7971                           ;main.c: 135: PORTB=0x00;
  7972                           
  7973                           
  7974                           ;main.c: 140: num[strlen(num)-1]=0;
  7975  0F8E  30EA               	movlw	(low (_num| 0))& (0+255)
  7976  0F8F  160A  118A  23FD  120A  158A  	fcall	i1_strlen
  7977  0F94  0870               	movf	?i1_strlen,w
  7978  0F95  3EFF               	addlw	255
  7979  0F96  3EEA               	addlw	(low (_num| 0))& (0+255)
  7980  0F97  0084               	movwf	4
  7981  0F98  1383               	bcf	3,7	;select IRP bank1
  7982  0F99  0180               	clrf	0
  7983  0F9A  2FE9               	goto	i1l3224
  7984  0F9B                     i1l3196:	
  7985                           ;main.c: 145: case 0b01111011:
  7986                           
  7987                           ;main.c: 144: break;
  7988                           
  7989                           ;main.c: 143: return;
  7990                           
  7991                           ;main.c: 142: INTCONbits.RBIF=0;
  7992                           
  7993                           ;main.c: 141: PORTB=0x00;
  7994                           
  7995                           
  7996                           ;main.c: 146: strcat(num,"0");
  7997  0F9B  309C               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  7998  0F9C  00F8               	movwf	??_ISR
  7999  0F9D  0878               	movf	??_ISR,w
  8000  0F9E  00F0               	movwf	strcat@from
  8001  0F9F  30EA               	movlw	(low (_num| 0))& (0+255)
  8002  0FA0  160A  118A  2423  120A  158A  	fcall	_strcat
  8003  0FA5  2FE9               	goto	i1l3224
  8004  0FA6                     i1l3206:	
  8005                           ;main.c: 151: case 0b01110111:
  8006                           
  8007                           ;main.c: 150: break;
  8008                           
  8009                           ;main.c: 149: return;
  8010                           
  8011                           ;main.c: 148: INTCONbits.RBIF=0;
  8012                           
  8013                           ;main.c: 147: PORTB=0x00;
  8014                           
  8015                           
  8016                           ;main.c: 152: strcat(num,".");
  8017  0FA6  309A               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  8018  0FA7  00F8               	movwf	??_ISR
  8019  0FA8  0878               	movf	??_ISR,w
  8020  0FA9  00F0               	movwf	strcat@from
  8021  0FAA  30EA               	movlw	(low (_num| 0))& (0+255)
  8022  0FAB  160A  118A  2423  120A  158A  	fcall	_strcat
  8023  0FB0  2FE9               	goto	i1l3224
  8024  0FB1                     i1l3218:	
  8025                           ;main.c: 159: }
  8026                           
  8027                           ;main.c: 158: break;
  8028                           
  8029                           ;main.c: 157: default:
  8030                           
  8031                           ;main.c: 156: break;
  8032                           
  8033                           ;main.c: 155: return;
  8034                           
  8035                           ;main.c: 154: INTCONbits.RBIF=0;
  8036                           
  8037                           ;main.c: 153: PORTB=0x00;
  8038                           
  8039  0FB1  0806               	movf	6,w	;volatile
  8040                           
  8041                           ; Switch size 1, requested type "space"
  8042                           ; Number of cases is 12, Range of values is 119 to 237
  8043                           ; switch strategies available:
  8044                           ; Name         Instructions Cycles
  8045                           ; simple_byte           37    19 (average)
  8046                           ; jumptable            263     9 (fixed)
  8047                           ;	Chosen strategy is simple_byte
  8048  0FB2  3A77               	xorlw	119	; case 119
  8049  0FB3  1903               	skipnz
  8050  0FB4  2FA6               	goto	i1l3206
  8051  0FB5  3A0C               	xorlw	12	; case 123
  8052  0FB6  1903               	skipnz
  8053  0FB7  2F9B               	goto	i1l3196
  8054  0FB8  3A06               	xorlw	6	; case 125
  8055  0FB9  1903               	skipnz
  8056  0FBA  2F8E               	goto	i1l3186
  8057  0FBB  3ACA               	xorlw	202	; case 183
  8058  0FBC  1903               	skipnz
  8059  0FBD  2F83               	goto	i1l3176
  8060  0FBE  3A0C               	xorlw	12	; case 187
  8061  0FBF  1903               	skipnz
  8062  0FC0  2F78               	goto	i1l3166
  8063  0FC1  3A06               	xorlw	6	; case 189
  8064  0FC2  1903               	skipnz
  8065  0FC3  2F6D               	goto	i1l3156
  8066  0FC4  3A6A               	xorlw	106	; case 215
  8067  0FC5  1903               	skipnz
  8068  0FC6  2F62               	goto	i1l3146
  8069  0FC7  3A0C               	xorlw	12	; case 219
  8070  0FC8  1903               	skipnz
  8071  0FC9  2F57               	goto	i1l3136
  8072  0FCA  3A06               	xorlw	6	; case 221
  8073  0FCB  1903               	skipnz
  8074  0FCC  2F4C               	goto	i1l3126
  8075  0FCD  3A3A               	xorlw	58	; case 231
  8076  0FCE  1903               	skipnz
  8077  0FCF  2F41               	goto	i1l3116
  8078  0FD0  3A0C               	xorlw	12	; case 235
  8079  0FD1  1903               	skipnz
  8080  0FD2  2F36               	goto	i1l3106
  8081  0FD3  3A06               	xorlw	6	; case 237
  8082  0FD4  1903               	skipnz
  8083  0FD5  2F2B               	goto	i1l3096
  8084  0FD6  2FD7               	goto	i1l3220
  8085  0FD7                     i1l3220:	
  8086  0FD7  3001               	movlw	1
  8087  0FD8                     u387_25:	
  8088  0FD8  1003               	clrc
  8089  0FD9  0DA0               	rlf	ISR@i,f
  8090  0FDA  0DA1               	rlf	ISR@i+1,f
  8091  0FDB  3EFF               	addlw	-1
  8092  0FDC  1D03               	skipz
  8093  0FDD  2FD8               	goto	u387_25
  8094  0FDE  0821               	movf	ISR@i+1,w
  8095  0FDF  3A80               	xorlw	128
  8096  0FE0  00FF               	movwf	127
  8097  0FE1  3080               	movlw	128
  8098  0FE2  027F               	subwf	127,w
  8099  0FE3  1D03               	skipz
  8100  0FE4  2FE7               	goto	u388_25
  8101  0FE5  3009               	movlw	9
  8102  0FE6  0220               	subwf	ISR@i,w
  8103  0FE7                     u388_25:	
  8104  0FE7  1C03               	skipc
  8105  0FE8  2F26               	goto	i1l3094
  8106  0FE9                     i1l3224:	
  8107                           
  8108                           ;main.c: 160: }
  8109                           ;main.c: 161: PORTB=0x00;
  8110  0FE9  1283               	bcf	3,5	;RP0=0, select bank0
  8111  0FEA  1303               	bcf	3,6	;RP1=0, select bank0
  8112  0FEB  0186               	clrf	6	;volatile
  8113                           
  8114                           ;main.c: 162: INTCONbits.RBIF=0;
  8115  0FEC  100B               	bcf	11,0	;volatile
  8116                           
  8117                           ;main.c: 163: }
  8118  0FED  2FF5               	goto	i1l148
  8119  0FEE                     i1l3228:	
  8120                           
  8121                           ;main.c: 165: else
  8122                           ;main.c: 166: {
  8123                           ;main.c: 167: PORTB=PORTB;
  8124  0FEE  0806               	movf	6,w	;volatile
  8125  0FEF  0086               	movwf	6	;volatile
  8126                           
  8127                           ;main.c: 168: PORTB=0x00;
  8128  0FF0  0186               	clrf	6	;volatile
  8129                           
  8130                           ;main.c: 169: INTCONbits.RBIF=0;
  8131  0FF1  100B               	bcf	11,0	;volatile
  8132                           
  8133                           ;main.c: 170: INTCONbits.INTF=0;
  8134  0FF2  108B               	bcf	11,1	;volatile
  8135                           
  8136                           ;main.c: 171: INTCONbits.TMR0IF=0;
  8137  0FF3  110B               	bcf	11,2	;volatile
  8138  0FF4                     i1l3238:	
  8139                           
  8140                           ;main.c: 172: INTCONbits.T0IF=0;
  8141  0FF4  110B               	bcf	11,2	;volatile
  8142  0FF5                     i1l148:	
  8143  0FF5  087C               	movf	??_ISR+4,w
  8144  0FF6  00FF               	movwf	127
  8145  0FF7  087B               	movf	??_ISR+3,w
  8146  0FF8  008A               	movwf	10
  8147  0FF9  087A               	movf	??_ISR+2,w
  8148  0FFA  0084               	movwf	4
  8149  0FFB  0E79               	swapf	(??_ISR+1)^(0+-128),w
  8150  0FFC  0083               	movwf	3
  8151  0FFD  0EFE               	swapf	126,f
  8152  0FFE  0E7E               	swapf	126,w
  8153  0FFF  0009               	retfie
  8154  1000                     __end_of_ISR:	
  8155                           
  8156                           	psect	intentry
  8157  0004                     __pintentry:	
  8158                           ;incstack = 0
  8159                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8160                           
  8161  0004                     interrupt_function:	
  8162  007E                     saved_w	set	btemp
  8163  0004  00FE               	movwf	btemp
  8164  0005  0E03               	swapf	3,w
  8165  0006  00F9               	movwf	??_ISR+1
  8166  0007  0804               	movf	4,w
  8167  0008  00FA               	movwf	??_ISR+2
  8168  0009  080A               	movf	10,w
  8169  000A  00FB               	movwf	??_ISR+3
  8170  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8171  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8172  000D  087F               	movf	btemp+1,w
  8173  000E  00FC               	movwf	??_ISR+4
  8174  000F  120A  158A  2ED9   	ljmp	_ISR
  8175                           
  8176                           	psect	text35
  8177  13FD                     __ptext35:	
  8178 ;; *************** function i1_strlen *****************
  8179 ;; Defined at:
  8180 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;  s               1    wreg     PTR const unsigned char 
  8183 ;;		 -> num(4), 
  8184 ;; Auto vars:     Size  Location     Type
  8185 ;;  s               1    6[COMMON] PTR const unsigned char 
  8186 ;;		 -> num(4), 
  8187 ;;  strlen          1    7[COMMON] PTR const unsigned char 
  8188 ;;		 -> num(4), 
  8189 ;; Return value:  Size  Location     Type
  8190 ;;                  2    0[COMMON] unsigned int 
  8191 ;; Registers used:
  8192 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8193 ;; Tracked objects:
  8194 ;;		On entry : 0/0
  8195 ;;		On exit  : 0/0
  8196 ;;		Unchanged: 0/0
  8197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8198 ;;      Params:         2       0       0       0       0
  8199 ;;      Locals:         2       0       0       0       0
  8200 ;;      Temps:          4       0       0       0       0
  8201 ;;      Totals:         8       0       0       0       0
  8202 ;;Total ram usage:        8 bytes
  8203 ;; Hardware stack levels used:    1
  8204 ;; This function calls:
  8205 ;;		Nothing
  8206 ;; This function is called by:
  8207 ;;		_ISR
  8208 ;; This function uses a non-reentrant model
  8209 ;;
  8210                           
  8211                           
  8212                           ;psect for function i1_strlen
  8213  13FD                     i1_strlen:	
  8214                           
  8215                           ;incstack = 0
  8216                           ; Regs used in i1_strlen: [wreg-fsr0h+status,2+status,0]
  8217                           ;i1strlen@s stored from wreg
  8218  13FD  00F6               	movwf	i1strlen@s
  8219  13FE  0876               	movf	i1strlen@s,w
  8220  13FF  00F2               	movwf	??i1_strlen
  8221  1400  0872               	movf	??i1_strlen,w
  8222  1401  00F7               	movwf	i1strlen@cp
  8223  1402                     i1l3052:	
  8224  1402  0877               	movf	i1strlen@cp,w
  8225  1403  0084               	movwf	4
  8226  1404  1383               	bcf	3,7	;select IRP bank0
  8227  1405  0800               	movf	0,w
  8228  1406  1903               	btfsc	3,2
  8229  1407  2C0D               	goto	i1l3054
  8230  1408  3001               	movlw	1
  8231  1409  00F2               	movwf	??i1_strlen
  8232  140A  0872               	movf	??i1_strlen,w
  8233  140B  07F7               	addwf	i1strlen@cp,f
  8234  140C  2C02               	goto	i1l3052
  8235  140D                     i1l3054:	
  8236  140D  0876               	movf	i1strlen@s,w
  8237  140E  00F2               	movwf	??i1_strlen
  8238  140F  3000               	movlw	0
  8239  1410  00F3               	movwf	??i1_strlen+1
  8240  1411  09F2               	comf	??i1_strlen,f
  8241  1412  09F3               	comf	??i1_strlen+1,f
  8242  1413  0AF2               	incf	??i1_strlen,f
  8243  1414  1903               	skipnz
  8244  1415  0AF3               	incf	??i1_strlen+1,f
  8245  1416  0877               	movf	i1strlen@cp,w
  8246  1417  00F4               	movwf	??i1_strlen+2
  8247  1418  3000               	movlw	0
  8248  1419  00F5               	movwf	??i1_strlen+3
  8249  141A  0872               	movf	??i1_strlen,w
  8250  141B  0774               	addwf	??i1_strlen+2,w
  8251  141C  00F0               	movwf	?i1_strlen
  8252  141D  0873               	movf	??i1_strlen+1,w
  8253  141E  1803               	skipnc
  8254  141F  0A73               	incf	??i1_strlen+1,w
  8255  1420  0775               	addwf	??i1_strlen+3,w
  8256  1421  00F1               	movwf	?i1_strlen+1
  8257  1422  0008               	return
  8258  1423                     __end_ofi1_strlen:	
  8259                           
  8260                           	psect	text36
  8261  1423                     __ptext36:	
  8262 ;; *************** function _strcat *****************
  8263 ;; Defined at:
  8264 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcat.c"
  8265 ;; Parameters:    Size  Location     Type
  8266 ;;  to              1    wreg     PTR unsigned char 
  8267 ;;		 -> num(4), 
  8268 ;;  from            1    0[COMMON] PTR const unsigned char 
  8269 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  8270 ;;		 -> STR_7(2), STR_6(2), STR_5(2), STR_4(2), 
  8271 ;;		 -> STR_3(2), STR_2(2), STR_1(2), 
  8272 ;; Auto vars:     Size  Location     Type
  8273 ;;  to              1    3[COMMON] PTR unsigned char 
  8274 ;;		 -> num(4), 
  8275 ;;  cp              1    2[COMMON] PTR unsigned char 
  8276 ;;		 -> num(4), 
  8277 ;; Return value:  Size  Location     Type
  8278 ;;                  1    wreg      PTR unsigned char 
  8279 ;; Registers used:
  8280 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  8281 ;; Tracked objects:
  8282 ;;		On entry : 0/0
  8283 ;;		On exit  : 0/0
  8284 ;;		Unchanged: 0/0
  8285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8286 ;;      Params:         1       0       0       0       0
  8287 ;;      Locals:         2       0       0       0       0
  8288 ;;      Temps:          1       0       0       0       0
  8289 ;;      Totals:         4       0       0       0       0
  8290 ;;Total ram usage:        4 bytes
  8291 ;; Hardware stack levels used:    2
  8292 ;; This function calls:
  8293 ;;		Nothing
  8294 ;; This function is called by:
  8295 ;;		_ISR
  8296 ;; This function uses a non-reentrant model
  8297 ;;
  8298                           
  8299                           
  8300                           ;psect for function _strcat
  8301  1423                     _strcat:	
  8302                           
  8303                           ;incstack = 0
  8304 ;; using string table level
  8305                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+pclath]
  8306                           ;strcat@to stored from wreg
  8307  1423  00F3               	movwf	strcat@to
  8308  1424  0873               	movf	strcat@to,w
  8309  1425  00F1               	movwf	??_strcat
  8310  1426  0871               	movf	??_strcat,w
  8311  1427  00F2               	movwf	strcat@cp
  8312  1428                     i1l2916:	
  8313  1428  0872               	movf	strcat@cp,w
  8314  1429  0084               	movwf	4
  8315  142A  1383               	bcf	3,7	;select IRP bank0
  8316  142B  0800               	movf	0,w
  8317  142C  1903               	btfsc	3,2
  8318  142D  2C3B               	goto	i1l2920
  8319  142E  3001               	movlw	1
  8320  142F  00F1               	movwf	??_strcat
  8321  1430  0871               	movf	??_strcat,w
  8322  1431  07F2               	addwf	strcat@cp,f
  8323  1432  2C28               	goto	i1l2916
  8324  1433                     i1l2918:	
  8325  1433  3001               	movlw	1
  8326  1434  00F1               	movwf	??_strcat
  8327  1435  0871               	movf	??_strcat,w
  8328  1436  07F2               	addwf	strcat@cp,f
  8329  1437  3001               	movlw	1
  8330  1438  00F1               	movwf	??_strcat
  8331  1439  0871               	movf	??_strcat,w
  8332  143A  07F0               	addwf	strcat@from,f
  8333  143B                     i1l2920:	
  8334  143B  0870               	movf	strcat@from,w
  8335  143C  0084               	movwf	4
  8336  143D  120A  158A  200A  160A  118A  	fcall	stringdir
  8337  1442  00F1               	movwf	??_strcat
  8338  1443  0872               	movf	strcat@cp,w
  8339  1444  0084               	movwf	4
  8340  1445  0871               	movf	??_strcat,w
  8341  1446  0080               	movwf	0
  8342  1447  0800               	movf	0,w
  8343  1448  1903               	btfsc	3,2
  8344  1449  0008               	return
  8345  144A  2C33               	goto	i1l2918
  8346  144B                     __end_of_strcat:	
  8347                           ;	Return value of _strcat is never used
  8348                           
  8349  007E                     btemp	set	126	;btemp
  8350  007E                     wtemp0	set	126


Data Sizes:
    Strings     165
    Constant    10
    Data        0
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     76      78
    BANK1            80     59      78
    BANK3            96      0      16
    BANK2            96      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 4
		 -> num(BANK1[4]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 4
		 -> num(BANK1[4]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_21(CODE[1]), STR_18(CODE[1]), STR_15(CODE[1]), STR_14(CODE[1]), 
		 -> STR_13(CODE[1]), floatToString@string(BANK1[16]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 16
		 -> s(BANK3[16]), num(BANK1[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 16
		 -> s(BANK3[16]), num(BANK1[4]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 2
		 -> STR_11(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), 
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 4
		 -> num(BANK1[4]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 4
		 -> num(BANK1[4]), 

    atof@s	PTR const unsigned char  size(1) Largest target is 4
		 -> num(BANK1[4]), 

    strtod@s	PTR const unsigned char  size(1) Largest target is 4
		 -> num(BANK1[4]), 

    strtod@res	PTR PTR const unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_12(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> floatToString@string(BANK1[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 16
		 -> s(BANK3[16]), num(BANK1[4]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 4
		 -> num(BANK1[4]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> STR_28(CODE[7]), STR_27(CODE[7]), STR_26(CODE[7]), STR_25(CODE[7]), 
		 -> STR_24(CODE[7]), STR_23(CODE[17]), STR_22(CODE[17]), STR_20(CODE[17]), 
		 -> STR_19(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), s(BANK3[16]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1_strlen

Critical Paths under _main in BANK0

    _main->_floatToString
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _round->_trunc
    _trunc->___fttol
    ___fttol->___ftdiv
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _atof->_strtod
    _strtod->___ftdiv
    ___ftneg->___altoft
    ___ftmul->___ftadd
    ___ftge->___ftmul
    ___ftdiv->___ftmul
    ___altoft->___ftpack
    _Setup->_Lcd_Set_Cursor
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _Navkey->_strcpy
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_floatToString
    _floatToString->_round
    _round->_trunc
    _trunc->___fttol
    _atof->_strtod

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   59110
                                             49 BANK1     10    10      0
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                             _Navkey
                              _Setup
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                               _atof
                      _floatToString
                              _round
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               8     6      2     150
                                              2 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _floatToString                                       30    27      3   20194
                                             75 BANK0      1     1      0
                                             20 BANK1     29    26      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
                              _round
                            _sprintf
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    18      5    1148
                                             16 BANK0     15    10      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                             10 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              2 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _round                                                6     3      3    7911
                                             14 BANK1      6     3      3
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                9     6      3    3617
                                             74 BANK0      1     1      0
                                              6 BANK1      8     5      3
                           ___altoft
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     336
                                              2 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     508
                                             66 BANK0      8     4      4
                                              0 BANK1      6     6      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    3563
                                             21 BANK0     13     7      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2328
                                             10 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _atof                                                 5     1      4   11816
                                             73 BANK0      1     1      0
                                             22 BANK1      4     0      4
                             _strtod
 ---------------------------------------------------------------------------------
 (2) _strtod                                              29    26      3   11686
                                             66 BANK0      7     4      3
                                              0 BANK1     22    22      0
                           ___altoft
                             ___bmul
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (3) _isspace                                              2     2      0      90
                                              2 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     220
                                              2 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     416
                                             18 BANK0      3     0      3
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3203
                                             34 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftge                                              12     6      6     750
                                             50 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    2901
                                             50 BANK0     16    10      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     220
                                              2 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    2375
                                             10 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              2 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _Setup                                                2     2      0    1712
                                             13 BANK0      2     2      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1    1404
                                              6 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              6 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              3 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Navkey                                               1     1      0     645
                                              9 BANK0      1     1      0
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               7     3      4     645
                                              2 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1100
                                              7 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              3 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  7     7      0    1290
                                              8 COMMON     5     5      0
                                              0 BANK0      2     2      0
                             _strcat
                           i1_strlen
 ---------------------------------------------------------------------------------
 (7) i1_strlen                                             8     6      2      90
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (8) _strcat                                               4     3      1    1132
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Navkey
     _strcpy
   _Setup
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
   ___awtoft
     ___ftpack
   ___ftadd
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     _frexp (ARG)
   ___ftdiv
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftge
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftpack (ARG)
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
   _atof
     _strtod
       ___altoft
         ___ftpack
       ___bmul
       ___ftdiv
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___lmul
       _isdigit
       _isspace
   _floatToString
     ___awtoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftneg
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _round
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcpy
   _round
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     _trunc (ARG)
       ___altoft
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       _frexp (ARG)
   _strcpy
   _strlen

 _ISR (ROOT)
   _strcat
   i1_strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      BA       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4E       5       97.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     3B      4E       7       97.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      10       9       16.7%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      BA      12        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Jul 14 23:31:39 2021

             ___altoft@exp 0030                          _s 0190                          pc 0002  
           ___bmul@product 0024                __CFG_CP$OFF 0000              ___altoft@sign 0031  
                       l73 136D                         l74 136E                         l75 1372  
                       l76 1373                         l77 1377                         l78 1378  
                       l79 137C                         _mL 00DB                         _ms 00E1  
                       fsr 0004              _floatToString 0CE7               ___ftadd@exp1 0041  
             ___ftadd@exp2 0040               ___ftadd@sign 003F                        l217 06CF  
                      l170 167E                        l181 16BF                        l182 16AF  
                      l191 16C1                        l175 16AD                        l511 0410  
                      l176 1698                        l169 1692                        l471 00C7  
                      l615 0E78                        l466 0143                        l591 17DF  
                      l592 17E7                        l584 17CA                        l488 0255  
                      l675 0B14                        _RA5 002D                        _RD0 0040  
                      _RD1 0041                        _RD2 0042                        _RC4 003C  
                      _RE0 0048                        _RD3 0043                        _RC5 003D  
                      _RE1 0049                        _RD4 0044                        _RE2 004A  
                      _RC6 003E                        _RC7 003F               __CFG_CPD$OFF 0000  
                      _ISR 0ED9                        _num 00EA                        fsr0 0004  
                      indf 0000               __CFG_FOSC$XT 0000               __CFG_LVP$OFF 0000  
                     ?_ISR 0070               ___ftdiv@cntr 005C                       ISR@i 0020  
             ___ftdiv@sign 0061                       l2204 0A9A                       l2150 17AF  
                     l2302 1363                       l2230 0B02                       l2222 0ADD  
                     l2160 17D9                       l2152 17B4                       l2144 179C  
                     l2304 1364                       l2232 0B19                       l2224 0AF3  
                     l2402 09F2                       l2330 0E00                       l2148 17A3  
                     l2316 133D                       l2236 0B27                       l2158 17CF  
                     l2326 0DF9                       l2246 14B5                       l2192 15F6  
                     l2424 0A56                       l2416 0A37                       l2440 171B  
                     l2272 15BF                       l2360 0E53                       l2336 0E0F  
                     l2520 152A                       l2194 1608                       l2282 1343  
                     l2354 0E3E                       l2522 1538                       l2436 16F4  
                     l2268 15A9                       l2372 0E8A                       l2356 0E4A  
                     l2348 0E29                       l2532 1559                       l2286 1349  
                     l2366 0E68                       l2358 0E4F                       l2550 1497  
                     l3422 0491                       l2480 0BBB                       l2464 0B6C  
                     l2800 0218                       l2704 0040                       l2376 0E9C  
                     l2368 0E74                       l2528 154E                       l2544 147B  
                     l3408 0452                       l2458 0B56                       l2714 0061  
                     l2706 0057                       l2386 0EBF                       l2546 1489  
                     l2554 14A2                       l2650 0C4E                       l3506 06E5  
                     l3450 0510                       l3522 075C                       l2396 09DC  
                     l2492 0BE3                       l2476 0BAB                       l2820 02D1  
                     l2732 008A                       l2724 0088                       l2716 0065  
                     l2900 13E4                       l2660 0C65                       l2644 0C38  
                     l3436 04D0                       l2910 1562                       l2814 0259  
                     l2726 0078                       l2718 006D                       l3470 0588  
                     l2488 0BD3                       l2816 0298                       l2752 0150  
                     l3376 1750                       l2672 0C8C                       l2850 0339  
                     l2842 0329                       l2770 017E                       l2666 0C6B  
                     l2690 0CE2                       l3482 05C1                       l3458 0553  
                     l2588 164B                       l2860 03B0                       l2764 0170  
                     l3492 06A4                       l2950 168E                       l2854 0372  
                     l2846 0331                       l2758 0160                       l2686 0C9F  
                     l2678 0C9B                       l2926 1452                       l2696 13BB  
                     l2960 16A8                       l2856 0377                       l2768 0176  
                     l2792 01FE                       l2688 0C18                       l2928 145D  
                     l2882 0408                       l2788 01F8                       l2976 16C9  
                     l2968 16BA                       l2888 0439                       STR_1 08AD  
                     STR_2 08AF                       STR_3 08B1                       STR_4 08B3  
                     STR_5 08B5                       STR_6 08B7                       STR_7 08B9  
                     STR_8 08BB                       STR_9 08BD                       u2115 17EE  
                     u2035 17A8                       u3005 154F                       u2055 17C3  
                     u2215 0AA2                       u3115 1630                       u2075 17D2  
                     u3035 147E                       u2245 0ADE                       u3135 1659  
                     u2335 15C1                       u3055 148F                       u3145 14F4  
                     u2185 15FB                       u2345 15C9                       u3065 1498  
                     u3331 0128                       u3315 00B9                       u2275 0B05  
                     u3332 0133                       u3333 013E                       u2525 0E2A  
                     u4125 06AD                       u4207 1506                       u2615 0E69  
                     u4217 1519                       u2705 0A16                       u3185 0C82  
                     u2715 0A38                       u2555 0E3F                       u4157 07F5  
                     u2725 0A49                       u4167 08CF                       u2735 0A57  
                     u4177 08E0                       u2761 16E7                       u2825 0B78  
                     u2585 0E54                       u2762 16E8                       u4187 08F1  
                     u2763 16ED                       u2915 0BE4                       u2835 0B8A  
                     u2764 16EE                       u4197 13AC                       u2781 170E  
                     u2925 0BEC                       u2782 170F                       u2695 0A04  
                     u2783 1714                       u2784 1715                       u2865 0BBC  
                     u2875 0BC4                       u2965 152D                       u2985 1539  
                     u2995 1545                       _TMR0 0001               __CFG_WRT$OFF 0000  
        ?_Lcd_Write_String 0027                       _atof 137E                       _main 044A  
             ___ftpack@arg 0022                       _modo 006D               ___ftpack@exp 0025  
                     btemp 007E                       start 0012         ??_Lcd_Write_String 0029  
          __end_of_Lcd_Cmd 13B5          ___bmul@multiplier 0025               ___ftmul@cntr 0050  
             ___ftmul@sign 0051                      ??_ISR 0078               ___fttol@exp1 00A5  
             ___fttol@lval 00A1             ?_floatToString 00B4                      ?_atof 00B6  
                    ?_main 0070            __end_of___ftadd 0ED9                      STR_10 08AB  
                    STR_11 08A9                      STR_12 08A3                      STR_20 081A  
                    STR_21 0886                      STR_13 0886                      STR_14 0886  
                    STR_22 085E                      STR_15 0886                      STR_23 083C  
                    STR_24 0880                      STR_16 084D                      STR_25 0895  
                    STR_17 082B              __CFG_WDTE$OFF 0000                      STR_18 0886  
                    STR_26 089C                      STR_27 088E                      STR_19 086F  
                    STR_28 0887            __end_of___ftdiv 0A7C            __end_of___ftneg 1324  
          __end_of___ftmul 0C11            __end_of___fttol 0B3E            __end_of___lwdiv 155E  
                    i1l141 0F12                      i1l134 0EFD                      i1l135 0EDB  
                    i1l139 0F04                      i1l148 0FF5            __end_of___lwmod 14A7  
                    _PORTB 0006    __size_of_Lcd_Set_Cursor 0052                      _TRISB 0086  
                    _TRISC 0087                      _TRISD 0088        ___lmul@multiplicand 0026  
                    _Setup 07B0              ___awtoft@sign 002F            __end_of_dpowers 081A  
                    _frexp 14A7                      _errno 00E4            __end_of_isdigit 133F  
            ___ftpack@sign 0026                      _timer 007D                      atof@s 0069  
                    _round 0924                      _trunc 172A            __end_of_isspace 1366  
           __CFG_BOREN$OFF 0000                      pclath 000A                      status 0003  
                    wtemp0 007E            __end_of_sprintf 0CE7           __end_ofi1_strlen 1423  
         __end_of_Lcd_Init 0924           __end_of_Lcd_Port 137E            __initialization 0015  
             __end_of_atof 1399               __end_of_main 07B0                     ??_atof 0069  
                   ??_main 00D1              ___fttol@sign1 00A0                 i1strlen@cp 0077  
       __size_of_Lcd_Clear 000B                     ?_Setup 0070                     ?_frexp 0022  
         __end_of___altoft 1622           __end_of___awtoft 13FD           __end_of___ftpack 1800  
                   ?_round 00AE                     ?_trunc 00A6                     i1l3106 0F36  
                   i1l3052 1402                     i1l3116 0F41                     i1l3220 0FD7  
                   i1l3054 140D                     i1l3206 0FA6                     i1l3126 0F4C  
                   i1l3136 0F57                     i1l3224 0FE9                     i1l3146 0F62  
                   i1l3218 0FB1                     i1l3156 0F6D                     i1l3228 0FEE  
                   i1l3238 0FF4                     i1l3166 0F78                     i1l3094 0F26  
                   i1l3176 0F83                     i1l3096 0F2B                     i1l3186 0F8E  
                   i1l3196 0F9B                     i1l2920 143B                     i1l2916 1428  
                   i1l2918 1433                     u386_25 0F24                     u387_25 0FD8  
                   u388_25 0FE7                  ??_Lcd_Cmd 0023    __size_of_Lcd_Write_Char 003D  
           __CFG_PWRTE$OFF 0000                     _Navkey 1674                     ___bmul 133F  
                   ___ftge 16CB                     ___lmul 159F            ??_floatToString 006B  
                ??___ftadd 003B                  ??___ftdiv 0058                  ??___ftneg 0035  
                ??___ftmul 0048                  ??___fttol 0066                  ??___lwdiv 0026  
                ??___lwmod 002E                     _minuto 00DE                     _tiempo 00E6  
                   _strcat 1423                     _strcpy 13B5                     _strlen 144B  
                   _strtod 002D      ___ftmul@f3_as_product 004D                  ??_isdigit 0022  
                   saved_w 007E                  ??_isspace 0022                     round@f 00B1  
                   round@x 00AE                  ??_sprintf 0035                     trunc@i 00A9  
                   trunc@x 00A6            Lcd_Set_Cursor@a 0029            Lcd_Set_Cursor@b 0026  
          Lcd_Set_Cursor@y 002B            Lcd_Set_Cursor@z 002A    __end_of__initialization 0029  
               ___altoft@c 002A                 ___ftadd@f1 0035                 ___ftadd@f2 0038  
               ___ftge@ff1 0052                 ___ftge@ff2 0055          __end_of_Lcd_Clear 132F  
               ___ftdiv@f1 0055                 ___ftdiv@f2 0052                 ___ftdiv@f3 005D  
               ___ftneg@f1 0032                 ___awtoft@c 002A        ___bmul@multiplicand 0022  
               ___ftmul@f1 0042                 ___ftmul@f2 0045                 ___fttol@f1 0062  
           __pcstackCOMMON 0070              __end_of_Setup 07FE              __end_of_frexp 14E3  
            __end_of_round 09C4              __end_of_trunc 1792             _Lcd_Set_Cursor 1622  
           _OPTION_REGbits 0081                    ??_Setup 002D                  ?i1_strlen 0070  
                ?_Lcd_Init 0070                  ?_Lcd_Port 0070                    ??_frexp 0026  
                  ??_round 006B                    ??_trunc 006A                 __pbssBANK0 006C  
               __pbssBANK1 00DB                 __pbssBANK3 0190                    ?_Navkey 0070  
               __pmaintext 044A                    ?___bmul 0022                    ?___ftge 0052  
                  ?___lmul 0022                 __pintentry 0004                  ?___altoft 002A  
           ___lmul@product 002B  __size_of_Lcd_Write_String 0041                  ?___awtoft 002A  
                ?___ftpack 0022     __end_of_Lcd_Set_Cursor 1674                    ?_strcat 0070  
                  ?_strcpy 0022                    ?_strlen 0022                    ?_strtod 0062  
               ??i1_strlen 0072                 ??_Lcd_Init 0026                 ??_Lcd_Port 0022  
               __stringtab 0800             _Lcd_Write_Char 14E3                    _Lcd_Cmd 1399  
          __size_of_Navkey 0057            __size_of___bmul 0013            __size_of___ftge 005F  
          __size_of___lmul 0041                    ___ftadd 0DD0                    ___ftdiv 09C4  
                  ___ftneg 131A                    ___ftmul 0B3E                    ___fttol 0A7C  
                  ___lwdiv 1520                    ___lwmod 1473                 ??___altoft 002E  
               ??___awtoft 002D                 ??___ftpack 0027            ?_Lcd_Set_Cursor 0026  
                  __ptext1 144B                    __ptext2 0CE7                    __ptext3 0C11  
                  __ptext4 1473                    __ptext5 1520                    __ptext6 0924  
                  __ptext7 172A                    __ptext8 14A7                    __ptext9 0A7C  
          __size_of_strcat 0028            __size_of_strcpy 0023            __size_of_strlen 0028  
             __size_of_ISR 0127                  _T1CONbits 0010            __size_of_strtod 041D  
                  _dpowers 0810                    _isdigit 132F                    _isspace 1352  
                  _sprintf 0C11                    clrloop0 1313     __end_of_Lcd_Write_Char 1520  
     end_of_initialization 0029                  Lcd_Port@a 0022                    strlen@s 0029  
                  strtod@s 00B5                  _PORTBbits 0006                  _PORTDbits 0008  
      floatToString@string 00B7                  _TRISAbits 0085                  _TRISEbits 0089  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0027          Lcd_Write_String@i 002C  
              ___ftdiv@exp 0060         _floatToString$1002 00C7         _floatToString$1003 00CA  
              ___ftmul@exp 004C                 _strtod$640 00A0                 _strtod$641 00A3  
               _strtod$642 00A6                 _strtod$643 00A9                 _strtod$639 00AC  
                _Lcd_Clear 1324             __end_of_Navkey 16CB             __end_of___bmul 1352  
           __end_of___ftge 172A             __end_of___lmul 15E0      __end_of_floatToString 0DD0  
         _Lcd_Write_String 155E             __end_of_strcat 144B             __end_of_strcpy 13D8  
           __end_of_strlen 1473             __end_of_strtod 044A        start_initialization 0015  
              __end_of_ISR 1000                  i1strlen@s 0076          __size_ofi1_strlen 0026  
        __size_of_Lcd_Init 0061          __size_of_Lcd_Port 0018                 frexp@value 0022  
                 ??_Navkey 0029                 ?_Lcd_Clear 0070                   ??___bmul 0023  
                 ??___ftge 0058                   ??___lmul 002A            Lcd_Write_Char@a 0026  
          Lcd_Write_Char@y 0025                   ??_strcat 0071                   ??_strcpy 0026  
                 ??_strlen 0024                   ??_strtod 0065          __size_of___altoft 0042  
        __size_of___awtoft 0025          __size_of___ftpack 006E                __pbssCOMMON 007D  
                ___latbits 0002              __pcstackBANK0 0020              __pcstackBANK1 00A0  
                 ?_Lcd_Cmd 0070                sprintf@flag 0039                sprintf@prec 003A  
                _main$1004 00D2                  _main$1005 00D5                  _main$1006 00D8  
         ___lwdiv@dividend 0024           ??_Lcd_Set_Cursor 0027                   ?___ftadd 0035  
                 ?___ftdiv 0052                   ?___ftneg 0032                   ?___ftmul 0042  
                 ?___fttol 0062                   ?___lwdiv 0022                   ?___lwmod 002A  
                __pstrings 0800                   ?_isdigit 0070                   ?_isspace 0070  
           __size_of_Setup 004E           ___lwdiv@quotient 0027                   ?_sprintf 0030  
           __size_of_frexp 003C             __size_of_round 00A0             __size_of_trunc 0068  
        interrupt_function 0004                  clear_ram0 1312                   _PIE1bits 008C  
                _seleccion 006C                   Lcd_Cmd@a 0025                   _PIR1bits 000C  
              ??_Lcd_Clear 0026                strtod@flags 00AF                strtod@expon 00B0  
              __stringbase 080F                 _ADCON1bits 009F           ??_Lcd_Write_Char 0023  
                 i1_strlen 13FD                   _Lcd_Init 08C3                   _Lcd_Port 1366  
        ___lmul@multiplier 0022   __end_of_Lcd_Write_String 159F           __size_of_Lcd_Cmd 001C  
                frexp@eptr 0025           __size_of___ftadd 0109           __size_of___ftdiv 00B8  
         __size_of___ftneg 000A                   ___altoft 15E0           __size_of___ftmul 00D3  
         __size_of___fttol 00C2           __size_of___lwdiv 003E           __size_of___lwmod 0034  
                 ___awtoft 13D8                   ___ftpack 1792         __end_of__stringtab 0810  
              _isdigit$710 0022                 sprintf@val 003B                 strcat@from 0070  
         __size_of_isdigit 0010            ___lwdiv@divisor 0022           __size_of_isspace 0014  
          ___lwdiv@counter 0029                   __ptext10 0DD0                   __ptext11 13D8  
                 __ptext20 09C4                   __ptext12 137E                   __ptext21 133F  
                 __ptext13 002D                   __ptext30 13B5                   __ptext22 15E0  
                 __ptext14 1352                   __ptext31 155E                   __ptext23 1792  
                 __ptext15 132F                   __ptext32 14E3                   __ptext24 07B0  
                 __ptext16 159F                   __ptext33 1366                   __ptext25 1622  
                 __ptext17 131A                   __ptext34 0ED9                   __ptext26 08C3  
                 __ptext18 0B3E                   __ptext35 13FD                   __ptext27 1324  
                 __ptext19 16CB                   __ptext36 1423                   __ptext28 1399  
                 __ptext29 1674           __size_of_sprintf 00D6                 strcpy@from 0024  
               trunc@expon 00AC              __size_of_atof 001B              __size_of_main 0366  
               strtod@eexp 00AE                _isspace$713 0022                 _INTCONbits 000B  
                 isdigit@c 0023         Lcd_Write_Char@temp 0024      floatToString@floatNum 00B4  
                 intlevel1 0000                  sprintf@ap 0038                  sprintf@sp 003D  
         ___lwmod@dividend 002C     __size_of_floatToString 00E9                   isspace@c 0023  
                stringcode 080A                  strtod@res 0062         Lcd_Set_Cursor@temp 002C  
     floatToString@decimal 00CD                   sprintf@c 003E                   sprintf@f 0030  
                 strcat@cp 0072                   strcat@to 0073            ___lwmod@divisor 002A  
     floatToString@integer 00CF                   strcpy@cp 0027                   strlen@cp 0028  
                 strcpy@to 0022            ___lwmod@counter 002F                   stringdir 080A  
                 stringtab 0800                _timerPrueba 00E8                   strtod@_u 00B1  
